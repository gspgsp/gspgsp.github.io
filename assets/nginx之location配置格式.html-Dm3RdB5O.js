import{_ as n,c as e,d as l,o as i}from"./app-CHrRue27.js";const a={};function s(c,t){return i(),e("div",null,t[0]||(t[0]=[l(`<p>nginx之location配置格式:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">location 语法</span>
<span class="line">Location 块通过指定模式来与客户端请求的URI相匹配。</span>
<span class="line">Location基本语法：</span>
<span class="line"></span>
<span class="line">1.匹配 URI 类型，有四种参数可选，当然也可以不带参数。</span>
<span class="line">location [ = | ~ | ~* | ^~ ] /URI { … }</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">2.命名location，用@来标识，类似于定义goto语句块。</span>
<span class="line">location @/name/ { … }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数解释:</p><table><thead><tr><th style="text-align:center;">location 后参数类型</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">空</td><td style="text-align:center;">location 后没有参数直接跟着 标准 URI，表示前缀匹配，代表跟请求中的 URI 从头开始匹配。</td></tr><tr><td style="text-align:center;">=</td><td style="text-align:center;">用于标准 URI 前，要求请求字符串与其精准匹配，成功则立即处理，nginx停止搜索其他匹配。</td></tr><tr><td style="text-align:center;">^~</td><td style="text-align:center;">用于标准 URI 前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</td></tr><tr><td style="text-align:center;">~</td><td style="text-align:center;">用于正则 URI 前，表示 URI 包含正则表达式， 区分大小写</td></tr><tr><td style="text-align:center;">~*</td><td style="text-align:center;">用于正则 URI 前， 表示 URI 包含正则表达式， 不区分大小写</td></tr><tr><td style="text-align:center;">@</td><td style="text-align:center;">@ 定义一个命名的 location，@ 定义的locaiton名字一般用在内部定向，这个在请求静态资源(图片 pdf文件等)用的比较多</td></tr></tbody></table><p>匹配顺序:</p><ol><li>location = # 精准匹配</li><li>location ^~ # 带参前缀匹配</li><li>location ~ # 正则匹配（区分大小写）</li><li>location ~* # 正则匹配（不区分大小写）</li><li>location /a # 普通前缀匹配，优先级低于带参数前缀匹配。</li><li>location / # 任何没有匹配成功的，都会匹配这里处理</li></ol>`,6)]))}const d=n(a,[["render",s],["__file","nginx之location配置格式.html.vue"]]),r=JSON.parse('{"path":"/content/linux/nginx/nginx%E4%B9%8Blocation%E9%85%8D%E7%BD%AE%E6%A0%BC%E5%BC%8F.html","title":"nginx之location配置格式","lang":"en-US","frontmatter":{"sidebar":false,"title":"nginx之location配置格式","description":"nginx之location配置格式"},"headers":[],"git":{},"filePathRelative":"content/linux/nginx/nginx之location配置格式.md"}');export{d as comp,r as data};
