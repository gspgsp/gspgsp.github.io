import{_ as l,c as p,d as o,a as n,o as c,r as a}from"./app-CHrRue27.js";const i={};function d(r,s){const t=a("BackBtn"),e=a("CommentService");return c(),p("div",null,[s[0]||(s[0]=o(`<p>目前遇到这样的需求，需要将如下结构的数据进行更行操作：</p><table><thead><tr><th style="text-align:left;">id</th><th style="text-align:left;">user_id</th><th style="text-align:left;">no</th><th style="text-align:left;">no_modify</th><th style="text-align:left;">created_at</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">12</td><td style="text-align:left;"></td><td style="text-align:left;">2021-08-26 08:23:46</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">1</td><td style="text-align:left;">13</td><td style="text-align:left;"></td><td style="text-align:left;">2021-08-26 08:23:50</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">1</td><td style="text-align:left;">14</td><td style="text-align:left;"></td><td style="text-align:left;">2021-08-26 08:23:55</td></tr></tbody></table><p>更新为：</p><table><thead><tr><th style="text-align:left;">id</th><th style="text-align:left;">user_id</th><th style="text-align:left;">no</th><th style="text-align:left;">no_modify</th><th style="text-align:left;">created_at</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">12</td><td style="text-align:left;"></td><td style="text-align:left;">2021-08-26 08:23:46</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">1</td><td style="text-align:left;">13</td><td style="text-align:left;">12</td><td style="text-align:left;">2021-08-26 08:23:50</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">1</td><td style="text-align:left;">14</td><td style="text-align:left;">13</td><td style="text-align:left;">2021-08-26 08:23:55</td></tr></tbody></table><p>通过存储过程循环指定用户，然后进行更新操作，语句如下:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">DEFINER</span><span class="token operator">=</span><span class="token identifier"><span class="token punctuation">\`</span>qinhong<span class="token punctuation">\`</span></span><span class="token variable">@\`%\`</span> <span class="token keyword">PROCEDURE</span> <span class="token identifier"><span class="token punctuation">\`</span>data_proc<span class="token punctuation">\`</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">	<span class="token comment">#Routine body goes here...</span></span>
<span class="line">         <span class="token keyword">declare</span> stop_flag <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">declare</span> account_id <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">declare</span> account_user_id <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">declare</span> num <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">         <span class="token keyword">declare</span> cur1 <span class="token keyword">cursor</span> <span class="token keyword">for</span> <span class="token keyword">select</span> id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> <span class="token keyword">no</span> <span class="token keyword">from</span> update_test <span class="token keyword">where</span> user_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_id <span class="token keyword">from</span> update_test<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> created_at <span class="token keyword">asc</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">         <span class="token keyword">declare</span> <span class="token keyword">continue</span> <span class="token keyword">handler</span> <span class="token keyword">for</span> <span class="token operator">not</span> found <span class="token keyword">set</span> stop_flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">         <span class="token keyword">open</span> cur1<span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">fetch</span> cur1 <span class="token keyword">into</span> account_id<span class="token punctuation">,</span>account_user_id<span class="token punctuation">,</span>num<span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">while</span> stop_flag<span class="token operator">&lt;&gt;</span><span class="token number">1</span> <span class="token keyword">DO</span></span>
<span class="line"></span>
<span class="line">           <span class="token keyword">update</span> update_test <span class="token keyword">set</span> no_modify <span class="token operator">=</span> num <span class="token keyword">where</span> user_id <span class="token operator">=</span> account_user_id <span class="token operator">and</span> id <span class="token operator">=</span> <span class="token punctuation">(</span>account_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">         <span class="token keyword">fetch</span> cur1 <span class="token keyword">into</span> account_id<span class="token punctuation">,</span>account_user_id<span class="token punctuation">,</span>num<span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></span>
<span class="line">         <span class="token keyword">close</span> cur1<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">commit</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">END</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n(t),n(e)])}const u=l(i,[["render",d],["__file","mysql之更新第二行字段的值到第一行.html.vue"]]),y=JSON.parse('{"path":"/content/database/mysql/mysql%E4%B9%8B%E6%9B%B4%E6%96%B0%E7%AC%AC%E4%BA%8C%E8%A1%8C%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC%E5%88%B0%E7%AC%AC%E4%B8%80%E8%A1%8C.html","title":"mysql之更新第二行字段的值到第一行","lang":"en-US","frontmatter":{"sidebar":false,"title":"mysql之更新第二行字段的值到第一行","description":"mysql之更新第二行字段的值到第一行"},"headers":[],"git":{},"filePathRelative":"content/database/mysql/mysql之更新第二行字段的值到第一行.md"}');export{u as comp,y as data};
