import{_ as s,c as n,d as a,o as l}from"./app-CHrRue27.js";const i={};function t(p,e){return l(),n("div",null,e[0]||(e[0]=[a(`<h3 id="实现本地视频点播原理" tabindex="-1"><a class="header-anchor" href="#实现本地视频点播原理"><span>实现本地视频点播原理</span></a></h3><p>主要命令:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_time</span> <span class="token number">10</span> <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_key_info_file</span> keyinfo.txt <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_playlist_type</span> vod <span class="token punctuation">\\</span></span>
<span class="line">       output.m3u8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>仔细分析一下这条 <code>ffmpeg</code> 命令，每个参数的作用都说明清楚：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_time</span> <span class="token number">10</span> <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_key_info_file</span> keyinfo.txt <span class="token punctuation">\\</span></span>
<span class="line">       <span class="token parameter variable">-hls_playlist_type</span> vod <span class="token punctuation">\\</span></span>
<span class="line">       output.m3u8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1️⃣-ffmpeg" tabindex="-1"><a class="header-anchor" href="#_1️⃣-ffmpeg"><span>1️⃣ <code>ffmpeg</code></span></a></h3><ul><li>调用 <code>ffmpeg</code> 工具进行音视频处理和转码</li><li>可以处理 MP4、MKV、MOV 等各种视频格式</li></ul><h3 id="_2️⃣-i-input-mp4" tabindex="-1"><a class="header-anchor" href="#_2️⃣-i-input-mp4"><span>2️⃣ <code>-i input.mp4</code></span></a></h3><ul><li>指定输入文件 <code>input.mp4</code></li><li>这是你要转 HLS 的原始视频</li></ul><h3 id="_3️⃣-hls-time-10" tabindex="-1"><a class="header-anchor" href="#_3️⃣-hls-time-10"><span>3️⃣ <code>-hls_time 10</code></span></a></h3><ul><li><strong>每个 HLS 片段的时长</strong>，单位是秒</li><li>上例中设置为 10 秒 → 视频会被切成 10 秒一段的 <code>.ts</code> 文件</li><li>切片太短：请求次数多，CPU/带宽压力大</li><li>切片太长：快进响应慢</li></ul><h3 id="_4️⃣-hls-key-info-file-keyinfo-txt" tabindex="-1"><a class="header-anchor" href="#_4️⃣-hls-key-info-file-keyinfo-txt"><span>4️⃣ <code>-hls_key_info_file keyinfo.txt</code></span></a></h3><ul><li><strong>AES-128 加密的 key 信息</strong></li><li><code>keyinfo.txt</code> 文件内容格式：</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/absolute/path/to/local.key   # 生成的 AES-128 key 文件在本地路径</span>
<span class="line">http://your-server.com/key.key # 播放器请求 key 的 URL</span>
<span class="line">iv=00000000000000000000000000000001 # 可选 IV（初始化向量）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ffmpeg 会用这个 key 对生成的 <code>.ts</code> 片段进行 AES-128 加密</li><li>播放器在播放 <code>.m3u8</code> 时会通过 <code>key URI</code> 下载 key 解密</li></ul><h3 id="_5️⃣-hls-playlist-type-vod" tabindex="-1"><a class="header-anchor" href="#_5️⃣-hls-playlist-type-vod"><span>5️⃣ <code>-hls_playlist_type vod</code></span></a></h3><ul><li>设置 HLS 播放列表类型为 <strong>点播（VOD）</strong></li><li>生成完整 <code>.m3u8</code> 列表，适合点播视频</li><li>如果是直播可以使用 <code>-hls_playlist_type event</code> 或不指定</li></ul><h3 id="_6️⃣-output-m3u8" tabindex="-1"><a class="header-anchor" href="#_6️⃣-output-m3u8"><span>6️⃣ <code>output.m3u8</code></span></a></h3><ul><li>输出播放列表文件（m3u8）</li><li>里面包含所有切片的路径信息（ts 文件）和加密 key URI</li><li>浏览器 / HLS 播放器会读取 m3u8，然后按顺序请求 ts 片段播放</li></ul><h3 id="🔹-输出文件示例" tabindex="-1"><a class="header-anchor" href="#🔹-输出文件示例"><span>🔹 输出文件示例</span></a></h3><p>假设输入视频 30 秒，<code>-hls_time 10</code>，生成：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">output.m3u8</span>
<span class="line">segment0.ts</span>
<span class="line">segment1.ts</span>
<span class="line">segment2.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>output.m3u8</code> 内容类似：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">#EXTM3U</span>
<span class="line">#EXT-X-VERSION:3</span>
<span class="line">#EXT-X-TARGETDURATION:10</span>
<span class="line">#EXT-X-KEY:METHOD=AES-128,URI=&quot;http://your-server.com/key.key&quot;</span>
<span class="line">#EXTINF:10.0,</span>
<span class="line">segment0.ts</span>
<span class="line">#EXTINF:10.0,</span>
<span class="line">segment1.ts</span>
<span class="line">#EXTINF:10.0,</span>
<span class="line">segment2.ts</span>
<span class="line">#EXT-X-ENDLIST</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>#EXT-X-KEY</code>：指定加密方式和 key URI</li><li><code>#EXTINF</code>：每个 ts 片段的时长</li><li>播放器自动按顺序请求 ts 并解密播放</li></ul>`,26)]))}const c=s(i,[["render",t],["__file","实现本地视频点播原理.html.vue"]]),r=JSON.parse('{"path":"/content/tool/back/%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E8%A7%86%E9%A2%91%E7%82%B9%E6%92%AD%E5%8E%9F%E7%90%86.html","title":"实现本地视频点播原理","lang":"en-US","frontmatter":{"sidebar":false,"title":"实现本地视频点播原理","head":[["meta",{"name":"title","content":"实现本地视频点播原理"}],["meta",{"name":"description","content":"实现本地视频点播原理"}],["meta",{"name":"keywords","content":"实现本地视频点播原理"}],["meta",{"property":"og:title","content":"实现本地视频点播原理"}],["meta",{"property":"og:description","content":"实现本地视频点播原理"}]]},"headers":[{"level":3,"title":"实现本地视频点播原理","slug":"实现本地视频点播原理","link":"#实现本地视频点播原理","children":[]},{"level":3,"title":"1️⃣ ffmpeg","slug":"_1️⃣-ffmpeg","link":"#_1️⃣-ffmpeg","children":[]},{"level":3,"title":"2️⃣ -i input.mp4","slug":"_2️⃣-i-input-mp4","link":"#_2️⃣-i-input-mp4","children":[]},{"level":3,"title":"3️⃣ -hls_time 10","slug":"_3️⃣-hls-time-10","link":"#_3️⃣-hls-time-10","children":[]},{"level":3,"title":"4️⃣ -hls_key_info_file keyinfo.txt","slug":"_4️⃣-hls-key-info-file-keyinfo-txt","link":"#_4️⃣-hls-key-info-file-keyinfo-txt","children":[]},{"level":3,"title":"5️⃣ -hls_playlist_type vod","slug":"_5️⃣-hls-playlist-type-vod","link":"#_5️⃣-hls-playlist-type-vod","children":[]},{"level":3,"title":"6️⃣ output.m3u8","slug":"_6️⃣-output-m3u8","link":"#_6️⃣-output-m3u8","children":[]},{"level":3,"title":"🔹 输出文件示例","slug":"🔹-输出文件示例","link":"#🔹-输出文件示例","children":[]}],"git":{},"filePathRelative":"content/tool/back/实现本地视频点播原理.md"}');export{c as comp,r as data};
