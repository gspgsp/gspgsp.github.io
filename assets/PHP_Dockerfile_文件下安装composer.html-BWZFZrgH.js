import{_ as n,c as e,d as l,o as i}from"./app-CHrRue27.js";const a={};function c(r,s){return i(),e("div",null,s[0]||(s[0]=[l('<p>PHP Dockerfile 文件下安装composer:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"># Install Composer</span>\n<span class="line">RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer</span>\n<span class="line">详细解释一下 `php --` 这部分的含义：</span>\n<span class="line">  </span>\n<span class="line">在命令 `curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer` 中，`php --` 的作用如下：</span>\n<span class="line">1. `php` 部分：</span>\n<span class="line">   这是调用 PHP 命令行解释器来执行通过管道传递的 PHP 脚本（Composer 安装器）。</span>\n<span class="line">2. `--` 部分：</span>\n<span class="line">   这两个连字符 `--` 在命令行参数中有特殊含义。它用于分隔命令行选项和脚本参数。</span>\n<span class="line">   - 在 `--` 之前的选项是给 PHP 解释器的。</span>\n<span class="line">   - 在 `--` 之后的参数是传递给 PHP 脚本（在这里是 Composer 安装器）的。</span>\n<span class="line">3. 为什么需要 `--`：</span>\n<span class="line">   - 它确保 `--install-dir` 和 `--filename` 这些参数被正确地传递给 Composer 安装脚本，而不是被 PHP 解释器误解为自己的参数。</span>\n<span class="line">   - 这种做法在处理可能与 PHP 本身的选项冲突的脚本参数时特别有用。</span>\n<span class="line">4. 实际效果：</span>\n<span class="line">   - PHP 执行从 curl 下载的安装脚本。</span>\n<span class="line">   - 安装脚本接收到 `--install-dir=/usr/local/bin` 和 `--filename=composer` 这两个参数。</span>\n<span class="line">   - 基于这些参数，安装脚本知道将 Composer 安装到 `/usr/local/bin` 目录，并命名为 `composer`。</span>\n<span class="line">  </span>\n<span class="line">如果没有 `--`，PHP 可能会将后面的参数误认为是给自己的，而不是传递给要执行的脚本的。</span>\n<span class="line">简化的理解方式：</span>\n<span class="line">可以把 `php --` 看作是一个分界点：它告诉系统&quot;之前的部分是对 PHP 的指令，之后的部分是给 PHP 执行的脚本的参数&quot;。</span>\n<span class="line">这种用法在shell脚本和命令行操作中很常见，尤其是在处理复杂的命令行参数时。它提供了一种清晰的方式来分隔不同部分的参数，确保它们被正确地解释和使用。</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)]))}const o=n(a,[["render",c],["__file","PHP_Dockerfile_文件下安装composer.html.vue"]]),d=JSON.parse('{"path":"/content/service/docker/PHP_Dockerfile_%E6%96%87%E4%BB%B6%E4%B8%8B%E5%AE%89%E8%A3%85composer.html","title":"PHP Dockerfile 文件下安装composer","lang":"en-US","frontmatter":{"sidebar":false,"title":"PHP Dockerfile 文件下安装composer","description":"PHP Dockerfile 文件下安装composer"},"headers":[],"git":{},"filePathRelative":"content/service/docker/PHP_Dockerfile_文件下安装composer.md"}');export{o as comp,d as data};
