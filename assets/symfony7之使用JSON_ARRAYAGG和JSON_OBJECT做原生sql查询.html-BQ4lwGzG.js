import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function l(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h5 id="symfony7之使用json-arrayagg和json-object做原生sql查询" tabindex="-1"><a class="header-anchor" href="#symfony7之使用json-arrayagg和json-object做原生sql查询"><span>symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询</span></a></h5><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getCertificateListWithEvent</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration">Dto<span class="token punctuation">\\</span>Input<span class="token punctuation">\\</span>Certificate<span class="token punctuation">\\</span>CertificateListSearchDto</span> <span class="token variable">$certificateListSearchDto</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$where</span>  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$certificateListSearchDto</span><span class="token operator">-&gt;</span><span class="token function">getSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$where</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;(e.title LIKE :search OR e.abbreviation LIKE :search)&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;search&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;%&#39;</span> <span class="token operator">.</span> <span class="token variable">$certificateListSearchDto</span><span class="token operator">-&gt;</span><span class="token function">getSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$certificateListSearchDto</span><span class="token operator">-&gt;</span><span class="token function">getCertificateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$where</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;ct.title = :certificateType&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;certificateType&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$certificateListSearchDto</span><span class="token operator">-&gt;</span><span class="token function">getCertificateType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;SELECT </span>
<span class="line">            e.id,</span>
<span class="line">            e.title, </span>
<span class="line">            e.abbreviation,</span>
<span class="line">            JSON_ARRAYAGG(</span>
<span class="line">                JSON_OBJECT(</span>
<span class="line">                    &#39;id&#39;, ct.id,</span>
<span class="line">                    &#39;title&#39;, ct.title,</span>
<span class="line">                    &#39;certificateImage&#39;, ct.certificate_template_path,</span>
<span class="line">                    &#39;accessSetting&#39;, ct.access_setting,</span>
<span class="line">                    &#39;systemKey&#39;, ct.system_key,</span>
<span class="line">                    &#39;userDefined&#39;, ct.user_defined</span>
<span class="line">                ) // 这里本来还想对 JSON_OBJECT 使用 order by ct.sort_order desc 的，虽然我的mysql是 8.0.34 &gt; 8.0.14 但是还是报版本问题</span>
<span class="line">            ) AS certificateTypes</span>
<span class="line">        FROM events e </span>
<span class="line">        INNER JOIN certificate_types ct ON e.id = ct.event_id&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">&#39; WHERE &#39;</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39; AND &#39;</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$sql</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">&#39; GROUP BY e.id ORDER BY e.end_date DESC&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$connection</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$result</span>     <span class="token operator">=</span> <span class="token variable">$connection</span><span class="token operator">-&gt;</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetchAllAssociative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>关于 <code>JSON_ARRAYAGG</code> 和 <code>JSON_OBJECT</code> 的用法和区别，这两个是 MySQL（8.0+）提供的 <strong>JSON 生成函数</strong>，配合起来用就能生成结构化 JSON 数据。</p><h5 id="_1️⃣-json-object" tabindex="-1"><a class="header-anchor" href="#_1️⃣-json-object"><span>1️⃣ <strong><code>JSON_OBJECT</code></strong></span></a></h5><p><strong>作用</strong>：生成一个 <strong>单个 JSON 对象</strong>（key-value 结构）</p><p><strong>语法</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">JSON_OBJECT<span class="token punctuation">(</span>key1<span class="token punctuation">,</span> value1<span class="token punctuation">,</span> key2<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> JSON_OBJECT<span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Certificate A&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;sort_order&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Certificate A&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;sort_order&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特点</strong>：</p><ul><li>参数必须成对出现（key, value）。</li><li>key 必须是字符串，value 可以是任意表达式（数字、字符串、列名等）。</li><li>如果 key 重复，会取最后一个的值。</li><li>可以嵌套，比如 <code>JSON_OBJECT(&#39;info&#39;, JSON_OBJECT(&#39;id&#39;, 1))</code>。</li></ul><h5 id="_2️⃣-json-arrayagg" tabindex="-1"><a class="header-anchor" href="#_2️⃣-json-arrayagg"><span>2️⃣ <strong><code>JSON_ARRAYAGG</code></strong></span></a></h5><p><strong>作用</strong>：聚合多行数据为一个 <strong>JSON 数组</strong></p><p><strong>语法</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">JSON_ARRAYAGG<span class="token punctuation">(</span><span class="token keyword">value</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> sort_expr <span class="token keyword">ASC</span><span class="token operator">|</span><span class="token keyword">DESC</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>例子</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> JSON_ARRAYAGG<span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token keyword">AS</span> titles</span>
<span class="line"><span class="token keyword">FROM</span> certificate_types<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可能结果：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token string">&quot;Certificate A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Certificate B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Certificate C&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特点</strong>：</p><ul><li>类似 <code>GROUP_CONCAT</code>，但返回 JSON 数组，而不是字符串。</li><li><code>ORDER BY</code>（8.0.14+）可以控制数组内部顺序。</li><li>value 可以是简单列值，也可以是 JSON 对象。</li></ul><h5 id="_3️⃣-组合使用" tabindex="-1"><a class="header-anchor" href="#_3️⃣-组合使用"><span>3️⃣ <strong>组合使用</strong></span></a></h5><p><strong>常用场景</strong>：先用 <code>JSON_OBJECT</code> 生成每一行的 JSON 对象，再用 <code>JSON_ARRAYAGG</code> 把这些对象聚合成一个数组。</p><p><strong>理解</strong>：</p><ul><li><strong><code>JSON_OBJECT</code></strong>：一行 → 一个 JSON 对象</li><li><strong><code>JSON_ARRAYAGG</code></strong>：多行对象 → 一个 JSON 数组</li></ul><hr><h5 id="_4️⃣-版本限制" tabindex="-1"><a class="header-anchor" href="#_4️⃣-版本限制"><span>4️⃣ 版本限制</span></a></h5><ul><li><code>JSON_OBJECT</code> → MySQL 5.7.8+ 就支持</li><li><code>JSON_ARRAYAGG</code> → MySQL 8.0+ 才支持</li><li><code>JSON_ARRAYAGG(... ORDER BY ...)</code> → MySQL 8.0.14+ 才支持排序</li></ul><h5 id="_5️⃣-你的场景解释" tabindex="-1"><a class="header-anchor" href="#_5️⃣-你的场景解释"><span>5️⃣ 你的场景解释</span></a></h5><p>你代码里：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">JSON_ARRAYAGG<span class="token punctuation">(</span></span>
<span class="line">    JSON_OBJECT<span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;title&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>title<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;certificateImage&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>certificate_template_path<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;accessSetting&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>access_setting<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;systemKey&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>system_key<span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;userDefined&#39;</span><span class="token punctuation">,</span> ct<span class="token punctuation">.</span>user_defined</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> certificateTypes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等于：</p><ol><li><strong>对每个证书类型（<code>ct</code>）</strong> 生成一个 JSON 对象（<code>id</code>、<code>title</code> 等字段）。</li><li><strong>聚合到一个 JSON 数组</strong>（所有属于某个 <code>event</code> 的证书类型放到一起）。</li><li>结合 <code>GROUP BY e.id</code>，保证每个活动 (<code>event</code>) 只返回一行，并且那一行的 <code>certificateTypes</code> 是该活动的所有证书类型数组。</li></ol><hr><p>关于 JSON_ARRAYAGG 和 JSON_OBJECT, 我之前一直以为是两个窗口函数，但是根据窗口函数的定义，它们不是的，</p><h5 id="_1️⃣-它们的类别" tabindex="-1"><a class="header-anchor" href="#_1️⃣-它们的类别"><span>1️⃣ 它们的类别</span></a></h5><ul><li><p><strong><code>JSON_OBJECT</code></strong> → <strong>普通函数</strong>（scalar function）</p><ul><li>每一行执行一次，返回一个 JSON 对象。</li><li>和 <code>CONCAT()</code>、<code>LENGTH()</code> 这种函数一样，不涉及分组聚合。</li></ul></li><li><p><strong><code>JSON_ARRAYAGG</code></strong> → <strong>聚合函数</strong>（aggregate function）</p><ul><li>类似 <code>SUM()</code>、<code>GROUP_CONCAT()</code>，是基于分组（<code>GROUP BY</code>）对多行进行聚合，返回一个 JSON 数组。</li><li>不能单独在 <code>SELECT</code> 里随便用，除非有分组（或者整个表当成一个组）。</li></ul></li></ul><h5 id="_2️⃣-窗口函数是什么" tabindex="-1"><a class="header-anchor" href="#_2️⃣-窗口函数是什么"><span>2️⃣ 窗口函数是什么</span></a></h5><p><strong>窗口函数（window function）</strong> 是在分组聚合之后，还能“保留行级细节”的函数，比如：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> dept <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> salary <span class="token keyword">DESC</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点：</p><ul><li>必须和 <code>OVER (...)</code> 一起用。</li><li>不会合并成一行，而是返回每行对应的计算结果。</li></ul><h5 id="_3️⃣-区别总结" tabindex="-1"><a class="header-anchor" href="#_3️⃣-区别总结"><span>3️⃣ 区别总结</span></a></h5><table><thead><tr><th>函数类型</th><th>示例</th><th>是否需要 <code>GROUP BY</code></th><th>返回行数</th></tr></thead><tbody><tr><td>普通函数</td><td><code>JSON_OBJECT()</code></td><td>不需要</td><td>和输入行一样多</td></tr><tr><td>聚合函数</td><td><code>JSON_ARRAYAGG()</code></td><td>通常需要</td><td>每组一行</td></tr><tr><td>窗口函数</td><td><code>ROW_NUMBER() OVER()</code></td><td>不需要（用 <code>PARTITION</code> 代替）</td><td>和输入行一样多</td></tr></tbody></table><h5 id="_4️⃣-代码里的情况" tabindex="-1"><a class="header-anchor" href="#_4️⃣-代码里的情况"><span>4️⃣ 代码里的情况</span></a></h5><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">JSON_ARRAYAGG<span class="token punctuation">(</span>JSON_OBJECT<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> certificateTypes</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>JSON_OBJECT(...)</code></strong>：普通函数，生成每行的 JSON 对象。</li><li><strong><code>JSON_ARRAYAGG(...)</code></strong>：聚合函数，把当前 <code>GROUP BY e.id</code> 的多行对象合并成一个数组。</li></ul><blockquote><p>它俩配合起来用，就能实现“按 event 分组，每组输出一个 JSON 数组”。 这跟<code>窗口函数</code>是完全不同的机制。</p></blockquote><hr>`,52)]))}const o=n(p,[["render",l],["__file","symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony7%E4%B9%8B%E4%BD%BF%E7%94%A8JSON_ARRAYAGG%E5%92%8CJSON_OBJECT%E5%81%9A%E5%8E%9F%E7%94%9Fsql%E6%9F%A5%E8%AF%A2.html","title":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询","head":[["meta",{"name":"title","content":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询"}],["meta",{"name":"description","content":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询"}],["meta",{"name":"keywords","content":"php"}],["meta",{"property":"og:title","content":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询"}],["meta",{"property":"og:description","content":"symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询"}]]},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony7之使用JSON_ARRAYAGG和JSON_OBJECT做原生sql查询.md"}');export{o as comp,r as data};
