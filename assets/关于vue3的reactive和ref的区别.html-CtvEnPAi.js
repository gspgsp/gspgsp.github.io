import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h5 id="关于vue3的reactive和ref的区别" tabindex="-1"><a class="header-anchor" href="#关于vue3的reactive和ref的区别"><span>关于vue3的reactive和ref的区别</span></a></h5><p>在 Vue 3 中，<code>reactive</code> 和 <code>ref</code> 是响应式系统的核心工具，但它们有一些重要的区别，下面详细解释：</p><hr><h5 id="_1-ref-是用于-基本类型-也可以用于对象" tabindex="-1"><a class="header-anchor" href="#_1-ref-是用于-基本类型-也可以用于对象"><span>1. <code>ref</code> 是用于 <strong>基本类型</strong>（也可以用于对象）</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span>
<span class="line">count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 修改响应式值</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//模板中使用</span></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>ref</code> 的特点：</p><ul><li><code>ref(0)</code> 创建的是一个响应式包装对象：<code>{ value: 0 }</code></li><li>访问和修改值要通过 <code>.value</code></li><li>在模板中使用时，Vue 会自动解包 <code>.value</code>，可以直接用 <code>{{ count }}</code></li></ul></li></ul><blockquote><p>适合用于 <strong>字符串、数字、布尔值、null、undefined 等基本类型</strong>。</p></blockquote><hr><h5 id="_2-reactive-是用于-对象、数组、map-等引用类型" tabindex="-1"><a class="header-anchor" href="#_2-reactive-是用于-对象、数组、map-等引用类型"><span>2. <code>reactive</code> 是用于 <strong>对象、数组、Map 等引用类型</strong></span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Vue3&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span>
<span class="line">state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 响应式更新</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//模板中使用</span></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> state<span class="token punctuation">.</span>count <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>reactive</code> 的特点：</p><ul><li>返回的是原始对象的 Proxy 代理</li><li>可以直接读写属性，无需 <code>.value</code></li><li>只能用于对象（不能传基本类型，如 <code>reactive(1)</code> 会警告）</li></ul></li></ul><hr><h5 id="_3-对比总结" tabindex="-1"><a class="header-anchor" href="#_3-对比总结"><span>3. 对比总结</span></a></h5><table><thead><tr><th>特性</th><th><code>ref</code></th><th><code>reactive</code></th></tr></thead><tbody><tr><td>类型支持</td><td>基本类型和引用类型</td><td>只支持引用类型</td></tr><tr><td>解包方式</td><td><code>.value</code>（模板中自动解包）</td><td>直接访问属性</td></tr><tr><td>内部结构</td><td><code>{ value: xxx }</code></td><td>代理原对象</td></tr><tr><td>使用场景</td><td>单个值、基本类型</td><td>结构化对象（如 state、form）</td></tr><tr><td>响应性兼容</td><td>在数组、对象中使用需解包</td><td>自身是响应式</td></tr></tbody></table><hr><h5 id="_4-混合使用" tabindex="-1"><a class="header-anchor" href="#_4-混合使用"><span>4. 混合使用</span></a></h5><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// ref 嵌套在 reactive 中</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问 ref 内部的值</span></span>
<span class="line"></span>
<span class="line">state<span class="token punctuation">.</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 修改 ref 值</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但推荐在组合式 API 中：</p><ul><li>基本值使用 <code>ref</code></li><li>对象用 <code>reactive</code></li><li>不要将 <code>ref</code> 包在 <code>reactive</code> 里（嵌套 <code>.value</code> 可能会让代码变复杂）</li></ul><hr><h5 id="_5-实用建议" tabindex="-1"><a class="header-anchor" href="#_5-实用建议"><span>5. 实用建议</span></a></h5><p>如果你不确定用哪个，可以参考这个经验法则：</p><ul><li>你要声明的是 <strong>一个独立变量</strong>（数字、字符串等） → 用 <code>ref</code></li><li>你要声明的是 <strong>一个结构化状态对象</strong>（例如表单、用户信息等） → 用 <code>reactive</code></li></ul><hr>`,24)]))}const i=s(p,[["render",c],["__file","关于vue3的reactive和ref的区别.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/%E5%85%B3%E4%BA%8Evue3%E7%9A%84reactive%E5%92%8Cref%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"关于vue3的reactive和ref的区别","lang":"en-US","frontmatter":{"sidebar":false,"title":"关于vue3的reactive和ref的区别","head":[["meta",{"name":"title","content":"关于vue3的reactive和ref的区别"}],["meta",{"name":"description","content":"关于vue3的reactive和ref的区别"}],["meta",{"name":"keywords","content":"vue3,reactive,ref"}],["meta",{"property":"og:title","content":"关于vue3的reactive和ref的区别"}],["meta",{"property":"og:description","content":"关于vue3的reactive和ref的区别"}]]},"headers":[],"git":{},"filePathRelative":"content/front/js/关于vue3的reactive和ref的区别.md"}');export{i as comp,r as data};
