import{_ as e,c as a,d as n,o as s}from"./app-CHrRue27.js";const d={};function l(i,t){return s(),a("div",null,t[0]||(t[0]=[n(`<h5 id="mysql之索引树结构分类" tabindex="-1"><a class="header-anchor" href="#mysql之索引树结构分类"><span>mysql之索引树结构分类</span></a></h5><p>关于<strong>树结构中的节点分类</strong>：<code>根节点</code>、<code>内部节点</code>、<code>叶子节点</code>，帮你梳理一下它们的关系和特点，尤其结合数据库索引（比如 B+ 树）讲解。</p><hr><h5 id="_1-节点分类定义" tabindex="-1"><a class="header-anchor" href="#_1-节点分类定义"><span>1. 节点分类定义</span></a></h5><table><thead><tr><th>节点类型</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>根节点</td><td>树的最顶层节点</td><td>唯一一个，没有父节点</td></tr><tr><td>内部节点</td><td>非根节点且有子节点的节点</td><td>介于根节点和叶子节点之间，负责索引导航</td></tr><tr><td>叶子节点</td><td>没有子节点的节点</td><td>树的最底层节点，存储具体数据或指向数据</td></tr></tbody></table><hr><h5 id="_2-关系示意" tabindex="-1"><a class="header-anchor" href="#_2-关系示意"><span>2. 关系示意</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">         [根节点]</span>
<span class="line">         /      \\</span>
<span class="line">  [内部节点]  [内部节点]</span>
<span class="line">      |           |</span>
<span class="line">  [叶子节点]  [叶子节点]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根节点是树的入口。</li><li>内部节点是“中间层”，连接根节点和叶子节点，起导航作用。</li><li>叶子节点是最终存放数据的位置。</li></ul><hr><h5 id="_3-以-b-树为例" tabindex="-1"><a class="header-anchor" href="#_3-以-b-树为例"><span>3. 以 B+ 树为例</span></a></h5><ul><li><strong>根节点</strong> 存储键值和指向子节点的指针，最顶层索引。</li><li><strong>内部节点</strong> 也是存键值和子节点指针，但不存具体数据，只是索引层级的导航节点。</li><li><strong>叶子节点</strong> 存储完整的索引键值以及对应的<strong>数据行</strong>（聚簇索引）或数据行的<strong>主键指针</strong>（辅助索引）。</li></ul><hr><h5 id="_4-特点和作用" tabindex="-1"><a class="header-anchor" href="#_4-特点和作用"><span>4. 特点和作用</span></a></h5><table><thead><tr><th>节点类型</th><th>作用</th><th>存储内容</th><th>指针指向</th></tr></thead><tbody><tr><td>根节点</td><td>入口，开始搜索路径</td><td>键值+指向子节点的指针</td><td>子节点（内部节点或叶子节点）</td></tr><tr><td>内部节点</td><td>导航，加快查找速度</td><td>键值+指向子节点的指针</td><td>子节点（内部节点或叶子节点）</td></tr><tr><td>叶子节点</td><td>存储真正的数据或指向数据的地址</td><td>索引键值 + 行数据或主键指针</td><td>可能有链表指针指向相邻叶子节点（B+树）</td></tr></tbody></table><hr><h5 id="_5-说明" tabindex="-1"><a class="header-anchor" href="#_5-说明"><span>5. 说明</span></a></h5><ul><li><strong>所有节点（根节点和内部节点）都至少有两个子节点，保证树高度平衡。</strong></li><li><strong>叶子节点是没有子节点的末端节点，存储数据。</strong></li><li>在 B+ 树中，叶子节点之间通常通过链表连接，方便范围扫描。</li></ul><hr><h5 id="_6-例子-innodb-聚簇索引-b-树结构" tabindex="-1"><a class="header-anchor" href="#_6-例子-innodb-聚簇索引-b-树结构"><span>6. 例子：InnoDB 聚簇索引 B+ 树结构</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">          根节点</span>
<span class="line">     /               \\</span>
<span class="line">  内部节点          内部节点</span>
<span class="line">  /      \\          /      \\</span>
<span class="line">叶子节点 叶子节点  叶子节点  叶子节点（存储完整行数据）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,22)]))}const c=e(d,[["render",l],["__file","mysql之索引树结构分类.html.vue"]]),h=JSON.parse('{"path":"/content/database/mysql/mysql%E4%B9%8B%E7%B4%A2%E5%BC%95%E6%A0%91%E7%BB%93%E6%9E%84%E5%88%86%E7%B1%BB.html","title":"mysql之索引树结构分类","lang":"en-US","frontmatter":{"sidebar":false,"title":"mysql之索引树结构分类","head":[["meta",{"name":"title","content":"mysql之索引树结构分类"}],["meta",{"name":"description","content":"mysql之索引树结构分类"}],["meta",{"name":"keywords","content":"mysql"}],["meta",{"property":"og:title","content":"mysql之索引树结构分类"}],["meta",{"property":"og:description","content":"mysql之索引树结构分类"}]]},"headers":[],"git":{},"filePathRelative":"content/database/mysql/mysql之索引树结构分类.md"}');export{c as comp,h as data};
