import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>nuxt3获取当前应用的所有路由:</p><p>1.通过RoutesNamesList获取类型</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">表示命名路由的列表</span>
<span class="line">是命名路由的键组成的联合类型（如 &#39;home&#39; | &#39;user&#39;）。</span>
<span class="line"></span>
<span class="line">// Example</span>
<span class="line">type RoutesNamesList = &quot;home&quot; | &quot;user&quot;;</span>
<span class="line"></span>
<span class="line">实际使用:</span>
<span class="line">import type { RoutesNamesList } from &quot;@typed-router&quot;; // 在nuxt3框架下，会自动生成相关的路由，不需要自己处理</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.通过vue-router的router获取</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"></span>
<span class="line">const router = useRouter();//vue-router的组合函数</span>
<span class="line">console.log(router.getRoutes().map((r) =&gt; r.name)); // 打印所有路由名称</span>
<span class="line">  </span>
<span class="line">const routeNames = router.getRoutes().map((route) =&gt; route.name).filter(Boolean); //filter 过滤掉无效值</span>
<span class="line">console.log(routeNames);</span>
<span class="line">  </span>
<span class="line">//验证 filter(Boolean) 的作用</span>
<span class="line">const routes = [</span>
<span class="line">  { name: &quot;home&quot; },</span>
<span class="line">  { name: &quot;about&quot; },</span>
<span class="line">  { name: undefined },</span>
<span class="line">  { name: &quot;user&quot; },</span>
<span class="line">];</span>
<span class="line">  </span>
<span class="line">const routeNames = routes.map((route) =&gt; route.name);</span>
<span class="line">console.log(routeNames);</span>
<span class="line">// 输出: [&quot;home&quot;, &quot;about&quot;, undefined, &quot;user&quot;]</span>
<span class="line">  </span>
<span class="line">const filteredRouteNames = routes.map((route) =&gt; route.name).filter(Boolean);</span>
<span class="line">console.log(filteredRouteNames);</span>
<span class="line">// 输出: [&quot;home&quot;, &quot;about&quot;, &quot;user&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>拓展两个重要的路由信息:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">import type { RoutesNamedLocations, RoutesNamesList } from &quot;@typed-router&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在 Nuxt 3 中使用 <code>@typed-router</code>，通过 <code>RoutesNamedLocations</code> 和 <code>RoutesNamesList</code> 来定义和操作类型化的路由，是一种更安全和可维护的方式。以下是对这两个类型的简要说明和如何使用它们的例子：</p><h5 id="类型说明" tabindex="-1"><a class="header-anchor" href="#类型说明"><span>类型说明</span></a></h5><ol><li><p><strong><code>RoutesNamedLocations</code></strong><br> 表示命名路由的参数和查询参数类型的映射。<br> 每个命名路由都有相应的路径参数和查询参数的类型定义。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Example</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RoutesNamedLocations</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  home<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 无参数的路由</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token punctuation">{</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> query<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span> referrer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 有路径和查询参数的路由</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>RoutesNamesList</code></strong><br> 表示命名路由的列表。<br> 是命名路由的键组成的联合类型（如 <code>&#39;home&#39; | &#39;user&#39;</code>）。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// Example</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RoutesNamesList</span> <span class="token operator">=</span> <span class="token string">&quot;home&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h5 id="如何在代码中使用" tabindex="-1"><a class="header-anchor" href="#如何在代码中使用"><span>如何在代码中使用</span></a></h5><h5 id="示例-跳转到命名路由" tabindex="-1"><a class="header-anchor" href="#示例-跳转到命名路由"><span>示例：跳转到命名路由</span></a></h5><p>你可以在代码中使用 <code>RoutesNamedLocations</code> 和 <code>RoutesNamesList</code> 提供的类型化支持：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTypedRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@typed-router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RoutesNamedLocations <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@typed-router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useTypedRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 跳转到具体的命名路由</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">goToUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> userRoute<span class="token operator">:</span> RoutesNamedLocations<span class="token punctuation">[</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&quot;123&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        query<span class="token operator">:</span> <span class="token punctuation">{</span> referrer<span class="token operator">:</span> <span class="token string">&quot;google&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        name<span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 类型安全的路由名</span></span>
<span class="line">        <span class="token operator">...</span>userRoute<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> goToUser <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="示例-获取当前路由信息" tabindex="-1"><a class="header-anchor" href="#示例-获取当前路由信息"><span>示例：获取当前路由信息</span></a></h5><p>通过 <code>RoutesNamesList</code> 确保访问的命名路由是有效的：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useTypedRoute <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@typed-router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> RoutesNamesList <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@typed-router&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useTypedRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 当前路由是否是 &quot;user&quot;</span></span>
<span class="line">    <span class="token keyword">const</span> isUserRoute <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> route<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&quot;user&quot;</span> <span class="token keyword">as</span> RoutesNamesList<span class="token punctuation">;</span> <span class="token comment">// 类型安全</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span> isUserRoute <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h5><ol><li><strong>类型安全</strong>：避免拼写错误导致的运行时问题。</li><li><strong>自动补全</strong>：在 IDE 中提供命名路由的自动补全功能。</li><li><strong>更好维护性</strong>：如果路由参数或命名路由发生变更，编译器会提示更新相关代码。</li></ol><p>如果你需要进一步扩展，请提供更多具体的路由配置或使用场景！</p>`,22)]))}const c=n(p,[["render",o],["__file","nuxt3获取当前应用的所有路由.html.vue"]]),u=JSON.parse('{"path":"/content/front/js/nuxt3%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%BA%94%E7%94%A8%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E7%94%B1.html","title":"nuxt3获取当前应用的所有路由","lang":"en-US","frontmatter":{"sidebar":false,"title":"nuxt3获取当前应用的所有路由","description":"nuxt3获取当前应用的所有路由"},"headers":[],"git":{},"filePathRelative":"content/front/js/nuxt3获取当前应用的所有路由.md"}');export{c as comp,u as data};
