import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>之前使用到了form_login的登录方式，后来有新的需求，想直接通过接口的形式登录，比如常规的RESTFUL方式，查看 文档发现有 json_login可以实现，官方默认有5种登录方式，全部对应有自己的默认 authenticator,各个默认的authenticator 都定义在:/vendor/symfony/security-bundle/Resources/config/security_authenticator.php</p><p>关于 json_login :<br> 官方文档:https://symfony.com/doc/current/security.html#json-login<br> 这个文档中比较重要的一点是:ApiLoginController中的路由api_login方法体，会在用户授权成功之后(会先走默认的authenticator)被调用，然后在这个方法体里面添加需要返回给接口调用方的参数，比如 token信息:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/api/login&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;api_login&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">apiLogin</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">SessionInterface</span> <span class="token variable">$session</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">TokenStorageInterface</span> <span class="token variable">$tokenStorage</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">EventDispatcherInterface</span> <span class="token variable">$eventDispatcher</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;main&#39;</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$tokenStorage</span><span class="token operator">-&gt;</span><span class="token function">setToken</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$session</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;_security_main&#39;</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个_security_main是默认授权成功之后的key</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Fire the login event manually</span></span>
<span class="line">        <span class="token variable">$event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InteractiveLoginEvent</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$eventDispatcher</span><span class="token operator">-&gt;</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;user&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">getemail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是有个问题，就是如果配置了 success_handler,如下在security.yaml:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">json_login</span><span class="token punctuation">:</span></span>
<span class="line">     <span class="token key atrule">check_path</span><span class="token punctuation">:</span> /api/login</span>
<span class="line">     <span class="token key atrule">success_handler</span><span class="token punctuation">:</span> App\\Security\\LoginSuccessHandler</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么会在授权成功之后直接走这个success_handler,不会再走api_login方法体.</p><p>JsonLoginConfig参数在:<br> namespace Symfony\\Config\\Security\\FirewallConfig;<br> JsonLoginConfig</p><p>如果使用jwt认证，推荐使用这个包: composer require lexik/jwt-authentication-bundle</p>`,8)]))}const i=s(p,[["render",o],["__file","symfony之json_login登录方式.html.vue"]]),u=JSON.parse('{"path":"/content/php/symfony/symfony%E4%B9%8Bjson_login%E7%99%BB%E5%BD%95%E6%96%B9%E5%BC%8F.html","title":"symfony之json_login登录方式","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony之json_login登录方式","description":"symfony之json_login登录方式"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony之json_login登录方式.md"}');export{i as comp,u as data};
