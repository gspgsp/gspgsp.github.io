import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function o(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ts类型检查的问题:</span>
<span class="line">如下代码, ts type checking 会报:error TS18046: &#39;route.params&#39; is of type &#39;unknown&#39;.</span>
<span class="line">const route = useRoute();</span>
<span class="line">const eventId = computed(() =&gt; {</span>
<span class="line">  return route.params.id;</span>
<span class="line">});</span>
<span class="line">但是改为:</span>
<span class="line">const route = useRoute(&quot;events-id-event-settings-session&quot;);</span>
<span class="line">const eventId = computed(() =&gt; {</span>
<span class="line">  return route.params.id;</span>
<span class="line">});</span>
<span class="line">什么原因呢?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个问题涉及到 Vue Router 的类型推断。让我为您解释一下这两种情况的区别，以及为什么第二种方式不会报错。</p><p>1.第一种情况:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> eventId <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，<code>useRoute()</code> 没有提供任何参数。因此，TypeScript 无法推断出 <code>route.params</code> 的具体结构。它被推断为 <code>unknown</code> 类型，这是一种安全的类型，需要进行类型检查或断言才能使用。</p><p>2.第二种情况:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token string">&quot;events-id-event-settings-session&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> eventId <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，您为 <code>useRoute()</code> 提供了一个路由名称作为参数。这让 Vue Router 能够推断出该路由的参数类型。假设 &quot;events-id-event-settings-session&quot; 路由定义中包含一个 <code>id</code> 参数，TypeScript 就能正确推断 <code>route.params.id</code> 的类型，因此不会报错。</p><p>解决方案:</p><p>1.如果您知道路由名称，使用第二种方式是最好的，因为它提供了最精确的类型推断。</p><p>2.如果您不知道具体的路由名称，或者需要处理多种可能的路由，您可以使用类型断言:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> eventId <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>route<span class="token punctuation">.</span>params <span class="token keyword">as</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)]))}const l=s(p,[["render",o],["__file","ts类型检查的问题.html.vue"]]),u=JSON.parse('{"path":"/content/front/js/ts%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E7%9A%84%E9%97%AE%E9%A2%98.html","title":"ts类型检查的问题","lang":"en-US","frontmatter":{"sidebar":false,"title":"ts类型检查的问题","description":"ts类型检查的问题"},"headers":[],"git":{},"filePathRelative":"content/front/js/ts类型检查的问题.md"}');export{l as comp,u as data};
