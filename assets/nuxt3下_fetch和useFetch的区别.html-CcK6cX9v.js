import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const c={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>nuxt3下$fetch和useFetch的区别:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Nuxt uses ofetch to expose globally the $fetch helper for making HTTP requests within your Vue app or API routes.</span>
<span class="line">During server-side rendering, calling $fetch to fetch your internal API routes will directly call the relevant function (emulating the request), saving an additional API call.</span>
<span class="line">However, using $fetch in components without wrapping it with useAsyncData causes fetching the data twice: initially on the server, then again on the client-side during hydration, because $fetch does not transfer state from the server to the client. Thus, the fetch will be executed on both sides because the client has to get the data again.</span>
<span class="line">We recommend to use useFetch or useAsyncData + $fetch to prevent double data fetching when fetching the component data.</span>
<span class="line"></span>
<span class="line">翻译过来就是:</span>
<span class="line">Nuxt 使用 ofetch 全局公开 $fetch 辅助函数，用于在 Vue 应用程序或 API 路由中进行 HTTP 请求。</span>
<span class="line">在服务器端渲染期间，调用 $fetch 来获取内部 API 路由将直接调用相关函数（模拟请求），从而节省额外的 API 调用。</span>
<span class="line">但是，在组件中使用 $fetch 而不使用 useAsyncData 对其进行封装会导致获取两次数据：最初在服务器上，然后在水合过程中再次在客户端，因为 $fetch 不会将状态从服务器传输到客户端。因此，由于客户端必须再次获取数据，因此获取将在两侧执行。</span>
<span class="line">我们建议在获取组件数据时使用 useFetch 或 useAsyncData + $fetch 来防止重复获取数据。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例:</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// During SSR data is fetched twice, once on the server and once on the client.</span></span>
<span class="line"><span class="token keyword">const</span> dataTwice <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/item&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// During SSR data is fetched only on the server side and transferred to the client.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/item&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// You can also useFetch as shortcut of useAsyncData + $fetch</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/item&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const o=s(c,[["render",i],["__file","nuxt3下_fetch和useFetch的区别.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/nuxt3%E4%B8%8B_fetch%E5%92%8CuseFetch%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"nuxt3下$fetch和useFetch的区别","lang":"en-US","frontmatter":{"sidebar":false,"title":"nuxt3下$fetch和useFetch的区别","description":"nuxt3下$fetch和useFetch的区别"},"headers":[],"git":{},"filePathRelative":"content/front/js/nuxt3下$fetch和useFetch的区别.md"}');export{o as comp,r as data};
