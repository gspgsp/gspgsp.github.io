import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const o={};function p(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>Pina之storeToRefs的使用: <code>storeToRefs</code> 是 Pinia 提供的一个非常有用的函数，它的主要作用就是保持store中的状态的响应性，确保在store中的值更新时，组件会自动重新渲染。</p><p>以下是关于 <code>storeToRefs</code> 的一些重要点：</p><p>1.响应式： <code>storeToRefs</code> 返回的是响应式引用（refs）。这意味着当store中的值改变时，使用这些引用的组件会自动更新。</p><p>2.只针对状态： <code>storeToRefs</code> 只会为 store 中的状态（state）创建引用，不会为 actions 或非响应式属性创建引用。</p><p>3.性能优化： 使用 <code>storeToRefs</code> 可以避免不必要的组件重新渲染。它只会在被使用的属性发生变化时触发更新。</p><p>4.用法示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>script setup<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> storeToRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEventDashboardStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./stores/eventDashboard&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useEventDashboardStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 storeToRefs 解构，保持响应性</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> shouldShowLoader<span class="token punctuation">,</span> heading<span class="token punctuation">,</span> sidebarLinks <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 直接从 store 中获取 action</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> fetchEventDashboardItems <span class="token punctuation">}</span> <span class="token operator">=</span> store</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 不需要显式地返回任何东西，&lt;script setup&gt; 会自动暴露声明的变量和函数给模板</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> </span>
<span class="line">  现在你可以直接在模板中使用这些响应式引用和 action</span>
<span class="line">  例如：</span>
<span class="line">  <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;shouldShowLoader&quot;</span><span class="token operator">&gt;</span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> heading <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;link in sidebarLinks&quot;</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;link.id&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> link<span class="token punctuation">.</span>text <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">&quot;fetchEventDashboardItems&quot;</span><span class="token operator">&gt;</span>Fetch Items<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">--</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.实时更新： 当 store 中的 <code>shouldShowLoader</code>、<code>heading</code> 或 <code>sidebarLinks</code> 发生变化时，使用这些变量的组件会自动更新，无需手动触发。</p><p>6.与普通解构的区别： 如果你直接解构 store 而不使用 <code>storeToRefs</code>，你会失去响应性：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 错误用法，会失去响应性</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> shouldShowLoader<span class="token punctuation">,</span> heading<span class="token punctuation">,</span> sidebarLinks <span class="token punctuation">}</span> <span class="token operator">=</span> store</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，<code>storeToRefs</code> 确实能保持实时更新，这是它的主要用途之一。它使得在组件中使用 Pinia store 的状态变得既方便又高效。</p>`,11)]))}const r=n(o,[["render",p],["__file","Pina之storeToRefs的使用.html.vue"]]),i=JSON.parse('{"path":"/content/front/js/Pina%E4%B9%8BstoreToRefs%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"Pina之storeToRefs的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"Pina之storeToRefs的使用","description":"Pina之storeToRefs的使用"},"headers":[],"git":{},"filePathRelative":"content/front/js/Pina之storeToRefs的使用.md"}');export{r as comp,i as data};
