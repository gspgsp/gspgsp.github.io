import{_ as s,c as e,d as i,o as a}from"./app-CHrRue27.js";const l={};function c(p,n){return a(),e("div",null,n[0]||(n[0]=[i(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> # This file is the entry point to configure your own services.</span>
<span class="line"># Files in the packages/ subdirectory configure your dependencies.</span>
<span class="line"></span>
<span class="line"># Put parameters here that don&#39;t need to change on each machine where the app is deployed</span>
<span class="line"># https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration</span>
<span class="line">parameters:</span>
<span class="line">    idp_scheme: &#39;%env(IDP_SCHEME)%&#39;</span>
<span class="line">    idp_url: &#39;%env(IDP_URL)%&#39;</span>
<span class="line">    academy_scheme: &#39;%env(ACADEMY_SCHEME)%&#39;</span>
<span class="line">    mdpilogin_domain: &#39;%env(MDPI_LOGIN_DOMAIN)%&#39;</span>
<span class="line">    academy_domain: &#39;%env(ACADEMY_DOMAIN)%&#39;</span>
<span class="line">    sso_service: &#39;%env(SSO_SERVICE)%&#39;</span>
<span class="line">    ffmpeg_binary: &#39;%env(FFMPEG_BINARY_PATH)%&#39;</span>
<span class="line">    ffprobe_binary: &#39;%env(FFPROBE_BINARY_PATH)%&#39;</span>
<span class="line"></span>
<span class="line">services:</span>
<span class="line">    # default configuration for services in *this* file</span>
<span class="line">    _defaults:</span>
<span class="line">        autowire: true      # Automatically injects dependencies in your services.</span>
<span class="line">        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.</span>
<span class="line"></span>
<span class="line">    # makes classes in src/ available to be used as services</span>
<span class="line">    # this creates a service per class whose id is the fully-qualified class name</span>
<span class="line">    App\\:</span>
<span class="line">        resource: &#39;../src/&#39;</span>
<span class="line">        exclude:</span>
<span class="line">            - &#39;../src/DependencyInjection/&#39;</span>
<span class="line">            - &#39;../src/Entity/&#39;</span>
<span class="line">            - &#39;../src/Kernel.php&#39;</span>
<span class="line"></span>
<span class="line">    # add more service definitions when explicit configuration is needed</span>
<span class="line">    # please note that last definitions always *replace* previous ones</span>
<span class="line">    GuzzleHttp\\Client:</span>
<span class="line">        ~</span>
<span class="line">    App\\EventListener\\LogoutSuccessListener:</span>
<span class="line">        arguments:</span>
<span class="line">            $idp_scheme: &quot;%idp_scheme%&quot;</span>
<span class="line">            $idp_url: &quot;%idp_url%&quot;</span>
<span class="line">        tags:</span>
<span class="line">            - name: &#39;kernel.event_listener&#39;</span>
<span class="line">              event: &#39;Symfony\\Component\\Security\\Http\\Event\\LogoutEvent&#39;</span>
<span class="line">              dispatcher: security.event_dispatcher.main</span>
<span class="line">              </span>
<span class="line">    App\\Event\\AfterCoursePublishEvent: // 这个这只是一个服务名称，换成 tt 也是可以的 </span>
<span class="line">        class: App\\EventListener\\CoursePublishListener</span>
<span class="line">        tags:</span>
<span class="line">            - {name: &#39;kernel.event_listener&#39;, event: App\\Event\\AfterCoursePublishEvent, method: &#39;onCoursePublish&#39;}</span>
<span class="line"> </span>
<span class="line"> #下面这种写法也是可以的(直接定义listerner是，默认会将 App\\EventListener\\CoursePublishListener 映射为服务名称，这里必须写类名，不能随便起个名字 ,否则会报错)，和上面的执行效果相同</span>
<span class="line">   #    App\\EventListener\\CoursePublishListener:</span>
<span class="line">#        tags:</span>
<span class="line">#            - {name: &#39;kernel.event_listener&#39;, event: App\\Event\\AfterCoursePublishEvent, method: &#39;onCoursePublish&#39;}</span>
<span class="line"> </span>
<span class="line"> 再来看调用，在Repository层，注入Symfony\\Component\\EventDispatcher\\EventDispatcherInterface</span>
<span class="line"> </span>
<span class="line"> $this-&gt;eventDispatcher-&gt;dispatch(new AfterCoursePublishEvent($data)); //特别注意 这个diapatch 的第二个参数是event_name，这个一定不要传，否则dispatch 不生效，就是这个问题花了我好长时间，巨坑...</span>
<span class="line"> </span>
<span class="line"> 还有就是官方文档里关于event_dispatch的介绍，参考：https://symfony.com/doc/current/components/event_dispatcher.html，中有一个ContainerBuilder注册特别坑，根本不知道在哪里使用那几行代码，还有就是</span>
<span class="line"> 文档里提到的：</span>
<span class="line"> Registering service definitions and tagging them with the kernel.event_listener and kernel.event_subscriber tags is not enough to enable the event listeners and event subscribers. You must also register a compiler pass called RegisterListenersPass() in the container builder</span>
<span class="line"> </span>
<span class="line"> 这个翻译过过来，就是说光有tags 标注 没有用还要ContainerBuilder注册，实际上就是在service,yaml里 按照上面的两种写法写是可以生效的。</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> 我是参考这个提问作者的问题 改的：https://stackoverflow.com/questions/34923306/dispatcher-doesnt-dispatch-my-event-symfony</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line"> 关于Subscriber:</span>
<span class="line"> ①如果是非symfony5框架核心event，需要手动在service,yaml里添加tag标签，比如，Entity调用doctrine.event_subscriber的事件：</span>
<span class="line">     App\\EventSubscriber\\VideoSubscriber:</span>
<span class="line">        tags:</span>
<span class="line">            - { name: doctrine.event_subscriber }</span>
<span class="line">            </span>
<span class="line"></span>
<span class="line">VideoSubscriber.php部分代码：</span>
<span class="line">...</span>
<span class="line">...</span>
<span class="line">&lt;?php</span>
<span class="line"></span>
<span class="line">namespace App\\EventSubscriber;</span>
<span class="line"></span>
<span class="line">use App\\Entity\\Video;</span>
<span class="line">use Doctrine\\Common\\EventSubscriber;</span>
<span class="line">use Doctrine\\ORM\\EntityManagerInterface;</span>
<span class="line">use Doctrine\\ORM\\Event\\LifecycleEventArgs;</span>
<span class="line">use Doctrine\\ORM\\Events;</span>
<span class="line"></span>
<span class="line">class VideoSubscriber implements EventSubscriber</span>
<span class="line">{</span>
<span class="line">    private EntityManagerInterface $entityManager;</span>
<span class="line"></span>
<span class="line">    public function __construct(EntityManagerInterface $entityManager)</span>
<span class="line">    {</span>
<span class="line">        $this-&gt;entityManager = $entityManager;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public function preUpdate(LifecycleEventArgs $args)</span>
<span class="line">    {</span>
<span class="line">        $entity = $args-&gt;getObject();</span>
<span class="line">        if ($entity instanceof Video) {// 这个就是来判断当前事件是来自哪个Entity的，如果不加这个加判断，preUpdate就会对所有Entity生效</span>
<span class="line">            $em = $args-&gt;getObjectManager();// 这个和$this-&gt;entityManager效果相同，但是通过$args获取到的$em 就是当初和$entity绑定的那一个entityManager</span>
<span class="line">            $uow = $em-&gt;getUnitOfWork();</span>
<span class="line">            $changeSet = $uow-&gt;getEntityChangeSet($entity);// 获取属性变化，这里 $changeSet[&#39;view&#39;]，包括两个数据，改变前和改变后的值</span>
<span class="line">            if (!isset($changeSet[&#39;view&#39;]) &amp;&amp; !isset($changeSet[&#39;voteNum&#39;]) &amp;&amp; !isset($changeSet[&#39;extraView&#39;])) {</span>
<span class="line">                $entity-&gt;setUpdatedAt(new \\DateTime());</span>
<span class="line">            }</span>
<span class="line">            file_put_contents(&#39;./1.txt&#39;, $entity-&gt;getTitle());</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public function getSubscribedEvents()</span>
<span class="line">    {</span>
<span class="line">        // TODO: Implement getSubscribedEvents() method.</span>
<span class="line">        return [</span>
<span class="line">            Events::preUpdate,</span>
<span class="line">        ];</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line">    </span>
<span class="line"> ...</span>
<span class="line"> ...</span>
<span class="line">    </span>
<span class="line">② 如果是symfony5框架核心event，那么可以不用在service,yaml里添加tag标签，像exception这些</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)]))}const d=s(l,[["render",c],["__file","symfony5之event_dispatcher的使用注意事项.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony5%E4%B9%8Bevent_dispatcher%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html","title":"symfony5之event_dispatcher的使用注意事项","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony5之event_dispatcher的使用注意事项","description":"symfony5之event_dispatcher的使用注意事项"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony5之event_dispatcher的使用注意事项.md"}');export{d as comp,r as data};
