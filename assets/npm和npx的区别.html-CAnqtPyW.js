import{_ as n,c as s,d as i,o as a}from"./app-CHrRue27.js";const d={};function t(l,e){return a(),s("div",null,e[0]||(e[0]=[i(`<p>npm和npx的区别:</p><p><code>npx</code> 和 <code>npm</code> 是 Node.js 生态中的两个工具，它们有不同的用途和工作方式。</p><hr><h5 id="npm-node-package-manager" tabindex="-1"><a class="header-anchor" href="#npm-node-package-manager"><span><strong><code>npm</code>（Node Package Manager）</strong></span></a></h5><ul><li><p><strong>主要用途：</strong></p><ul><li>管理 Node.js 的包（安装、卸载、更新等）。</li><li>用于全局或本地安装依赖包。</li><li>管理项目的 <code>package.json</code> 文件中的依赖项。</li></ul></li><li><p><strong>常用命令：</strong></p><ul><li><code>npm install &lt;package&gt;</code> 或 <code>npm i &lt;package&gt;</code>：安装包（默认安装到 <code>node_modules</code> 中）。</li><li><code>npm install -g &lt;package&gt;</code>：全局安装包。</li><li><code>npm run &lt;script&gt;</code>：运行在 <code>package.json</code> 的 <code>scripts</code> 中定义的命令。</li></ul></li><li><p><strong>特点：</strong></p><ul><li>需要先安装包，才能使用包提供的命令行工具。</li><li>全局安装的工具会添加到系统路径中，供全局使用。</li></ul></li></ul><hr><h5 id="npx" tabindex="-1"><a class="header-anchor" href="#npx"><span><strong><code>npx</code></strong></span></a></h5><ul><li><p><strong>主要用途：</strong></p><ul><li>用于直接运行 Node.js 包，而无需先安装它们。</li><li>常用于执行一次性命令，避免安装不必要的全局依赖。</li><li>可以自动找到项目中的本地依赖并运行对应的命令。</li></ul></li><li><p><strong>常用场景：</strong></p><ul><li>快速运行一次性命令：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx create-react-app my-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>（无需全局安装 <code>create-react-app</code>，直接运行）</li><li>调用项目的本地依赖命令：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx eslint <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>（即使未全局安装 ESLint，<code>npx</code> 会使用本地的 ESLint）</li></ul></li><li><p><strong>特点：</strong></p><ul><li>自动临时下载未安装的工具，并运行它（不污染全局或本地环境）。</li><li>默认从本地的 <code>node_modules/.bin</code> 中寻找命令，优先于全局路径。</li></ul></li></ul><hr><h5 id="主要区别" tabindex="-1"><a class="header-anchor" href="#主要区别"><span><strong>主要区别</strong></span></a></h5><table><thead><tr><th>特性</th><th>npm</th><th>npx</th></tr></thead><tbody><tr><td>作用</td><td>管理包的安装和项目依赖</td><td>直接执行包或命令</td></tr><tr><td>是否安装包</td><td>需要先安装才能使用</td><td>可以无需安装直接运行</td></tr><tr><td>全局安装</td><td>需要全局安装才能全局使用工具</td><td>不需要全局安装，直接临时运行</td></tr><tr><td>优先级</td><td>从全局安装的命令中查找</td><td>优先使用本地安装的命令</td></tr></tbody></table><hr><h5 id="何时用-npx" tabindex="-1"><a class="header-anchor" href="#何时用-npx"><span><strong>何时用 <code>npx</code>？</strong></span></a></h5><ol><li><p><strong>快速运行临时工具：</strong></p><ul><li>如果只需要运行某个命令一次，使用 <code>npx</code> 可以避免安装后再删除的麻烦。</li><li>示例：<code>npx json-server --watch db.json</code></li></ul></li><li><p><strong>避免全局安装：</strong></p><ul><li>如果工具是针对单个项目使用的，而非系统范围的工具，<code>npx</code> 可以直接运行，不需全局安装。</li><li>示例：<code>npx prettier --write .</code></li></ul></li><li><p><strong>确保使用正确版本的工具：</strong></p><ul><li>在项目中运行工具时，<code>npx</code> 会优先使用本地版本，避免与全局版本冲突。</li><li>示例：<code>npx webpack</code></li></ul></li></ol><hr><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h5><ul><li><strong>使用 <code>npm</code>：</strong> 管理依赖包（安装、卸载）和运行项目脚本。全局安装（npm install -g create-react-app）：需要提前安装工具，占用全局环境，并且版本固定。</li><li><strong>使用 <code>npx</code>：</strong> 直接运行命令行工具，避免安装不必要的全局包，或确保运行项目本地依赖的工具。可能临时下载，这些下载的包会存储在一个临时目录中（通常是系统缓存目录，比如 ~/.npm/_npx），并在完成执行后自动删除，所以很适合项目的初始化。</li></ul><hr><h5 id="分析如下命令" tabindex="-1"><a class="header-anchor" href="#分析如下命令"><span><strong>分析如下命令</strong></span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">npx degit dcloudio/uni-preset-vue#vite-ts my-vue3-project</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令使用 npx 和 degit 工具快速创建一个基于 uni-preset-vue 的 Vue 3 项目，并命名为 my-vue3-project。下面是对命令的详细解析： 这条命令使用 <code>npx</code> 和 <code>degit</code> 工具快速创建一个基于 <code>uni-preset-vue</code> 的 Vue 3 项目，并命名为 <code>my-vue3-project</code>。下面是对命令的详细解析：</p><hr><h5 id="命令结构" tabindex="-1"><a class="header-anchor" href="#命令结构"><span>命令结构：</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx degit dcloudio/uni-preset-vue<span class="token comment">#vite-ts my-vue3-project</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析：</span></a></h5><h5 id="_1-npx" tabindex="-1"><a class="header-anchor" href="#_1-npx"><span>1. <strong><code>npx</code></strong></span></a></h5><ul><li><code>npx</code> 直接运行工具（这里是 <code>degit</code>），无需提前安装。</li><li>如果 <code>degit</code> 未安装，<code>npx</code> 会临时下载并运行它，避免全局安装工具。</li></ul><h5 id="_2-degit" tabindex="-1"><a class="header-anchor" href="#_2-degit"><span>2. <strong><code>degit</code></strong></span></a></h5><ul><li><code>degit</code> 是一个用来快速克隆 Git 仓库的工具，但与 <code>git clone</code> 不同： <ul><li>它会移除 <code>.git</code> 文件夹，创建一个干净的项目目录。</li><li>常用于模板项目的初始化，避免克隆完整的 Git 历史。</li></ul></li></ul><h5 id="_3-dcloudio-uni-preset-vue-vite-ts" tabindex="-1"><a class="header-anchor" href="#_3-dcloudio-uni-preset-vue-vite-ts"><span>3. <strong><code>dcloudio/uni-preset-vue#vite-ts</code></strong></span></a></h5><ul><li>表示需要克隆的 Git 仓库地址： <ul><li><code>dcloudio/uni-preset-vue</code>：GitHub 上的仓库路径，属于 <code>dcloudio</code> 组织。</li><li><code>#vite-ts</code>：分支或标签名，指向 <code>vite-ts</code> 分支/标签的代码。 <ul><li>这个分支可能包含基于 <code>Vite</code> 和 <code>TypeScript</code> 的模板代码。</li></ul></li></ul></li></ul><h5 id="_4-my-vue3-project" tabindex="-1"><a class="header-anchor" href="#_4-my-vue3-project"><span>4. <strong><code>my-vue3-project</code></strong></span></a></h5><ul><li>指定克隆后的项目文件夹名称。</li><li>最终，<code>degit</code> 会将仓库代码克隆到名为 <code>my-vue3-project</code> 的新目录中。</li></ul><hr><h5 id="执行效果" tabindex="-1"><a class="header-anchor" href="#执行效果"><span>执行效果：</span></a></h5><ol><li><strong>克隆仓库：</strong><ul><li>从 <code>dcloudio/uni-preset-vue</code> 的 <code>vite-ts</code> 分支下载代码。</li></ul></li><li><strong>移除 <code>.git</code> 文件夹：</strong><ul><li>新的项目不会保留原仓库的 Git 历史信息，适合用作项目模板。</li></ul></li><li><strong>新建目录：</strong><ul><li>将模板代码保存到 <code>my-vue3-project</code> 文件夹中。</li></ul></li></ol><hr><h5 id="可能的后续步骤" tabindex="-1"><a class="header-anchor" href="#可能的后续步骤"><span>可能的后续步骤：</span></a></h5><ol><li>进入项目目录：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">cd</span> my-vue3-project</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>安装依赖：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>启动开发服务器：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> run dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><h5 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结：</span></a></h5><p>这条命令通过 <code>degit</code> 克隆了一个基于 <code>uni-preset-vue</code> 的 Vue 3 模板项目（Vite + TypeScript）。<code>degit</code> 是一种快速、无历史记录的克隆方式，适合从模板仓库初始化项目。通过这种方式，可以方便地开始开发符合特定配置的 Vue 3 项目。</p>`,42)]))}const c=n(d,[["render",t],["__file","npm和npx的区别.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/npm%E5%92%8Cnpx%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"npm和npx的区别","lang":"en-US","frontmatter":{"sidebar":false,"title":"npm和npx的区别","description":"npm和npx的区别"},"headers":[],"git":{},"filePathRelative":"content/front/js/npm和npx的区别.md"}');export{c as comp,r as data};
