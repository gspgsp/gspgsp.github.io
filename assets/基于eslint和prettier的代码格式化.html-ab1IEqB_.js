import{_ as s,c as e,d as i,o as l}from"./app-CHrRue27.js";const a={};function t(u,n){return l(),e("div",null,n[0]||(n[0]=[i(`<p>基于eslint和prettier的代码格式化:</p><ul><li>在线文档以及在线平台 <ul><li>https://prettier.io/docs/en/</li><li>https://prettier.io/playground/</li></ul></li></ul><p>下面是一个.eslintrc.json文件:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;env&quot;: {</span>
<span class="line">    &quot;browser&quot;: true,</span>
<span class="line">    &quot;node&quot;: true</span>
<span class="line">  },</span>
<span class="line">  &quot;root&quot;: true,</span>
<span class="line">  &quot;parser&quot;: &quot;vue-eslint-parser&quot;,</span>
<span class="line">  &quot;extends&quot;: [</span>
<span class="line">    &quot;@nuxtjs/eslint-config-typescript&quot;,</span>
<span class="line">    &quot;plugin:prettier/recommended&quot;</span>
<span class="line">  ],</span>
<span class="line">  &quot;plugins&quot;: [&quot;prettier&quot;],</span>
<span class="line">  &quot;rules&quot;: {</span>
<span class="line">    // ignore for page names</span>
<span class="line">    &quot;vue/multi-word-component-names&quot;: [</span>
<span class="line">      &quot;error&quot;,</span>
<span class="line">      {</span>
<span class="line">        &quot;ignores&quot;: [</span>
<span class="line">          &quot;index&quot;,</span>
<span class="line">          &quot;[slug]&quot;,</span>
<span class="line">          &quot;[...slug]&quot;,</span>
<span class="line">          &quot;[id]&quot;,</span>
<span class="line">          &quot;default&quot;,</span>
<span class="line">          &quot;boilerplate&quot;,</span>
<span class="line">          &quot;custom&quot;,</span>
<span class="line">          &quot;error&quot;</span>
<span class="line">        ]</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;vue/block-lang&quot;: [</span>
<span class="line">      &quot;error&quot;,</span>
<span class="line">      {</span>
<span class="line">        &quot;script&quot;: {</span>
<span class="line">          &quot;lang&quot;: &quot;ts&quot;</span>
<span class="line">        }</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;vue/block-order&quot;: [</span>
<span class="line">      &quot;error&quot;, {</span>
<span class="line">      &quot;order&quot;: [&quot;template&quot;, &quot;script&quot;, &quot;style&quot;]</span>
<span class="line">    }]</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是实际可以简化一点,删除这个 &quot;plugins&quot;: [&quot;prettier&quot;]:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;env&quot;: {</span>
<span class="line">    &quot;browser&quot;: true,</span>
<span class="line">    &quot;node&quot;: true</span>
<span class="line">  },</span>
<span class="line">  &quot;root&quot;: true,</span>
<span class="line">  &quot;parser&quot;: &quot;vue-eslint-parser&quot;, //这个地方用了  vue-eslint-parser 解析器,该解析器允许我们对 .vue 文件的 &lt;template&gt; 进行检查。如果我们在模板中使用复杂的指令和表达式，就很容易在 &lt;template&gt; 上犯错。这个解析器和 eslint-plugin-vue 的规则可以发现其中的一些错误。</span>
<span class="line">  &quot;extends&quot;: [</span>
<span class="line">    &quot;@nuxt/eslint-config&quot;, //这个才是NUXT3的版本</span>
<span class="line">    &quot;plugin:prettier/recommended&quot;</span>
<span class="line">  ],</span>
<span class="line">  &quot;rules&quot;: {</span>
<span class="line">    // ignore for page names，下面这些，都是 eslint-plugin-vue 的规则的使用，具体可以参考:https://eslint.vuejs.org/rules/block-order.html,这里面定义了很多规则，本来要使用下面的 eslint-plugin-vue,需要先在plugins下引入vue的，即 plugins: [&quot;vue&quot;], 但是由于在配置中使用了 parser: &quot;vue-eslint-parser&quot;，ESLint 会自动查找并使用与所选 parser 相关的插件规则，包括 eslint-plugin-vue。因此，虽然你没有在 plugins 中引入 eslint-plugin-vue，但由于使用了 parser: &quot;vue-eslint-parser&quot;，相关的 Vue.js 规则仍然会生效。这是一种在 Vue.js 项目中使用 ESLint 的常见方式。</span>
<span class="line">    &quot;vue/multi-word-component-names&quot;: [</span>
<span class="line">      &quot;error&quot;,</span>
<span class="line">      {</span>
<span class="line">        &quot;ignores&quot;: [</span>
<span class="line">          &quot;index&quot;,</span>
<span class="line">          &quot;[slug]&quot;,</span>
<span class="line">          &quot;[...slug]&quot;,</span>
<span class="line">          &quot;[id]&quot;,</span>
<span class="line">          &quot;default&quot;,</span>
<span class="line">          &quot;boilerplate&quot;,</span>
<span class="line">          &quot;custom&quot;,</span>
<span class="line">          &quot;error&quot;</span>
<span class="line">        ]</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;vue/block-lang&quot;: [//限制vue页面使用的script，必须定义lang=&quot;ts&quot;</span>
<span class="line">      &quot;error&quot;,</span>
<span class="line">      {</span>
<span class="line">        &quot;script&quot;: {</span>
<span class="line">          &quot;lang&quot;: &quot;ts&quot;</span>
<span class="line">        }</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;vue/block-order&quot;: [//限制vue页面 [&quot;template&quot;, &quot;script&quot;, &quot;style&quot;] 三者的顺序</span>
<span class="line">      &quot;error&quot;, {</span>
<span class="line">      &quot;order&quot;: [&quot;template&quot;, &quot;script&quot;, &quot;style&quot;]</span>
<span class="line">    }]</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://juejin.cn/post/6924568874700505102</span>
<span class="line">https://zhuanlan.zhihu.com/p/68026905</span>
<span class="line">https://github.com/prettier/eslint-plugin-prettier // 这个markdown文档里面有介绍  plugin:prettier/recommended 可以同时设置 eslint-plugin-prettier 和 eslint-config-prettier</span>
<span class="line">https://github.com/nuxt/eslint-config // 在nuxt下使用的话，需要看这个，不同版本的nuxt，安装的不一样，之前的模板项目里面的配置，就有问题，我修改了</span>
<span class="line">https://typescript-eslint.io/getting-started // 这个链接下，是关于 @typescript-eslint/parser 和 @typescript-eslint/eslint-plugin 这两个包的使用，之前模板项目里面配置了，但是我发现没有用到，我就去掉了</span>
<span class="line">https://github.com/nuxt/eslint-plugin-nuxt //这个目前也没用，我也去掉了，但是markdown下有一个配置的两种用法间接的解释了extends和plugins写关系</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">①其实大部分最后都会将 prettier 作为主要的格式化样式，但是 prettier 和 其它eslint插件不同的是，它必须包括 eslint-plugin-prettier 和 eslint-config-prettier 两个文件，而 其它的只需要一个就可以了</span>
<span class="line">②extends 、plugins 和 rules 三者之间的关系</span>
<span class="line">在我实际使用看来， </span>
<span class="line">extends = plugins + rules</span>
<span class="line"></span>
<span class="line">plugins:</span>
<span class="line">eslint本身有些规则，但肯定无法包含所有语法，因此eslint支持自定义规则，而针对特殊语法自定义的那些规则我们称之为eslint插件，常见的有： eslint-plugin-import、eslint-plugin-promise、eslint-plugin-react。这些插件都是</span>
<span class="line">单独的package，安装这些插件后，若要是项目支持这些规则，必须将其配置在eslint字段中，比如针对如上三个示例插件的配置：plugins: [&quot;import&quot;, &#39;promise&#39;, &#39;react&#39;]。</span>
<span class="line"></span>
<span class="line">extends:</span>
<span class="line">plugins的配置仅仅代表在项目中引入了哪些规则，并没有指明该规则是警告、报错、忽略，extends要做的就是引入eslint推荐的规则设置。按照eslint插件的开发规范，每个插件的入口文件都会导出一个对象，其中就有一个configs字段，该字段</span>
<span class="line">是个对象，他可以把该插件已有的规则分成不同的风格，比如：x eslint插件共定义了a、b、c三个规则，这三个规则我可以配置多种风格，比如：</span>
<span class="line">module.exports = {</span>
<span class="line">    configs: {</span>
<span class="line">        recommended: {</span>
<span class="line">            plugins: [&quot;x&quot;],</span>
<span class="line">            env: [&quot;browser&quot;],</span>
<span class="line">            rules: {</span>
<span class="line">                a: 1,</span>
<span class="line">                b: 0,</span>
<span class="line">                a: 2,</span>
<span class="line">            }</span>
<span class="line">        },</span>
<span class="line">        node: {</span>
<span class="line">            plugins: [&quot;x&quot;],</span>
<span class="line">            env: [&quot;node&quot;],</span>
<span class="line">            rules: {</span>
<span class="line">                a: 0,</span>
<span class="line">                b: 2,</span>
<span class="line">                a: 1,</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">假设我们要选择recommended风格，在extends字段中填写 [&quot;plugin:x/recommended&quot;]。至此，项目便可以基于X语法的recommended风格做代码检测.</span>
<span class="line"></span>
<span class="line">rules:</span>
<span class="line">当eslint插件没有指定风格时，我们可以基于rules完全自定义一套风格，当某个风格的单个规则不满足需求，在rules中重新设置便可覆盖.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)]))}const d=s(a,[["render",t],["__file","基于eslint和prettier的代码格式化.html.vue"]]),r=JSON.parse('{"path":"/content/tool/front/%E5%9F%BA%E4%BA%8Eeslint%E5%92%8Cprettier%E7%9A%84%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96.html","title":"基于eslint和prettier的代码格式化","lang":"en-US","frontmatter":{"sidebar":false,"title":"基于eslint和prettier的代码格式化","description":"基于eslint和prettier的代码格式化"},"headers":[],"git":{},"filePathRelative":"content/tool/front/基于eslint和prettier的代码格式化.md"}');export{d as comp,r as data};
