import{_ as i,c as n,d as s,o as t}from"./app-CHrRue27.js";const o={};function c(a,e){return t(),n("div",null,e[0]||(e[0]=[s(`<p>nuxt3之使用路由分组:</p><p>有如下页面：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">pages/registration/(sections)/section1/index</span>
<span class="line">pages/registration/(sections)/section2/index</span>
<span class="line">pages/registration/(sections)/section3/index</span>
<span class="line">pages/registration/(sections)/section2/index</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析: 在 Nuxt 3 中，使用方括号 <code>[]</code> 表示动态路由，而使用圆括号 <code>()</code> 表示路由分组。你提到的结构中的 <code>(sections)</code> 是一个路由分组，它可以用来将相关的路由进行组织，但并不会直接影响路由的动态性。</p><h3 id="具体说明" tabindex="-1"><a class="header-anchor" href="#具体说明"><span>具体说明：</span></a></h3><ol><li><p><strong>动态路由</strong>：</p><ul><li>使用方括号 <code>[]</code> 可以定义动态路由。例如，<code>pages/registration/[id].vue</code> 可以根据 URL 中的 <code>id</code> 值动态加载对应的页面。</li></ul></li><li><p><strong>路由分组</strong>：</p><ul><li>使用圆括号 <code>()</code> 将多个路由分组在一起。这样做的主要好处是可以减少生成的路由路径的复杂性，便于管理和阅读。</li><li>在你的例子中，<code>(sections)</code> 表示这是一个路由分组，里面包含了多个具体的路由：<code>section1</code>, <code>section2</code>, 和 <code>section3</code>。</li></ul></li></ol><h3 id="实际路径示例" tabindex="-1"><a class="header-anchor" href="#实际路径示例"><span>实际路径示例：</span></a></h3><ul><li><code>pages/registration/(sections)/section1/index.vue</code> 会生成路径 <code>/registration/section1</code>。</li><li><code>pages/registration/(sections)/section2/index.vue</code> 会生成路径 <code>/registration/section2</code>。</li><li><code>pages/registration/(sections)/section3/index.vue</code> 会生成路径 <code>/registration/section3</code>。</li></ul><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意：</span></a></h3><ul><li>由于 <code>sections</code> 是一个分组，访问这些页面时不会在 URL 中显示 <code>sections</code>。所以，访问的 URL 只会是 <code>/registration/section1</code>、<code>/registration/section2</code> 和 <code>/registration/section3</code>。</li></ul><p>这种结构便于维护，特别是当有多个相关的页面时，你可以通过分组使项目结构更清晰。</p><p>注意:<br> 这个分组特性是nuxt3 v3.13.0 之后才有的功能. 目前已经发布。对于 nuxt3可以通过如下配置，测试待发布的版本： https://nuxt.com/docs/guide/going-further/nightly-release-channel 和动态路由最大的区别是，动态路由会出现在路由里</p>`,12)]))}const l=i(o,[["render",c],["__file","nuxt3之使用路由分组.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/nuxt3%E4%B9%8B%E4%BD%BF%E7%94%A8%E8%B7%AF%E7%94%B1%E5%88%86%E7%BB%84.html","title":"nuxt3之使用路由分组","lang":"en-US","frontmatter":{"sidebar":false,"title":"nuxt3之使用路由分组","description":"nuxt3之使用路由分组"},"headers":[{"level":3,"title":"具体说明：","slug":"具体说明","link":"#具体说明","children":[]},{"level":3,"title":"实际路径示例：","slug":"实际路径示例","link":"#实际路径示例","children":[]},{"level":3,"title":"注意：","slug":"注意","link":"#注意","children":[]}],"git":{},"filePathRelative":"content/front/js/nuxt3之使用路由分组.md"}');export{l as comp,r as data};
