import{_ as n,c as a,d as p,o as t}from"./app-CHrRue27.js";const e={};function o(c,s){return t(),a("div",null,s[0]||(s[0]=[p(`<p>使用原因见(nuxt3在测试环境遇到useFetch数据获取不到的问题)，我认为在middleware中更有使用场景，由于$fetch 会在客户端和服务端各执行一次，为了避免这个问题，我一般会在middleware 中做个 process.server/process.client 判断，然后选择执行位置</p><p>下面这个是 middlleware/courseAuth.ts的内容:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// @ts-ignore</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineNuxtRouteMiddleware<span class="token punctuation">,</span> navigateTo<span class="token punctuation">,</span> useRuntimeConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;#app&quot;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>createError<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;h3&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtRouteMiddleware</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// @ts-ignore</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>client<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/course/&#39;</span> <span class="token operator">+</span> to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;X-Requested-With&#39;</span><span class="token operator">:</span> <span class="token string">&#39;XMLHttpRequest&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">redirectCode</span><span class="token operator">:</span> <span class="token number">403</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>data<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">statusMessage</span><span class="token operator">:</span> <span class="token string">&#39;Page Not Found&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token function">createError</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">statusCode</span><span class="token operator">:</span> <span class="token number">404</span><span class="token punctuation">,</span> <span class="token literal-property property">statusMessage</span><span class="token operator">:</span> <span class="token string">&#39;Page Not Found&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)]))}const i=n(e,[["render",o],["__file","nuxt3下_fetch的使用场景.html.vue"]]),u=JSON.parse('{"path":"/content/front/js/nuxt3%E4%B8%8B_fetch%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"nuxt3下$fetch的使用场景","lang":"en-US","frontmatter":{"sidebar":false,"title":"nuxt3下$fetch的使用场景","description":"nuxt3下$fetch的使用场景"},"headers":[],"git":{},"filePathRelative":"content/front/js/nuxt3下$fetch的使用场景.md"}');export{i as comp,u as data};
