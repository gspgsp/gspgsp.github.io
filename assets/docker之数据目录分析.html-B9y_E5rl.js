import{_ as n,c as t,d,o as a}from"./app-CHrRue27.js";const r={};function s(o,e){return a(),t("div",null,e[0]||(e[0]=[d(`<h3 id="docker之数据目录分析" tabindex="-1"><a class="header-anchor" href="#docker之数据目录分析"><span>docker之数据目录分析</span></a></h3><p><code>/var/lib/docker/</code> 在 Linux 下是 <strong>Docker 的默认数据根目录（Docker Root Dir）</strong>，也就是 Docker 用来存储所有容器、镜像、卷、网络等数据的地方。</p><hr><h4 id="_1-目录结构概览" tabindex="-1"><a class="header-anchor" href="#_1-目录结构概览"><span>1. 目录结构概览</span></a></h4><p>假设默认安装在 Linux 上 <code>/var/lib/docker</code>，典型目录：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/var/lib/docker/</span>
<span class="line">├── aufs             # 如果使用 AUFS 存储驱动，会有容器镜像层</span>
<span class="line">├── overlay2         # overlay2 存储驱动的容器镜像层</span>
<span class="line">├── containers       # 存放所有容器的具体数据（日志、挂载卷等）</span>
<span class="line">├── volumes          # 存放命名卷的数据</span>
<span class="line">├── image            # 存放镜像元数据</span>
<span class="line">├── network          # 存放 Docker 网络相关数据</span>
<span class="line">├── swarm            # 如果启用 swarm 模式</span>
<span class="line">├── plugins          # Docker 插件数据</span>
<span class="line">├── tmp              # 临时文件</span>
<span class="line">└── builder          # 构建缓存</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-关键说明" tabindex="-1"><a class="header-anchor" href="#_2-关键说明"><span>2. 关键说明</span></a></h4><table><thead><tr><th>子目录</th><th>作用</th></tr></thead><tbody><tr><td><code>containers/</code></td><td>每个容器的元数据和日志</td></tr><tr><td><code>volumes/</code></td><td>命名卷的数据，卷名目录下 <code>_data</code> 就是卷里内容</td></tr><tr><td><code>image/</code></td><td>存放镜像元数据和层</td></tr><tr><td><code>overlay2/</code></td><td>容器文件系统层（overlayFS 驱动）</td></tr><tr><td><code>network/</code></td><td>网络配置和状态</td></tr><tr><td><code>plugins/</code></td><td>插件数据</td></tr></tbody></table><h4 id="_3-特性" tabindex="-1"><a class="header-anchor" href="#_3-特性"><span>3. 特性</span></a></h4><ul><li><strong>由 Docker 管理</strong>：不要随意直接修改里面的内容，尤其是卷、镜像和容器数据。</li><li><strong>可以通过 Docker 命令访问</strong>：例如 <code>docker volume inspect</code>、<code>docker container ls</code> 等，不必直接操作 <code>/var/lib/docker/</code>。</li><li><strong>可以更改默认路径</strong>：在 <code>dockerd</code> 配置中设置 <code>--data-root=/my/docker-data</code>。</li></ul><hr><p>✅ <strong>总结</strong>：</p><p><code>/var/lib/docker/</code> 就是 Docker 在 Linux 上的 <strong>数据根目录</strong>，所有容器、卷、镜像、网络和日志都存放在这里。</p>`,13)]))}const i=n(r,[["render",s],["__file","docker之数据目录分析.html.vue"]]),l=JSON.parse('{"path":"/content/service/docker/docker%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E5%88%86%E6%9E%90.html","title":"docker之数据目录分析","lang":"en-US","frontmatter":{"sidebar":false,"title":"docker之数据目录分析","head":[["meta",{"name":"title","content":"docker之数据目录分析"}],["meta",{"name":"description","content":"docker之数据目录分析"}],["meta",{"name":"keywords","content":"Docker"}],["meta",{"property":"og:title","content":"docker之数据目录分析"}],["meta",{"property":"og:description","content":"docker之数据目录分析"}]]},"headers":[{"level":3,"title":"docker之数据目录分析","slug":"docker之数据目录分析","link":"#docker之数据目录分析","children":[]}],"git":{},"filePathRelative":"content/service/docker/docker之数据目录分析.md"}');export{i as comp,l as data};
