import{_ as n,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function o(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p>ts中的record分析:</p><p><code>Record</code> 是 TypeScript 中的一个高级类型，它用于构建一个具有特定键和值类型的对象类型。<code>Record</code> 类型使得你可以方便地为对象定义一个键的类型范围和相应的值类型。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line">Record<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong><code>K</code></strong>: 键的类型，通常是字符串或数字类型，可以是任何可以作为对象键的类型。</li><li><strong><code>T</code></strong>: 值的类型，可以是任何有效的类型。</li></ul><h3 id="说明" tabindex="-1"><a class="header-anchor" href="#说明"><span>说明</span></a></h3><p><code>Record&lt;K, T&gt;</code> 表示一个对象，它的键类型是 <code>K</code>，值类型是 <code>T</code>。你可以将 <code>Record</code> 看作是一个用于指定对象结构的模板类型。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>####1.基本使用</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Timezones</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> timezonesMap<span class="token operator">:</span> Timezones <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们定义了一个 <code>Record&lt;number, string&gt;</code> 类型的对象 <code>timezonesMap</code>，其键是数字类型，值是字符串类型。</p><p>####2. 传入字符串类型作为键</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UserRoles</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> userRoles<span class="token operator">:</span> UserRoles <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  admin<span class="token operator">:</span> <span class="token string">&quot;Administrator&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  user<span class="token operator">:</span> <span class="token string">&quot;Regular User&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  guest<span class="token operator">:</span> <span class="token string">&quot;Guest User&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>Record&lt;string, string&gt;</code> 定义了一个键为 <code>string</code> 类型、值为 <code>string</code> 类型的对象，<code>userRoles</code> 对象包含了不同角色的名称。</p><p>####3.使用联合类型作为键</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Config</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token string">&#39;host&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;port&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;protocol&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> config<span class="token operator">:</span> Config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  host<span class="token operator">:</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  port<span class="token operator">:</span> <span class="token string">&quot;8080&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  protocol<span class="token operator">:</span> <span class="token string">&quot;http&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里使用了 <code>Record</code> 和联合类型作为键（<code>&#39;host&#39; | &#39;port&#39; | &#39;protocol&#39;</code>），定义了一个对象，强制它包含三个指定的键和相应的字符串值。</p><p>####4.用于枚举值</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">enum</span> Status <span class="token punctuation">{</span></span>
<span class="line">  Active <span class="token operator">=</span> <span class="token string">&quot;active&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Inactive <span class="token operator">=</span> <span class="token string">&quot;inactive&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  Suspended <span class="token operator">=</span> <span class="token string">&quot;suspended&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StatusMessages</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>Status<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> statusMessages<span class="token operator">:</span> StatusMessages <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>Status<span class="token punctuation">.</span>Active<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;Active&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>Status<span class="token punctuation">.</span>Inactive<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;Inactive&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span>Status<span class="token punctuation">.</span>Suspended<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&quot;Suspended&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们用 <code>Record</code> 来创建一个对象，其中键是 <code>Status</code> 枚举类型，值是 <code>string</code> 类型。</p><hr><h3 id="关键特点" tabindex="-1"><a class="header-anchor" href="#关键特点"><span>关键特点</span></a></h3><ol><li><p><strong>灵活的键和值类型：</strong> <code>Record</code> 类型允许你使用任何类型作为键和任何类型作为值。常见的情况是使用 <code>string</code> 或 <code>number</code> 作为键类型。</p></li><li><p><strong>类型推断：</strong> TypeScript 会根据你传入的类型推断出具体的类型。例如，<code>Record&lt;&quot;a&quot; | &quot;b&quot;, number&gt;</code> 会推断出 <code>{ a: number, b: number }</code>。</p></li><li><p><strong>简化代码：</strong> <code>Record</code> 提供了一种简洁的方式来创建具有特定键类型和值类型的对象，避免了冗长的手动类型声明。</p></li></ol><hr><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ol><li><p><strong>键类型的限制：</strong> <code>Record&lt;K, T&gt;</code> 中的 <code>K</code> 必须是一个可以作为对象键的类型。通常，<code>K</code> 会是 <code>string</code>、<code>number</code> 或它们的联合类型。如果你使用其他类型作为键（如 <code>boolean</code> 或 <code>symbol</code>），可能会遇到类型错误。</p></li><li><p><strong>值类型的灵活性：</strong> <code>T</code> 的类型可以是任何有效的类型，包括基础类型、联合类型、甚至是复杂的自定义类型。</p></li></ol><hr><h3 id="进阶示例" tabindex="-1"><a class="header-anchor" href="#进阶示例"><span>进阶示例</span></a></h3><h4 id="_1-使用-record-和对象的嵌套" tabindex="-1"><a class="header-anchor" href="#_1-使用-record-和对象的嵌套"><span>1. 使用 <code>Record</code> 和对象的嵌套</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">NestedObject</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> nestedObject<span class="token operator">:</span> NestedObject <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  category1<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    item1<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    item2<span class="token operator">:</span> <span class="token number">20</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  category2<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    itemA<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    itemB<span class="token operator">:</span> <span class="token number">40</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们创建了一个 <code>Record&lt;string, Record&lt;string, number&gt;&gt;</code> 类型的对象，这意味着对象的值是另一个对象，且该对象的值是 <code>number</code> 类型。</p><h4 id="_2-使用-record-与类型推断" tabindex="-1"><a class="header-anchor" href="#_2-使用-record-与类型推断"><span>2. 使用 <code>Record</code> 与类型推断</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TimezonesMap</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token keyword">typeof</span> timezonesMap<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> timezoneMessages<span class="token operator">:</span> TimezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们通过 <code>as const</code> 将 <code>timezonesMap</code> 定义为常量对象，并利用 <code>keyof typeof timezonesMap</code> 来推断 <code>Record</code> 的键类型。</p><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>Record</code> 类型在 TypeScript 中非常强大，它使得你能够快速创建具有指定键和值类型的对象。通过灵活的键类型和值类型定义，它能够简化代码，确保类型安全，并避免手动编写重复的对象类型。</p>`,37)]))}const i=n(t,[["render",o],["__file","ts中的record分析.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/ts%E4%B8%AD%E7%9A%84record%E5%88%86%E6%9E%90.html","title":"ts中的record分析","lang":"en-US","frontmatter":{"sidebar":false,"title":"ts中的record分析","description":"ts中的record分析"},"headers":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"说明","slug":"说明","link":"#说明","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"关键特点","slug":"关键特点","link":"#关键特点","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"进阶示例","slug":"进阶示例","link":"#进阶示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"content/front/js/ts中的record分析.md"}');export{i as comp,r as data};
