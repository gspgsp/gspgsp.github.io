import{_ as n,c as e,d as i,o as a}from"./app-CHrRue27.js";const l={};function t(d,s){return a(),e("div",null,s[0]||(s[0]=[i(`<p>记录一个关于lint-staged 配合 prettier使用的例子:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1&gt;在package.json下添加如下依赖</span>
<span class="line">&quot;lint-staged&quot;: &quot;^13.3.0&quot;,</span>
<span class="line">&quot;prettier&quot;: &quot;^3.2.5&quot;,</span>
<span class="line"></span>
<span class="line">然后安装依赖 npm install</span>
<span class="line">  </span>
<span class="line">2&gt;在 .husky下的 pre-commit文件下加如下内容(无需在package.json的 scripts 下添加 &quot;lint-staged&quot;: &quot;lint-staged&quot;)</span>
<span class="line">#!/usr/bin/env sh</span>
<span class="line">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span>
<span class="line"></span>
<span class="line">npx lint-staged</span>
<span class="line">  </span>
<span class="line">3&gt;配置 .lintstagedrc.js 文件 // 这个配置文件使用的是标准的 JavaScript 模块语法 (module.exports)。</span>
<span class="line">module.exports = {</span>
<span class="line">  &quot;*.{js,ts,vue}&quot;: [&quot;prettier --write&quot;, &quot;eslint --cache --fix&quot;],</span>
<span class="line">  &quot;*.{scss, md}&quot;: [&quot;prettier --write&quot;],</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">或者 .lintstagedrc.mjs // 这是一个 ECMAScript 模块 (ES 模块)</span>
<span class="line">export default {</span>
<span class="line">  &quot;*.{js,ts,vue}&quot;: [&quot;prettier --write&quot;, &quot;eslint --cache --fix&quot;],</span>
<span class="line">  &quot;*.{scss,md}&quot;: [&quot;prettier --write&quot;],</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">.mjs 后缀名表示这是一个 ECMAScript 模块 (ES 模块)。ES 模块是 JavaScript 模块系统的官方标准化版本,它具有以下特点:</span>
<span class="line"></span>
<span class="line">导入/导出语法不同: ES 模块使用 import 和 export 语法,而不是 require() 和 module.exports。</span>
<span class="line">文件扩展名: 具有 .mjs 扩展名的文件被认为是 ES 模块。这有助于与旧版本的 Node.js 区分开来。</span>
<span class="line">严格模式: ES 模块自动运行在严格模式下。</span>
<span class="line">顶层 this 为 undefined: 在 ES 模块的顶层作用域中, this 的值为 undefined。</span>
<span class="line">无节点环境污染: ES 模块通过各自的命名空间来组织其内部元素。</span>
<span class="line"></span>
<span class="line">如果您使用的是较新版本的 Node.js (&gt;12 版本),并且想要尝试使用 ES 模块语法,可以为配置文件指定 .mjs 扩展名。然后您可以使用 import/export 语法来定义配置,而不是 module.exports。</span>
<span class="line">  </span>
<span class="line">  </span>
<span class="line">4&gt;修改代码</span>
<span class="line">只是修改一些格式的话，提交会报下面的错误</span>
<span class="line">报:lint-staged prevented an empty git commit 问题</span>
<span class="line">原因是:</span>
<span class="line">lint-stage error out saying it was an empty git commit - a commit with no changes. No changes because all the changes I made were formatting changes, which were wrong according to prettier and it fixed it back and on doing so, there was no changes left to even be committed to git.</span>
<span class="line">翻译过来就是:</span>
<span class="line">lint-stage 出错，说这是一个空的 git 提交--一个没有改动的提交。没有改动是因为我做的所有改动都是格式上的改动，而根据 prettier，这些改动都是错误的，它把这些改动都改回来了，这样一来，就没有任何改动可以提交到 git 了。</span>
<span class="line"></span>
<span class="line">所以验验证 lint-staged 是否生效，不要只修改代码格式，比如故意敲空格什么的，要真正的修改代码内容，同时如果在修改了代码内容的时候，改了代码格式的话，lint-staged 就会生效，自动格式化代码，并且不会报错</span>
<span class="line">  </span>
<span class="line">  </span>
<span class="line">参考:</span>
<span class="line">https://stackoverflow.com/questions/71420124/how-do-i-solve-this-empty-git-commit-warning</span>
<span class="line">https://karuppiah7890.github.io/blog/posts/lint-staged-lint-your-staged-files/</span>
<span class="line">https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---no-verify</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const p=n(l,[["render",t],["__file","记录一个关于lint-staged和prettier使用的例子.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%85%B3%E4%BA%8Elint-staged%E5%92%8Cprettier%E4%BD%BF%E7%94%A8%E7%9A%84%E4%BE%8B%E5%AD%90.html","title":"记录一个关于lint-staged 配合 prettier使用的例子","lang":"en-US","frontmatter":{"sidebar":false,"title":"记录一个关于lint-staged 配合 prettier使用的例子","description":"记录一个关于lint-staged 配合 prettier使用的例子"},"headers":[],"git":{},"filePathRelative":"content/front/js/记录一个关于lint-staged和prettier使用的例子.md"}');export{p as comp,r as data};
