import{_ as n,c as e,d as a,o as i}from"./app-CHrRue27.js";const l={};function d(c,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h4 id="gitlab之server端hook配置-主要有两种方式" tabindex="-1"><a class="header-anchor" href="#gitlab之server端hook配置-主要有两种方式"><span>gitlab之server端hook配置，主要有两种方式</span></a></h4><ul><li>server端，全局配置</li><li>server端，为指定仓库配置</li></ul><h5 id="本次我通过为指定仓库配置" tabindex="-1"><a class="header-anchor" href="#本次我通过为指定仓库配置"><span>本次我通过为指定仓库配置</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.进入docker容器</span>
<span class="line">docker exec -it gitlab bash</span>
<span class="line"></span>
<span class="line">2.找到目标仓库</span>
<span class="line">由于 GitLab 启用了 hashed storage，仓库不再是 group/project.git 结构，而是 @hashed/&lt;hash&gt;.git。可以用以下命令查找某个仓库的 hash 路径</span>
<span class="line">ls -l /var/opt/gitlab/git-data/repositories/@hashed/</span>
<span class="line"></span>
<span class="line">我的实际操作, 进入到指定目录:</span>
<span class="line">root@gitlab:/var/opt/gitlab/git-data/repositories/@hashed/d4/73# ls</span>
<span class="line">d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.git  d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.wiki.git</span>
<span class="line"></span>
<span class="line">3.创建 custom_hooks 目录</span>
<span class="line">cd d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.git</span>
<span class="line">mkdir -p custom_hooks</span>
<span class="line"></span>
<span class="line">然后:</span>
<span class="line">cd custom_hooks</span>
<span class="line"></span>
<span class="line">4.创建 Hook 脚本</span>
<span class="line">1&gt;创建 pre-receive hook</span>
<span class="line">vim pre-receive</span>
<span class="line">写入如下内容:</span>
<span class="line">#!/bin/bash</span>
<span class="line">while read oldrev newrev refname; do</span>
<span class="line">  if [[ &quot;$refname&quot; == &quot;refs/heads/main&quot; ]]; then</span>
<span class="line">    echo &quot;$(date &#39;+%Y-%m-%d %H:%M:%S&#39;) - Push to main branch detected: $newrev&quot; &gt;&gt; /var/log/gitlab/custom_hooks.log</span>
<span class="line">  fi</span>
<span class="line">done</span>
<span class="line"></span>
<span class="line">内容分析:</span>
<span class="line">Git 会通过 标准输入 (stdin) 传递每个推送的分支信息，格式如下：</span>
<span class="line">&lt;旧提交哈希&gt; &lt;新提交哈希&gt; &lt;引用名称&gt;</span>
<span class="line"></span>
<span class="line">例如:</span>
<span class="line">1234567 abcdef0 refs/heads/main</span>
<span class="line"></span>
<span class="line">然后给这个custom_hooks目录权限，如下，修改为git用户以及用户组(GitLab 作为一个托管 Git 仓库的服务，所有与 Git 操作相关的进程（如 git push 触发的服务器端钩子）都是 以 git 用户身份 运行的，而不是 root 或其他用户)，同时给读写权限:</span>
<span class="line">chown -R git:git /var/opt/gitlab/git-data/repositories/@hashed/d4/73/d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.git/custom_hooks</span>
<span class="line">chmod -R 775 /var/opt/gitlab/git-data/repositories/@hashed/d4/73/d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.git/custom_hooks</span>
<span class="line"></span>
<span class="line">2&gt;本地推代码到仓库，编辑器日志可能会报:</span>
<span class="line">remote: /var/opt/gitlab/git-data/repositories/@hashed/d4/73/d4735e3a265e16eee03f59718b9b5d03019c07d8b6c51f90da3a666eec13ab35.git/custom_hooks/pre-receive: line 4: /var/log/gitlab/custom_hooks.log: Permission denied        </span>
<span class="line">error: failed to push some refs to &#39;ssh://gitlab.example.com:9022/front/laravel-15.git&#39;</span>
<span class="line">To ssh://gitlab.example.com:9022/front/laravel-15.git</span>
<span class="line">!	refs/heads/main:refs/heads/main	[remote rejected] (pre-receive hook declined)</span>
<span class="line">Done</span>
<span class="line"></span>
<span class="line">分析:</span>
<span class="line">pre-receive Hook 试图向 /var/log/gitlab/custom_hooks.log 写入日志，但权限不足，导致 GitLab 阻止了推送。</span>
<span class="line"></span>
<span class="line">解决方案:</span>
<span class="line">确保 custom_hooks.log 文件存在</span>
<span class="line">ls -l /var/log/gitlab/custom_hooks.log</span>
<span class="line">如果不存在，执行:</span>
<span class="line">touch /var/log/gitlab/custom_hooks.log</span>
<span class="line"></span>
<span class="line">赋予权限:</span>
<span class="line">chown git:git /var/log/gitlab/custom_hooks.log</span>
<span class="line">chmod 664 /var/log/gitlab/custom_hooks.log</span>
<span class="line"></span>
<span class="line">3&gt;本地再次推代码到仓库，然后打开日志可以发现如下内容</span>
<span class="line">2025-03-03 15:32:48 - Push to main branch detected: 60928f4edb1fb6dc7476b5de396543e81ca92f40</span>
<span class="line"></span>
<span class="line">说明，hook被触发</span>
<span class="line"></span>
<span class="line">4&gt;实际开发过程中，配置 post-receive 会比较多一些，比如我的配置，记录 推送者的用户名，可以用 $GL_USERNAME（GitLab 变量）:</span>
<span class="line">#!/bin/bash</span>
<span class="line">while read oldrev newrev refname; do</span>
<span class="line">  if [[ &quot;$refname&quot; == &quot;refs/heads/main&quot; ]]; then</span>
<span class="line">    echo &quot;$(date &#39;+%Y-%m-%d %H:%M:%S&#39;) - User: $GL_USERNAME pushed to main: $newrev&quot; &gt;&gt; /var/log/gitlab/custom_hooks.log</span>
<span class="line">  fi</span>
<span class="line">done</span>
<span class="line"></span>
<span class="line">然后可以在日志下看到:</span>
<span class="line">2025-03-03 15:47:20 - User: root pushed to main: 00d8d9ff4368e460e93c5481ac9a3f78625b5e04</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const t=n(l,[["render",d],["__file","gitlab之server端hook配置.html.vue"]]),o=JSON.parse('{"path":"/content/service/docker/gitlab%E4%B9%8Bserver%E7%AB%AFhook%E9%85%8D%E7%BD%AE.html","title":"gitlab之server端hook配置","lang":"en-US","frontmatter":{"sidebar":false,"title":"gitlab之server端hook配置","head":[["meta",{"name":"title","content":"gitlab之server端hook配置"}],["meta",{"name":"description","content":"gitlab之server端hook配置"}],["meta",{"name":"keywords","content":"gitlab,hook"}],["meta",{"property":"og:title","content":"gitlab之server端hook配置"}],["meta",{"property":"og:description","content":"gitlab之server端hook配置"}]]},"headers":[],"git":{},"filePathRelative":"content/service/docker/gitlab之server端hook配置.md"}');export{t as comp,o as data};
