import{_ as e,c as s,d as a,o as r}from"./app-CHrRue27.js";const n={};function o(i,t){return r(),s("div",null,t[0]||(t[0]=[a(`<h5 id="git-使用-squash-merge" tabindex="-1"><a class="header-anchor" href="#git-使用-squash-merge"><span>git 使用 squash merge</span></a></h5><h5 id="🔹-1-什么是-squash-merge" tabindex="-1"><a class="header-anchor" href="#🔹-1-什么是-squash-merge"><span>🔹 1. 什么是 <code>squash merge</code></span></a></h5><p><code>squash merge</code> 是 Git 合并的一种方式：</p><ul><li>将一个分支（通常是 feature branch）上的 <strong>多个提交</strong> 合并成 <strong>一个新的提交</strong></li><li>新提交的作者默认是执行 merge 的人</li><li>合并完成后，master（或目标分支）上只会看到这一个 commit</li></ul><p>命令示例：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> checkout master</span>
<span class="line"><span class="token function">git</span> merge <span class="token parameter variable">--squash</span> feature-branch</span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Add new feature&quot;</span> // 如果需要保留原作者信息，可以 <span class="token function">git</span> commit <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">&quot;Original Dev &lt;dev@example.com&gt;&quot;</span> <span class="token parameter variable">-m</span> <span class="token string">&quot;Add new feature&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="🔹-2-特点" tabindex="-1"><a class="header-anchor" href="#🔹-2-特点"><span>🔹 2. 特点</span></a></h5><table><thead><tr><th>特点</th><th>说明</th></tr></thead><tbody><tr><td><strong>提交数</strong></td><td>feature-branch 的多个提交合并成一个新的 commit</td></tr><tr><td><strong>作者信息</strong></td><td>默认是执行 merge 的人；可用 <code>--author=&quot;...&quot;</code> 保留原作者</td></tr><tr><td><strong>历史整洁</strong></td><td>master 上不会有很多小提交，提交历史更简洁</td></tr><tr><td><strong>保留改动</strong></td><td>所有 feature-branch 的改动都会包含在新 commit 中</td></tr><tr><td><strong>feature-branch 不变</strong></td><td>原分支的提交依然存在，不受影响</td></tr></tbody></table><hr><h5 id="🔹-3-使用场景" tabindex="-1"><a class="header-anchor" href="#🔹-3-使用场景"><span>🔹 3. 使用场景</span></a></h5><ul><li><strong>提交历史需要整洁</strong>：例如 master 或 main 分支上不希望有每个小提交</li><li><strong>功能完成后合并</strong>：把一整个功能模块作为一个 commit 提交到主分支</li><li><strong>临时修复或小功能</strong>：多个零散提交合并成一个完整的逻辑提交</li></ul><blockquote><p>⚠️ 注意：如果团队希望保留每个小提交的作者信息或历史，<strong>不适合使用 squash merge</strong></p></blockquote><hr><h5 id="🔹-4-和普通-merge-对比" tabindex="-1"><a class="header-anchor" href="#🔹-4-和普通-merge-对比"><span>🔹 4. 和普通 merge 对比</span></a></h5><table><thead><tr><th>对比项</th><th>普通 merge</th><th>squash merge</th></tr></thead><tbody><tr><td><strong>提交数</strong></td><td>保留 feature-branch 的每个提交</td><td>所有提交合并成一个新的 commit</td></tr><tr><td><strong>历史完整性</strong></td><td>历史完整，可追溯每个小提交</td><td>历史压缩，只保留一个 commit</td></tr><tr><td><strong>作者信息</strong></td><td>保留每个 commit 的原作者</td><td>默认是执行 merge 的人，可手动指定 author</td></tr><tr><td><strong>生成 merge commit</strong></td><td>会生成一个 merge commit</td><td>不生成 merge commit（除非手动）</td></tr><tr><td><strong>适用场景</strong></td><td>协作开发，保留完整历史</td><td>发布或整合功能，保持 master 历史干净</td></tr></tbody></table><hr><h5 id="🔹-5-总结建议" tabindex="-1"><a class="header-anchor" href="#🔹-5-总结建议"><span>🔹 5. 总结建议</span></a></h5><ul><li><strong>保留原始提交历史</strong> → 用普通 merge</li><li><strong>希望 master 干净整洁</strong> → 用 squash merge，并在需要时指定作者</li></ul>`,19)]))}const h=e(n,[["render",o],["__file","git之squash合并.html.vue"]]),l=JSON.parse('{"path":"/content/other/git/git%E4%B9%8Bsquash%E5%90%88%E5%B9%B6.html","title":"git之squash合并","lang":"en-US","frontmatter":{"sidebar":false,"title":"git之squash合并","head":[["meta",{"name":"title","content":"git之squash合并"}],["meta",{"name":"description","content":"git之squash合并"}],["meta",{"name":"keywords","content":"git,squash"}],["meta",{"property":"og:title","content":"git之squash合并"}],["meta",{"property":"og:description","content":"git之squash合并"}]]},"headers":[],"git":{},"filePathRelative":"content/other/git/git之squash合并.md"}');export{h as comp,l as data};
