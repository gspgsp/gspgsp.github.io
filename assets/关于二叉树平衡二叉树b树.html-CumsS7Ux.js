import{_ as e,c as n,d as t,o as s}from"./app-CHrRue27.js";const l={};function d(i,a){return s(),n("div",null,a[0]||(a[0]=[t(`<h5 id="关于二叉树-平衡二叉树-b树" tabindex="-1"><a class="header-anchor" href="#关于二叉树-平衡二叉树-b树"><span>关于<code>二叉树</code> <code>平衡二叉树</code> <code>b树</code></span></a></h5><h5 id="_1-什么是二叉树" tabindex="-1"><a class="header-anchor" href="#_1-什么是二叉树"><span>1. 什么是二叉树？</span></a></h5><ul><li>二叉树是一种 <strong>每个节点最多有两个子节点（左子节点和右子节点）</strong> 的数据结构。</li><li>树结构用于存储层级关系，支持快速查找、插入和删除。</li></ul><h5 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点：</span></a></h5><ul><li>每个节点最多有两个子节点。</li><li>没有其他要求。</li></ul><hr><h5 id="_2-什么是平衡二叉树" tabindex="-1"><a class="header-anchor" href="#_2-什么是平衡二叉树"><span>2. 什么是平衡二叉树？</span></a></h5><ul><li>平衡二叉树是一种特殊的二叉树，保证<strong>左子树和右子树的高度差不超过1</strong>。</li><li>这样保证了树的高度尽可能低，避免退化成链表，查找效率高。</li></ul><h5 id="常见的平衡二叉树" tabindex="-1"><a class="header-anchor" href="#常见的平衡二叉树"><span>常见的平衡二叉树：</span></a></h5><ul><li>AVL树</li><li>红黑树</li></ul><hr><h5 id="_3-mysql-中的树结构" tabindex="-1"><a class="header-anchor" href="#_3-mysql-中的树结构"><span>3. MySQL 中的树结构</span></a></h5><p>MySQL 中用到的数据结构主要是：</p><h5 id="b-树-b树的变种" tabindex="-1"><a class="header-anchor" href="#b-树-b树的变种"><span>B+ 树（B树的变种）</span></a></h5><ul><li><strong>MySQL InnoDB 的索引底层实现用的是 B+ 树</strong>，而不是简单的二叉树。</li><li>B+ 树是一种多路平衡查找树，节点可以有多个子节点。</li><li>优点是适合磁盘存储，减少磁盘IO次数。</li><li>叶子节点中存储了所有的实际数据（InnoDB聚簇索引），非叶子节点存储索引。</li></ul><h5 id="为什么不用平衡二叉树" tabindex="-1"><a class="header-anchor" href="#为什么不用平衡二叉树"><span>为什么不用平衡二叉树？</span></a></h5><ul><li>二叉树的高度会比较高，不利于磁盘IO。</li><li>B+ 树的多路分支大大减少了树的高度，使得查询更快。</li><li>由于数据库存储在磁盘上，B+树的设计更加符合磁盘块存储的特点。</li></ul><hr><h5 id="_4-区别总结" tabindex="-1"><a class="header-anchor" href="#_4-区别总结"><span>4. 区别总结</span></a></h5><table><thead><tr><th>结构</th><th>二叉树</th><th>平衡二叉树</th><th>B+树（MySQL索引底层）</th></tr></thead><tbody><tr><td>每个节点子节点数</td><td>最多2个</td><td>最多2个</td><td>多个子节点</td></tr><tr><td>是否平衡</td><td>不一定</td><td>保证平衡（左右子树高度差≤1）</td><td>保证平衡</td></tr><tr><td>适合场景</td><td>内存中简单结构</td><td>内存中需快速查找</td><td>磁盘存储、数据库索引</td></tr><tr><td>叶子节点数据</td><td>可以存，也可以不存</td><td>可以存，也可以不存</td><td>叶子节点存所有数据</td></tr><tr><td>查找效率</td><td>可能退化到O(n)</td><td>O(log n)</td><td>O(log n)，更适合磁盘IO</td></tr></tbody></table><hr><h5 id="_5-简单示意图" tabindex="-1"><a class="header-anchor" href="#_5-简单示意图"><span>5. 简单示意图</span></a></h5><h5 id="二叉树示意" tabindex="-1"><a class="header-anchor" href="#二叉树示意"><span>二叉树示意</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">     10</span>
<span class="line">    /  \\</span>
<span class="line">   5    20</span>
<span class="line">  / \\</span>
<span class="line"> 3   7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="平衡二叉树-avl" tabindex="-1"><a class="header-anchor" href="#平衡二叉树-avl"><span>平衡二叉树（AVL）</span></a></h5><p><code>同样结构，但保证左右子树高度差 ≤ 1</code></p><hr><h5 id="b-树-简化示意" tabindex="-1"><a class="header-anchor" href="#b-树-简化示意"><span>B+树（简化示意）</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">          [10 | 20]</span>
<span class="line">        /     |      \\</span>
<span class="line">  [1..9]   [11..19]  [21..30]</span>
<span class="line">叶子节点存储所有数据</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结"><span>6. 总结</span></a></h5><ul><li>MySQL 实际用的是<strong>B+树</strong>，不是简单的二叉树或平衡二叉树。</li><li>平衡二叉树主要用于内存中数据结构（如红黑树在某些缓存或内存索引中）。</li><li>二叉树是基础概念，平衡二叉树是它的优化版本。</li><li>B+树适合数据库磁盘存储和索引需求。</li></ul><hr>`,34)]))}const h=e(l,[["render",d],["__file","关于二叉树平衡二叉树b树.html.vue"]]),c=JSON.parse('{"path":"/content/database/mysql/%E5%85%B3%E4%BA%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91b%E6%A0%91.html","title":"关于二叉树平衡二叉树b树","lang":"en-US","frontmatter":{"sidebar":false,"title":"关于二叉树平衡二叉树b树","head":[["meta",{"name":"title","content":"关于二叉树平衡二叉树b树"}],["meta",{"name":"description","content":"关于二叉树平衡二叉树b树"}],["meta",{"name":"keywords","content":"mysql"}],["meta",{"property":"og:title","content":"关于二叉树平衡二叉树b树"}],["meta",{"property":"og:description","content":"关于二叉树平衡二叉树b树"}]]},"headers":[],"git":{},"filePathRelative":"content/database/mysql/关于二叉树平衡二叉树b树.md"}');export{h as comp,c as data};
