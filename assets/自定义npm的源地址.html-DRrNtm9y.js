import{_ as p,c as n,d as e,o}from"./app-CHrRue27.js";const r={};function a(s,t){return o(),n("div",null,t[0]||(t[0]=[e("<p>自定义npm的源地址: 当我们的前端项目npm仓库有多个源，想在某个单独的项目中使用特定的npm源，则可以通过.npmrc文件或者package.json来进行配置 .npmrc文件配置</p><p>1.在项目根目录下创建.npmrc文件</p><p>2.编辑文件，输入registry=&quot;目标源地址&quot; registry=&quot;https://registry.npmjs.org/&quot;</p><p>3.通过命令npm config ls查看当前项目下的registry是否发生了变化</p><p>配置完成后，npm源地址只在此项目中生效，并不会对全局npm的配置影响，可以在别的终端上通过命令npm config ls进行验证</p><p>package.json文件配置 在package.json文件中，添加publishConfig属性，这样可以指定npm源发布仓库（可以用于公司的npm私库）需要提前登录</p><p>&quot;publishConfig&quot;: {<br> &quot;registry&quot;: &quot;http://xxxxx/&quot;<br> }</p><p>总结:<br> package.json 一般用于自己定义npm包的时候，指定将这个包发布到哪个仓库去，可以是自己公司的私有仓库也可以是共有的。<br> .npmrc 文件，一般指定当前项目可以单独从哪些源(仓库)加载依赖，这个也很有用，一般大家默认都会配置taobao的源，但是会发现，有些包在taobao上找不到，就需要单独在则合理配置特殊的源地址了</p>",8)]))}const c=p(r,[["render",a],["__file","自定义npm的源地址.html.vue"]]),i=JSON.parse('{"path":"/content/other/spread/%E8%87%AA%E5%AE%9A%E4%B9%89npm%E7%9A%84%E6%BA%90%E5%9C%B0%E5%9D%80.html","title":"自定义npm的源地址","lang":"en-US","frontmatter":{"sidebar":false,"title":"自定义npm的源地址","description":"自定义npm的源地址"},"headers":[],"git":{},"filePathRelative":"content/other/spread/自定义npm的源地址.md"}');export{c as comp,i as data};
