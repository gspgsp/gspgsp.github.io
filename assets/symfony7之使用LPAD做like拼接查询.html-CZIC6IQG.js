import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function i(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h5 id="symfony7之使用lpad做like拼接查询" tabindex="-1"><a class="header-anchor" href="#symfony7之使用lpad做like拼接查询"><span>symfony7之使用LPAD做like拼接查询</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">解释:</span>
<span class="line">LPAD 是 SQL 中的一个字符串函数，全称是 Left PAD，意思是：向字符串左边填充指定字符，直到达到指定长度。</span>
<span class="line"></span>
<span class="line">语法:</span>
<span class="line">LPAD(string, length, pad_string)</span>
<span class="line">string：要被填充的原字符串（可以是字段）</span>
<span class="line">length：目标长度</span>
<span class="line">pad_string：用来填充的字符（通常是 &#39;0&#39;）</span>
<span class="line"></span>
<span class="line">使用:</span>
<span class="line">在 Symfony 7 + Doctrine 下使用 \`LPAD\`（\`Lpad\` 函数）确实需要通过引入 \`beberlei/DoctrineExtensions\` 中的自定义 DQL 函数 \`DoctrineExtensions\\Query\\Mysql\\Lpad\`。以下是完整的引入、配置和在 \`QueryBuilder\` 中正确使用的方式。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="✅-1-安装依赖" tabindex="-1"><a class="header-anchor" href="#✅-1-安装依赖"><span>✅ 1. 安装依赖</span></a></h5><p>首先，确保安装了 <code>beberlei/DoctrineExtensions</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">composer</span> require beberlei/DoctrineExtensions</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h5 id="✅-2-注册-lpad-函数到-doctrine" tabindex="-1"><a class="header-anchor" href="#✅-2-注册-lpad-函数到-doctrine"><span>✅ 2. 注册 <code>Lpad</code> 函数到 Doctrine</span></a></h5><p>在 <code>config/packages/doctrine.yaml</code> 中添加配置：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">doctrine</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">orm</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">dql</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">string_functions</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">LPAD</span><span class="token punctuation">:</span> DoctrineExtensions\\Query\\Mysql\\Lpad</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<code>LPAD</code> 是大小写敏感的，注册名（左侧）需要与 SQL 使用时一致。</p></blockquote><hr><h5 id="✅-3-正确使用-lpad-concat-like-组合" tabindex="-1"><a class="header-anchor" href="#✅-3-正确使用-lpad-concat-like-组合"><span>✅ 3. 正确使用 <code>LPAD</code> + <code>CONCAT</code> + <code>LIKE</code> 组合</span></a></h5><p>在 QueryBuilder 中不能直接使用 PHP 函数，需要用 DQL 表达式来写。你提供的语法：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;CONCAT(e.abbreviation, &#39;-&#39;, LPAD(s.indexNumber, 6, 0))&quot;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;:searchString&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>是字符串，<strong>不能直接传给 <code>expr()-&gt;like()</code></strong>。正确写法是使用 <code>Expr</code> 的 <code>literal()</code> 或手动拼接 DQL：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">andWhere</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string double-quoted-string">&quot;CONCAT(e.abbreviation, &#39;-&#39;, LPAD(s.indexNumber, 6, &#39;0&#39;))&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;:searchString&#39;</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;searchString&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span> <span class="token operator">.</span> <span class="token variable">$searchString</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️ 注意几点：</p><ul><li>LPAD 第三个参数是字符，必须用 <code>&#39;0&#39;</code> 包括引号。</li><li><code>LPAD(s.indexNumber, 6, &#39;0&#39;)</code> 是 DQL 中自定义函数。</li><li>整个表达式作为字符串传给 <code>like()</code>，等价于原生 SQL。</li></ul><hr><h5 id="🧪-示例完整代码片段" tabindex="-1"><a class="header-anchor" href="#🧪-示例完整代码片段"><span>🧪 示例完整代码片段</span></a></h5><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$qb</span> <span class="token operator">=</span> <span class="token variable">$em</span><span class="token operator">-&gt;</span><span class="token function">createQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;s&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">Submission</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;s&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-&gt;</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;s.event&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;e&#39;</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-&gt;</span><span class="token function">andWhere</span><span class="token punctuation">(</span></span>
<span class="line">       <span class="token variable">$qb</span><span class="token operator">-&gt;</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">like</span><span class="token punctuation">(</span></span>
<span class="line">           <span class="token string double-quoted-string">&quot;CONCAT(e.abbreviation, &#39;-&#39;, LPAD(s.indexNumber, 6, &#39;0&#39;))&quot;</span><span class="token punctuation">,</span></span>
<span class="line">           <span class="token string single-quoted-string">&#39;:searchString&#39;</span></span>
<span class="line">       <span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">)</span></span>
<span class="line">   <span class="token operator">-&gt;</span><span class="token function">setParameter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;searchString&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;%&#39;</span> <span class="token operator">.</span> <span class="token variable">$searchTerm</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>如果遇到 <code>Function &#39;LPAD&#39; does not exist</code>，说明注册没有成功，确认：</p><ul><li><code>doctrine.yaml</code> 中的配置是否在正确环境下（比如 <code>dev</code>, <code>prod</code>）。</li><li>配置是否清除缓存后重新加载了：运行</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console cache:clear</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,27)]))}const o=s(p,[["render",i],["__file","symfony7之使用LPAD做like拼接查询.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony7%E4%B9%8B%E4%BD%BF%E7%94%A8LPAD%E5%81%9Alike%E6%8B%BC%E6%8E%A5%E6%9F%A5%E8%AF%A2.html","title":"symfony7之使用LPAD做like拼接查询","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7之使用LPAD做like拼接查询","head":[["meta",{"name":"title","content":"symfony7之使用LPAD做like拼接查询"}],["meta",{"name":"description","content":"symfony7之使用LPAD做like拼接查询"}],["meta",{"name":"keywords","content":"symfony,php,LPAD"}],["meta",{"property":"og:title","content":"symfony7之使用LPAD做like拼接查询"}],["meta",{"property":"og:description","content":"symfony7之使用LPAD做like拼接查询"}]]},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony7之使用LPAD做like拼接查询.md"}');export{o as comp,r as data};
