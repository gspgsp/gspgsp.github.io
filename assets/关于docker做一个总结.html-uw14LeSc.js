import{_ as n,c as s,d as a,o as i}from"./app-CHrRue27.js";const l={};function c(d,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h3 id="_1-docker是什么" tabindex="-1"><a class="header-anchor" href="#_1-docker是什么"><span>1.docker是什么</span></a></h3><blockquote><p>官方介绍: https://docs.docker.com/get-started/docker-overview/</p></blockquote><p>当我们通过手动安装docker的时候步骤如下:</p><h4 id="_1-更新包索引并安装依赖" tabindex="-1"><a class="header-anchor" href="#_1-更新包索引并安装依赖"><span>1. 更新包索引并安装依赖</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install ca-certificates curl gnupg lsb-release</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加-docker-官方-gpg-密钥" tabindex="-1"><a class="header-anchor" href="#_2-添加-docker-官方-gpg-密钥"><span>2. 添加 Docker 官方 GPG 密钥</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span>
<span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span>
<span class="line">sudo chmod a+r /etc/apt/keyrings/docker.gpg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-设置-docker-仓库" tabindex="-1"><a class="header-anchor" href="#_3-设置-docker-仓库"><span>3. 设置 Docker 仓库</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">echo \\</span>
<span class="line">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\</span>
<span class="line">$(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-安装-docker-engine" tabindex="-1"><a class="header-anchor" href="#_4-安装-docker-engine"><span>4. 安装 Docker Engine</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-验证安装" tabindex="-1"><a class="header-anchor" href="#_5-验证安装"><span>5. 验证安装</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sudo docker run hello-world</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_6-注意-docker-compose-作为插件-docker-compose-plugin-包含在内-不需要再次单独安装" tabindex="-1"><a class="header-anchor" href="#_6-注意-docker-compose-作为插件-docker-compose-plugin-包含在内-不需要再次单独安装"><span>6. 注意: Docker Compose 作为插件 (docker-compose-plugin) 包含在内，不需要再次单独安装.</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">历史背景：</span>
<span class="line">旧版本（V1）：</span>
<span class="line"></span>
<span class="line">需要单独安装 docker-compose（Python 编写）</span>
<span class="line">使用命令：docker-compose up（带横杠）</span>
<span class="line">独立的二进制文件</span>
<span class="line"></span>
<span class="line">新版本（V2，现在推荐）：</span>
<span class="line"></span>
<span class="line">作为 Docker CLI 插件集成</span>
<span class="line">使用命令：docker compose up（空格，无横杠）</span>
<span class="line">用 Go 重写，性能更好</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-通过-docker-pull-run-命令来理解-docker-daemon-和-docker-client-之间的关系" tabindex="-1"><a class="header-anchor" href="#_2-通过-docker-pull-run-命令来理解-docker-daemon-和-docker-client-之间的关系"><span>2.通过 docker pull/run ... 命令来理解 Docker daemon 和 Docker client 之间的关系:</span></a></h3><h4 id="当您执行-docker-pull-run-时" tabindex="-1"><a class="header-anchor" href="#当您执行-docker-pull-run-时"><span>当您执行 <code>docker pull/run ...</code> 时：</span></a></h4><h5 id="直接使用的是-docker-client-cli" tabindex="-1"><a class="header-anchor" href="#直接使用的是-docker-client-cli"><span>直接使用的是：<strong>Docker Client (CLI)</strong></span></a></h5><ul><li>就是 <code>docker</code> 这个命令行工具</li><li>对应安装包：<code>docker-ce-cli</code></li></ul><h5 id="实际工作的是-docker-daemon" tabindex="-1"><a class="header-anchor" href="#实际工作的是-docker-daemon"><span>实际工作的是：<strong>Docker Daemon</strong></span></a></h5><ul><li>后台运行的服务进程 <code>dockerd</code></li><li>对应安装包：<code>docker-ce</code>（Docker Engine）</li></ul><h5 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程：</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">您输入命令</span>
<span class="line">    ↓</span>
<span class="line">Docker Client (docker-ce-cli)</span>
<span class="line">    ↓</span>
<span class="line">通过 REST API 或 Socket 通信</span>
<span class="line">    ↓</span>
<span class="line">Docker Daemon (dockerd, 即 docker-ce)</span>
<span class="line">    ↓</span>
<span class="line">调用 containerd 实际执行容器操作</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="安装包解释" tabindex="-1"><a class="header-anchor" href="#安装包解释"><span>安装包解释：</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token punctuation">\\</span></span>
<span class="line">  docker-ce           <span class="token comment"># Docker Engine (daemon/服务端)</span></span>
<span class="line">  docker-ce-cli       <span class="token comment"># Docker Client (命令行工具/客户端)</span></span>
<span class="line">  containerd.io       <span class="token comment"># 容器运行时</span></span>
<span class="line">  docker-buildx-plugin    <span class="token comment"># 构建插件</span></span>
<span class="line">  docker-compose-plugin  <span class="token comment"># Compose 插件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证：</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 查看 Docker Client 版本</span></span>
<span class="line"><span class="token function">docker</span> version <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Client:&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看 Docker Daemon (Engine) 版本</span></span>
<span class="line"><span class="token function">docker</span> version <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;Server:&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看 daemon 进程</span></span>
<span class="line"><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> dockerd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="所以简单说" tabindex="-1"><a class="header-anchor" href="#所以简单说"><span>所以简单说：</span></a></h5><ul><li><strong>敲命令</strong> = 使用 Docker Client</li><li><strong>实际干活</strong> = Docker Daemon 在后台执行</li></ul><p>它们是 <strong>客户端-服务器架构</strong>，通常装在同一台机器上，通过 Unix socket (<code>/var/run/docker.sock</code>) 通信。</p><h5 id="可以通过如下命令检查dockerd运行状态" tabindex="-1"><a class="header-anchor" href="#可以通过如下命令检查dockerd运行状态"><span>可以通过如下命令检查dockerd运行状态</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ ps aux | grep dockerd</span>
<span class="line">root        2073  0.3  0.2 4947848 97124 ?       Ssl  09:00   0:19 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span>
<span class="line">root       22625  0.0  0.0  12308  2816 pts/4    S+   10:44   0:00 grep --color=auto dockerd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="_3-目前docker使用主要有两种" tabindex="-1"><a class="header-anchor" href="#_3-目前docker使用主要有两种"><span>3.目前docker使用主要有两种</span></a></h4><ul><li>docker engine <ul><li>https://docs.docker.com/engine/install/ubuntu/</li></ul></li><li>docker desktop <ul><li>https://docs.docker.com/desktop/setup/install/linux/ubuntu/</li></ul></li></ul>`,36)]))}const t=n(l,[["render",c],["__file","关于docker做一个总结.html.vue"]]),o=JSON.parse('{"path":"/content/service/docker/%E5%85%B3%E4%BA%8Edocker%E5%81%9A%E4%B8%80%E4%B8%AA%E6%80%BB%E7%BB%93.html","title":"关于docker做一个总结","lang":"en-US","frontmatter":{"sidebar":false,"title":"关于docker做一个总结","head":[["meta",{"name":"title","content":"关于docker做一个总结"}],["meta",{"name":"description","content":"关于docker做一个总结"}],["meta",{"name":"keywords","content":"registry,docker"}],["meta",{"property":"og:title","content":"关于docker做一个总结"}],["meta",{"property":"og:description","content":"关于docker做一个总结"}]]},"headers":[{"level":3,"title":"1.docker是什么","slug":"_1-docker是什么","link":"#_1-docker是什么","children":[]},{"level":3,"title":"2.通过 docker pull/run ... 命令来理解 Docker daemon 和 Docker client 之间的关系:","slug":"_2-通过-docker-pull-run-命令来理解-docker-daemon-和-docker-client-之间的关系","link":"#_2-通过-docker-pull-run-命令来理解-docker-daemon-和-docker-client-之间的关系","children":[]}],"git":{},"filePathRelative":"content/service/docker/关于docker做一个总结.md"}');export{t as comp,o as data};
