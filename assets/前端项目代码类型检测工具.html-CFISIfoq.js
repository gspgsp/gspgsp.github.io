import{_ as s,c as e,d as a,o as i}from"./app-CHrRue27.js";const t={};function l(c,n){return i(),e("div",null,n[0]||(n[0]=[a('<p>前端项目代码类型检测工具:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">oxlint使用:  </span>\n<span class="line">https://oxc.rs/docs/guide/usage/linter</span>\n<span class="line">注意: We recommend running oxlint before ESLint in your lint-staged or CI setup for a quicker feedback loop, considering it only takes a few seconds to run on large codebases.</span>\n<span class="line">  </span>\n<span class="line">同时使用eslint和oxlint:  </span>\n<span class="line">https://github.com/oxc-project/eslint-plugin-oxlint</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用lint相关工具，需要lintstage配置文件:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">有了 `.lintstagedrc.js` 文件后，你就不需要在 `package.json` 中单独配置 `lint-staged` 了。`lint-staged` 会优先读取 `.lintstagedrc.js` 文件中的配置，因此你可以将所有与 lint-staged 相关的配置集中在这个文件中，保持代码的整洁性和可维护性。</span>\n<span class="line">  </span>\n<span class="line">如果你已经在 `.lintstagedrc.js` 中定义了需要执行的命令，确保 `package.json` 中的 `lint-staged` 部分没有重复的配置即可。如果 `package.json` 中还有与 `lint-staged` 相关的配置，建议将其删除，以避免混淆或不必要的重复定义。这样做的好处包括：</span>\n<span class="line">  </span>\n<span class="line">1. 集中管理：所有 lint-staged 配置集中在一个文件中，易于查看和修改。</span>\n<span class="line">2. 简化 `package.json`：`package.json` 文件更加简洁，不会被冗长的配置占用。</span>\n<span class="line">3. 可扩展性：如果将来需要添加更多 lint-staged 配置，只需在 `.lintstagedrc.js` 中进行，而无需触碰 `package.json`。</span>\n<span class="line">  </span>\n<span class="line">总之，使用 `.lintstagedrc.js` 可以使你的项目结构更加清晰。</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>eslint官网: https://eslint.org/</p><p>关于new-cap规则: https://eslint.org/docs/latest/rules/new-cap</p><p>在线平台: https://eslint.org/play/</p><p>部分规则依赖关系: @nuxt/eslint -----&gt;@nuxt/eslint-config-----&gt;eslint-plugin-unicorn</p><p>所以 packege.json下配置了 @nuxt/eslint ,那么也会安装后面这两个</p>',9)]))}const p=s(t,[["render",l],["__file","前端项目代码类型检测工具.html.vue"]]),r=JSON.parse('{"path":"/content/tool/front/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7.html","title":"前端项目代码类型检测工具","lang":"en-US","frontmatter":{"sidebar":false,"title":"前端项目代码类型检测工具","description":"前端项目代码类型检测工具"},"headers":[],"git":{},"filePathRelative":"content/tool/front/前端项目代码类型检测工具.md"}');export{p as comp,r as data};
