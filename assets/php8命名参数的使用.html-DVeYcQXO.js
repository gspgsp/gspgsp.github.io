import{_ as n,c as s,d as e,o as p}from"./app-CHrRue27.js";const t={};function o(c,a){return p(),s("div",null,a[0]||(a[0]=[e(`<p>php8命名参数的使用:</p><blockquote></blockquote><p>在 PHP 8 中，你可以通过<strong>命名参数</strong>来显式传递特定的参数，而跳过其他默认值的参数。这使得代码更加灵活、可读，尤其是在有多个可选参数的场景中。</p><p>在你的示例中，如果方法定义如下：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">normalizeData</span><span class="token punctuation">(</span><span class="token class-name">ResponsibleInterface</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">string</span> <span class="token variable">$format</span> <span class="token operator">=</span> <span class="token class-name static-context">JsonEncoder</span><span class="token operator">::</span><span class="token constant">FORMAT</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$context</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 方法体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在调用 <code>normalizeData</code> 时显式传递 <code>context</code> 参数，而不需要传递 <code>format</code> 参数，因为 <code>format</code> 已有默认值。调用方式如下：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$normalizedData</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">serializerService</span><span class="token operator">-&gt;</span><span class="token function">normalizeData</span><span class="token punctuation">(</span><span class="token variable">$responsible</span><span class="token punctuation">,</span> <span class="token argument-name">context</span><span class="token punctuation">:</span> <span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在这里，<code>context</code> 被显式赋值，而 <code>format</code> 保持默认值。这种用法在 PHP 8 中被称为<strong>命名参数</strong>，让你可以根据需求跳过或更改特定参数，同时提高了代码的可读性和灵活性。 这样做的好处是，可以跳过中间的参数，而在php7及以前，需要按顺序传递参数</p>`,8)]))}const i=n(t,[["render",o],["__file","php8命名参数的使用.html.vue"]]),r=JSON.parse('{"path":"/content/php/base/php8%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"php8命名参数的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"php8命名参数的使用","description":"php8命名参数的使用"},"headers":[],"git":{},"filePathRelative":"content/php/base/php8命名参数的使用.md"}');export{i as comp,r as data};
