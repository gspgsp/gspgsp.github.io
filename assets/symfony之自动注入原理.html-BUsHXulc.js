import{_ as n,c as e,d as i,o as a}from"./app-CHrRue27.js";const l={};function r(c,s){return a(),e("div",null,s[0]||(s[0]=[i(`<p>今天在分析之前的项目的时候，发现有几处配置不太清楚，就翻了一下symfony的官方文档，总结如下:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">全面讲解symfony的自动注入原理: https://symfony.com/doc/5.4/service_container/autowiring.html</span>
<span class="line"></span>
<span class="line"># config/services.yaml</span>
<span class="line">services:</span>
<span class="line">    # ...</span>
<span class="line"></span>
<span class="line">    # the id is not a class, so it won&#39;t be used for autowiring</span>
<span class="line">    app.rot13.transformer:</span>
<span class="line">        class: App\\Util\\Rot13Transformer</span>
<span class="line">        # ...</span>
<span class="line"></span>
<span class="line">    # but this fixes it!</span>
<span class="line">    # the &quot;app.rot13.transformer&quot; service will be injected when</span>
<span class="line">    # an App\\Util\\Rot13Transformer type-hint is detected</span>
<span class="line">    App\\Util\\Rot13Transformer: &#39;@app.rot13.transformer&#39;</span>
<span class="line">    </span>
<span class="line">This creates a service &quot;alias&quot;, whose id is App\\Util\\Rot13Transformer. Thanks to this, autowiring sees this and uses it whenever the Rot13Transformer class is type-hinted</span>
<span class="line">(这创建了一个服务 &quot;别名&quot;，其ID是App\\Util\\Rot13Transformer。多亏了这一点，自动布线看到了这一点，并在Rot13Transformer类被类型提示时使用它)</span>
<span class="line">  </span>
<span class="line">通过别名实现自动注入: https://symfony.com/doc/5.4/service_container/autowiring.html#using-aliases-to-enable-autowiring</span>
<span class="line">   </span>
<span class="line">通过setter方法注入: https://symfony.com/doc/5.4/service_container/autowiring.html#autowiring-other-methods-e-g-setters-and-public-typed-properties</span>
<span class="line">  </span>
<span class="line">控制器里自动注入: https://symfony.com/doc/5.4/controller.html#controller-accessing-services</span>
<span class="line">  </span>
<span class="line">你怎么知道要使用LoggerInterface的类型提示？你可以阅读你所使用的任何功能的文档，或者通过运行以下程序获得一个可自动连接的类型提示列表:  </span>
<span class="line">php bin/console debug:autowiring</span>
<span class="line">  </span>
<span class="line">对于容器中所有可能的服务的完整列表，请运行:  </span>
<span class="line">php bin/console debug:container</span>
<span class="line">  </span>
<span class="line">还有一种与服务有关的参数。在YAML配置中，任何以@开头的字符串都被认为是服务的ID，而不是普通字符串：</span>
<span class="line"># config/services.yaml</span>
<span class="line">services:</span>
<span class="line">    App\\Service\\MessageGenerator:</span>
<span class="line">        arguments:</span>
<span class="line">            # this is not a string, but a reference to a service called &#39;logger&#39;</span>
<span class="line">            - &#39;@logger&#39;</span>
<span class="line"></span>
<span class="line">            # if the value of a string argument starts with &#39;@&#39;, you need to escape</span>
<span class="line">            # it by adding another &#39;@&#39; so Symfony doesn&#39;t consider it a service</span>
<span class="line">            # the following example would be parsed as the string &#39;@securepassword&#39;</span>
<span class="line">            # - &#39;@@securepassword&#39;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实内容还是比较多的，实际使用主要是在 config/service.yaml文件里配置各种服务。</p>`,3)]))}const p=n(l,[["render",r],["__file","symfony之自动注入原理.html.vue"]]),d=JSON.parse('{"path":"/content/php/symfony/symfony%E4%B9%8B%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E5%8E%9F%E7%90%86.html","title":"symfony之自动注入原理","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony之自动注入原理","description":"symfony之自动注入原理"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony之自动注入原理.md"}');export{p as comp,d as data};
