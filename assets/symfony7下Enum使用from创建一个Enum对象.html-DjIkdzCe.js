import{_ as e,c as s,d as a,o as i}from"./app-CHrRue27.js";const l={};function o(t,n){return i(),s("div",null,n[0]||(n[0]=[a(`<h5 id="symfony7下enum使用from创建一个enum对象" tabindex="-1"><a class="header-anchor" href="#symfony7下enum使用from创建一个enum对象"><span>symfony7下Enum使用from创建一个Enum对象</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">if (!empty(array_intersect($userRoles, $allowedRoles))) {</span>
<span class="line">    $actionEnum = SubmissionActionEnum::from($actionValue);</span>
<span class="line">    $actionsData[] = new Dto\\Query\\Submission\\Dashboard\\SubmissionActionDto(</span>
<span class="line">        $actionEnum-&gt;name,</span>
<span class="line">        $actionEnum-&gt;value</span>
<span class="line">    );</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析"><span>代码分析</span></a></h5><p>这段 Symfony 7 中的 PHP 代码逻辑如下：</p><hr><h5 id="✅-作用总结" tabindex="-1"><a class="header-anchor" href="#✅-作用总结"><span>✅ 作用总结：</span></a></h5><p>判断当前用户角色是否包含在允许的角色中，如果是，则将某个 <code>enum</code> 类型的 action 组装成一个 <code>SubmissionActionDto</code> 对象，并添加到 <code>$actionsData</code> 数组中。</p><hr><h5 id="🔍-逐行分析" tabindex="-1"><a class="header-anchor" href="#🔍-逐行分析"><span>🔍 逐行分析：</span></a></h5><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token function">array_intersect</span><span class="token punctuation">(</span><span class="token variable">$userRoles</span><span class="token punctuation">,</span> <span class="token variable">$allowedRoles</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>array_intersect($userRoles, $allowedRoles)</code> 取出 <code>$userRoles</code> 和 <code>$allowedRoles</code> 中<strong>共同存在的角色</strong>。</li><li><code>!empty(...)</code> 如果两者有交集（即用户具有至少一个允许的角色），才执行下面的代码。</li></ul><hr><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$actionEnum = SubmissionActionEnum::from($actionValue);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>SubmissionActionEnum::from($actionValue)</code> 使用 PHP 8.1+ 的 <a href="https://www.php.net/manual/en/language.enumerations.backed.php" target="_blank" rel="noopener noreferrer">Backed Enums</a> 功能，从 <code>$actionValue</code>（应该是枚举的值，比如字符串或整数）生成一个 <code>SubmissionActionEnum</code> 枚举对象。</li><li>这个方法在无法匹配时会抛出 <code>ValueError</code>。</li></ul><hr><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$actionsData[] = new Dto\\Query\\Submission\\Dashboard\\SubmissionActionDto(</span>
<span class="line">    $actionEnum-&gt;name,</span>
<span class="line">    $actionEnum-&gt;value</span>
<span class="line">);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>创建一个新的 <code>SubmissionActionDto</code> 实例，传入：</p><ul><li><code>$actionEnum-&gt;name</code>：枚举的名称（如 <code>SendReminder</code>）</li><li><code>$actionEnum-&gt;value</code>：枚举的值（如 <code>&quot;send_reminder&quot;</code>）</li></ul></li><li><p>最后把这个 DTO 加入 <code>$actionsData</code> 数组中，供后续处理（比如返回前端、渲染列表等）。</p></li></ul><hr><h5 id="📌-示例" tabindex="-1"><a class="header-anchor" href="#📌-示例"><span>📌 示例：</span></a></h5><p>假设：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$userRoles = [&#39;ROLE_ADMIN&#39;];</span>
<span class="line">$allowedRoles = [&#39;ROLE_ADMIN&#39;, &#39;ROLE_MANAGER&#39;];</span>
<span class="line">$actionValue = &#39;send_reminder&#39;;</span>
<span class="line"></span>
<span class="line">enum SubmissionActionEnum: string {</span>
<span class="line">    case SendReminder = &#39;send_reminder&#39;;</span>
<span class="line">    case Archive = &#39;archive&#39;;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则：</p><ul><li><code>array_intersect($userRoles, $allowedRoles)</code> 为 <code>[&#39;ROLE_ADMIN&#39;]</code>，非空</li><li><code>SubmissionActionEnum::from(&#39;send_reminder&#39;)</code> 返回枚举对象 <code>SubmissionActionEnum::SendReminder</code></li><li>创建一个 DTO：<code>new SubmissionActionDto(&#39;SendReminder&#39;, &#39;send_reminder&#39;)</code></li></ul><hr><h5 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结：</span></a></h5><p>该段代码是典型的“<strong>权限判断后，执行特定操作并封装数据</strong>”逻辑：</p><ul><li><strong>权限检查：</strong> 用户是否有权进行某个动作</li><li><strong>动作转换：</strong> 将字符串 <code>$actionValue</code> 转换为枚举</li><li><strong>数据封装：</strong> 使用 DTO 封装并保存结果</li></ul>`,27)]))}const d=e(l,[["render",o],["__file","symfony7下Enum使用from创建一个Enum对象.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony7%E4%B8%8BEnum%E4%BD%BF%E7%94%A8from%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAEnum%E5%AF%B9%E8%B1%A1.html","title":"symfony7下Enum使用from创建一个Enum对象","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7下Enum使用from创建一个Enum对象","head":[["meta",{"name":"title","content":"symfony7下Enum使用from创建一个Enum对象"}],["meta",{"name":"description","content":"symfony7下Enum使用from创建一个Enum对象"}],["meta",{"name":"keywords","content":"symfony,php,enum"}],["meta",{"property":"og:title","content":"symfony7下Enum使用from创建一个Enum对象"}],["meta",{"property":"og:description","content":"symfony7下Enum使用from创建一个Enum对象"}]]},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony7下Enum使用from创建一个Enum对象.md"}');export{d as comp,r as data};
