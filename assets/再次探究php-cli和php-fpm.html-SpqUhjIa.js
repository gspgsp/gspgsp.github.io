import{_ as s,c as i,d as e,o as p}from"./app-CHrRue27.js";const l={};function a(c,n){return p(),i("div",null,n[0]||(n[0]=[e(`<p>再次探究php-cli和php-fpm:</p><p>1&gt;加载的php.ini文件(docker环境下)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">root@ca4989b3147e:/usr/local/etc# php-fpm -i | grep &#39;php.ini&#39;</span>
<span class="line">Configuration File (php.ini) Path =&gt; /usr/local/etc/php</span>
<span class="line">Loaded Configuration File =&gt; /usr/local/etc/php/php.ini</span>
<span class="line">/usr/local/etc/php/conf.d/php.ini</span>
<span class="line"></span>
<span class="line">root@ca4989b3147e:/usr/local/etc# php -i | grep &#39;php.ini&#39;</span>
<span class="line">Configuration File (php.ini) Path =&gt; /usr/local/etc/php</span>
<span class="line">Loaded Configuration File =&gt; /usr/local/etc/php/php.ini</span>
<span class="line">/usr/local/etc/php/conf.d/php.ini</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">通过上面的信息可以知道:</span>
<span class="line">PHP-CLI 和 PHP-FPM 会共享相同的配置，包括扩展加载、内存限制等。</span>
<span class="line">如果你在这个 php.ini 中做了修改，比如调整 memory_limit 或者添加扩展模块配置，两个环境都会受到影响。</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">也可以:</span>
<span class="line">php --ini 查看所有的ini配置，如下:</span>
<span class="line">root@ca4989b3147e:/usr/local/etc/php/conf.d# php --ini</span>
<span class="line">Configuration File (php.ini) Path: /usr/local/etc/php</span>
<span class="line">Loaded Configuration File:         /usr/local/etc/php/php.ini</span>
<span class="line">Scan for additional .ini files in: /usr/local/etc/php/conf.d</span>
<span class="line">Additional .ini files parsed:      /usr/local/etc/php/conf.d/date.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-fpm.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-gd.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-intl.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-mysqli.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-pcntl.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-pdo_mysql.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-redis.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-sockets.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-sodium.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-xsl.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/docker-php-ext-zip.ini,</span>
<span class="line">/usr/local/etc/php/conf.d/php.ini</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2&gt;docker环境下，默认php镜像会有如下环境变量 $PHP_INI_DIR, 会默认创建, 所以可以直接在脚本里面使用</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">root@ca4989b3147e:/usr/local/etc# echo $PHP_INI_DIR</span>
<span class="line">/usr/local/etc/php</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3&gt;二者之间的关系 理解 <strong>PHP-CLI</strong> 和 <strong>PHP-FPM</strong> 之间的关系同样重要。两者都是 PHP 的运行模式，但它们适用于不同的场景和用途。让我们深入探讨一下它们的区别和联系。</p><h5 id="php-cli-php-command-line-interface" tabindex="-1"><a class="header-anchor" href="#php-cli-php-command-line-interface"><span><strong>PHP-CLI（PHP Command Line Interface）</strong></span></a></h5><ul><li><strong>PHP-CLI</strong> 是 PHP 的命令行接口，用于在命令行下执行 PHP 脚本。</li><li>这种模式不涉及 Web 服务器，因此它没有像 <strong>PHP-FPM</strong> 一样的请求处理机制。</li><li><strong>PHP-CLI</strong> 主要用于执行脚本，通常是用于命令行工具、任务调度器、脚本自动化、测试等场景。</li><li>它适用于单独运行脚本，不依赖于 Web 服务器。</li></ul><h5 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点：</span></a></h5><ol><li>直接通过命令行执行 PHP 脚本（例如，<code>php myscript.php</code>）。</li><li>不依赖 Web 服务器，独立于 HTTP 请求。</li><li>配置文件（<code>php.ini</code>）通常位于 <code>/etc/php/cli</code> 或类似目录。</li><li>没有请求处理和进程池管理的复杂性。</li></ol><h5 id="php-fpm-php-fastcgi-process-manager" tabindex="-1"><a class="header-anchor" href="#php-fpm-php-fastcgi-process-manager"><span><strong>PHP-FPM（PHP FastCGI Process Manager）</strong></span></a></h5><ul><li><strong>PHP-FPM</strong> 是一个 PHP 的进程管理器，专门用来处理 Web 服务器（如 Nginx 或 Apache）通过 <strong>FastCGI</strong> 协议发来的 PHP 请求。</li><li>它是为高并发的 Web 环境设计的，可以处理多个并发请求，通过配置进程池来高效管理 PHP 进程。</li><li>PHP-FPM 主要应用于生产环境，尤其是与 Web 服务器结合使用时，它通过 FastCGI 协议来接收和响应 Web 服务器的请求。</li></ul><h5 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1"><span>特点：</span></a></h5><ol><li>与 Web 服务器（如 Nginx 或 Apache）结合，处理来自浏览器的 HTTP 请求。</li><li>通过 <strong>FastCGI</strong> 协议与 Web 服务器交互。</li><li>配置文件（<code>php.ini</code> 和 <code>php-fpm.conf</code>）通常位于 <code>/etc/php-fpm.d/</code> 或类似目录。</li><li>具有进程池、负载均衡、动态进程管理等高级特性。</li></ol><h5 id="php-cli-与-php-fpm-的关系" tabindex="-1"><a class="header-anchor" href="#php-cli-与-php-fpm-的关系"><span><strong>PHP-CLI 与 PHP-FPM 的关系</strong></span></a></h5><p>虽然 <strong>PHP-CLI</strong> 和 <strong>PHP-FPM</strong> 都是运行 PHP 的方式，它们的主要区别在于使用场景和处理方式：</p><ol><li><strong>PHP-CLI</strong> 用于 <strong>命令行执行</strong>，直接运行 PHP 脚本，通常不涉及 Web 请求。它是 PHP 的 &quot;独立模式&quot;。</li><li><strong>PHP-FPM</strong> 用于 <strong>Web 环境</strong>，通过 FastCGI 协议与 Web 服务器（如 Nginx 或 Apache）配合工作，处理 HTTP 请求。</li></ol><h5 id="如何切换-cli-与-fpm-之间的不同" tabindex="-1"><a class="header-anchor" href="#如何切换-cli-与-fpm-之间的不同"><span><strong>如何切换：CLI 与 FPM 之间的不同</strong></span></a></h5><ul><li><strong>CLI</strong> 模式下，执行的 PHP 脚本并不需要 Web 服务器的支持，也不需要处理 HTTP 请求。它更多用于后台任务或批量处理。</li><li><strong>FPM</strong> 模式下，PHP 被配置为与 Web 服务器（如 Nginx）一起工作，处理用户发来的 HTTP 请求。这意味着 PHP 进程池的管理和资源分配变得更加重要。</li></ul><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h5><ul><li><strong>PHP-CLI</strong> 是命令行接口，适用于脚本执行，常用于开发、测试和后台任务。</li><li><strong>PHP-FPM</strong> 是 PHP 的进程管理器，专为 Web 环境设计，通过 FastCGI 协议与 Web 服务器协同工作处理 PHP 请求。</li></ul><p>两者的选择取决于你要运行 PHP 的环境：是处理 Web 请求，还是执行后台任务。</p>`,22)]))}const r=s(l,[["render",a],["__file","再次探究php-cli和php-fpm.html.vue"]]),o=JSON.parse('{"path":"/content/php/base/%E5%86%8D%E6%AC%A1%E6%8E%A2%E7%A9%B6php-cli%E5%92%8Cphp-fpm.html","title":"再次探究php-cli和php-fpm","lang":"en-US","frontmatter":{"sidebar":false,"title":"再次探究php-cli和php-fpm","head":[["meta",{"name":"title","content":"再次探究php-cli和php-fpm"}],["meta",{"name":"description","content":"再次探究php-cli和php-fpm"}],["meta",{"name":"keywords","content":"php-cli,php-fpm"}],["meta",{"property":"og:title","content":"再次探究php-cli和php-fpm"}],["meta",{"property":"og:description","content":"再次探究php-cli和php-fpm"}]]},"headers":[],"git":{},"filePathRelative":"content/php/base/再次探究php-cli和php-fpm.md"}');export{r as comp,o as data};
