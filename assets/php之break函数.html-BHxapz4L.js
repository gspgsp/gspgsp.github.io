import{_ as n,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(i,s){return p(),a("div",null,s[0]||(s[0]=[e(`<p>break结束当前for, foreach, while, do-while或switch结构的执行。</p><p>break接受一个可选的数字参数，告诉它有多少个嵌套的封闭结构要被断开。默认值是1， 只有直接的包围结构被断开。但是数值不能大于嵌套的层数，否则会报错.</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;three&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;four&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;stop&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;five&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token operator">==</span> <span class="token string single-quoted-string">&#39;stop&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">/* You could also write &#39;break 1;&#39; here. */</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;<span class="token interpolation"><span class="token variable">$val</span></span>&lt;br /&gt;\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* Using the optional argument. */</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;At 5&lt;br /&gt;\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">/* Exit only the switch. */</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;At 10; quitting&lt;br /&gt;\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">break</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">/* Exit the switch and the while. */</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token delimiter important">?&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键是 break 后面的参数比较牛逼!</p>`,4)]))}const c=n(t,[["render",l],["__file","php之break函数.html.vue"]]),r=JSON.parse('{"path":"/content/php/base/php%E4%B9%8Bbreak%E5%87%BD%E6%95%B0.html","title":"php之break函数","lang":"en-US","frontmatter":{"sidebar":false,"title":"php之break函数","description":"php之break函数"},"headers":[],"git":{},"filePathRelative":"content/php/base/php之break函数.md"}');export{c as comp,r as data};
