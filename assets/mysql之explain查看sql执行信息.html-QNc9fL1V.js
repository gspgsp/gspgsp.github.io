import{_ as n,c as e,d as i,o as l}from"./app-CHrRue27.js";const a={};function d(c,s){return l(),e("div",null,s[0]||(s[0]=[i(`<p>mysql之explain查看sql执行信息: 主要是每次做sql优化的时候，总会查看explain参数，所以还是记录一下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">如下sql:</span>
<span class="line">explain SELECT \`id\`,\`name\`,\`cover_image\`,\`price\`,\`score\`,\`remark\`,\`brand\`,\`subclass\`,\`category_one\`,\`category_two\` FROM \`products\` WHERE (kind = &#39;家居家具&#39; and (name like &#39;%体验%&#39; or detail like &#39;%体验%&#39;)) AND (EXISTS(SELECT id FROM product_attributes WHERE \`product_attributes\`.\`product_id\`  = \`products\`.\`id\` AND \`product_attributes\`.\`attribute_value\` like &#39;%防滑%&#39;)) LIMIT 10;</span>
<span class="line"></span>
<span class="line">id   | select_type     | table           | partitions    | type | possible_keys |  key     | key_len | ref  | rows | filtered | Extra</span>
<span class="line">1	PRIMARY	            products		                   ref	    index_kind	 index_kind 	768	  const	  1202	  20.99	    Using where</span>
<span class="line">2	DEPENDENT SUBQUERY  product_attributes		           ALL					                              37329	  1.11	    Using where</span>
<span class="line"></span>
<span class="line">我在kind上加了索引 index_kind，现在的type 变为ref，没加之前是ALL，filtered 变为 20.99，所以查询效率还是提高了不少的</span>
<span class="line"></span>
<span class="line">相关参数解释：</span>
<span class="line">id 	            SELECT识别符。这是SELECT的查询序列号</span>
<span class="line"></span>
<span class="line">select_type 	SELECT类型,可以为以下任何一种:</span>
<span class="line">                SIMPLE:简单SELECT(不使用UNION或子查询)</span>
<span class="line">                PRIMARY:主查询，即最外面的查询</span>
<span class="line">                UNION:UNION中的第二个或后面的查询语句</span>
<span class="line">                DEPENDENT UNION:UNION中的第二个或后面的SELECT语句,取决于外面的查询</span>
<span class="line">                UNION RESULT:UNION 的结果</span>
<span class="line">                SUBQUERY:子查询中的第一个SELECT</span>
<span class="line">                DEPENDENT SUBQUERY:子查询中的第一个SELECT,取决于外面的查询</span>
<span class="line">                DERIVED:导出表的SELECT(FROM子句的子查询)</span>
<span class="line"></span>
<span class="line">table 	        输出的行所引用的表</span>
<span class="line"></span>
<span class="line">type 	        联接类型。下面给出各种联接类型,按照从最佳类型到最坏类型（由上到下性能逐渐变差）进行排序:</span>
<span class="line">                system:表仅有一行(=系统表)。这是const联接类型的一个特例。</span>
<span class="line">                const:表最多有一个匹配行,它将在查询开始时被读取。因为仅有一行,在这行的列值可被优化器剩余部分认为是常数。const表很快,因为它们只读取一次!</span>
<span class="line">                eq_ref:类似ref，区别就在使用的索引是唯一索引，对于每个来自于前面的表的行组合,从该表中读取一行，多表连接中使用unique index或者primary key作为关联条件。这可能是最好的联接类型,除了const类型。</span>
<span class="line">                ref:对于每个来自于前面的表的行组合,所有有匹配索引值的行将从这张表中读取(使用非唯一索引扫描或唯一索引的前缀扫描，返回匹配某个单独值的记录行)。</span>
<span class="line">                ref_or_null:该联接类型如同ref,但是添加了MySQL可以专门搜索包含NULL值的行。</span>
<span class="line">                index_merge:该联接类型表示使用了索引合并优化方法。</span>
<span class="line">                unique_subquery:该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。</span>
<span class="line">                index_subquery:该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr)</span>
<span class="line">                range:只检索给定范围的行,使用一个索引来选择行，常见于&lt;，&lt;=，&gt;，&gt;=，between等操作符。</span>
<span class="line">                index:该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。</span>
<span class="line">                ALL:对于每个来自于先前的表的行组合,进行完整的表扫描，全表扫描。</span>
<span class="line">                fulltext:全文索引</span>
<span class="line"></span>
<span class="line">possible_keys 	指出MySQL能使用哪个索引在该表中找到行，表示查询时可能使用的索引。</span>
<span class="line"></span>
<span class="line">key 	        显示MySQL实际决定使用的键(索引)。如果没有选择索引,键是NULL。</span>
<span class="line"></span>
<span class="line">key_len 	    显示MySQL决定使用的键长度。如果键是NULL,则长度为NULL。</span>
<span class="line"></span>
<span class="line">ref 	        显示使用哪个列或常数与key一起从表中选择行。</span>
<span class="line"></span>
<span class="line">rows 	        显示MySQL认为它执行查询时必须检查的行数。多行之间的数据相乘可以估算要处理的行数。</span>
<span class="line"></span>
<span class="line">filtered 	    显示了通过条件过滤出的行数的百分比估计值。</span>
<span class="line"></span>
<span class="line">Extra 	        该列包含MySQL解决查询的详细信息：</span>
<span class="line">                Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。</span>
<span class="line">                Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。</span>
<span class="line">                range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。</span>
<span class="line">                Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。</span>
<span class="line">                Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。</span>
<span class="line">                Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。</span>
<span class="line">                Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。</span>
<span class="line">                Using sort_union(...), Using union(...), Using intersect(...):这些函数说明如何为index_merge联接类型合并索引扫描。</span>
<span class="line">                Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const r=n(a,[["render",d],["__file","mysql之explain查看sql执行信息.html.vue"]]),t=JSON.parse('{"path":"/content/database/mysql/mysql%E4%B9%8Bexplain%E6%9F%A5%E7%9C%8Bsql%E6%89%A7%E8%A1%8C%E4%BF%A1%E6%81%AF.html","title":"mysql之explain查看sql执行信息","lang":"en-US","frontmatter":{"sidebar":false,"title":"mysql之explain查看sql执行信息","description":"mysql之explain查看sql执行信息"},"headers":[],"git":{},"filePathRelative":"content/database/mysql/mysql之explain查看sql执行信息.md"}');export{r as comp,t as data};
