import{_ as s,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>php之双重for循序下return和break的区别:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">int</span></span></span>
<span class="line">     *</span>
<span class="line">     * 下面的方法调用  如果是  return $val, 那么执行 test 方法，会得到 2； 如果是 break ,那么执行 test 方法，会得到 0；</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$a1</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$a2</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a2</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$a1</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token operator">==</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token variable">$val</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//                    break;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结: return 会结束所有的循环，而 break 只会结束当前循环</p>`,3)]))}const o=s(t,[["render",l],["__file","php之双重for循序下return和break的区别.html.vue"]]),r=JSON.parse('{"path":"/content/php/base/php%E4%B9%8B%E5%8F%8C%E9%87%8Dfor%E5%BE%AA%E5%BA%8F%E4%B8%8Breturn%E5%92%8Cbreak%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"php之双重for循序下return和break的区别","lang":"en-US","frontmatter":{"sidebar":false,"title":"php之双重for循序下return和break的区别","description":"php之双重for循序下return和break的区别"},"headers":[],"git":{},"filePathRelative":"content/php/base/php之双重for循序下return和break的区别.md"}');export{o as comp,r as data};
