import{_ as s,c as i,d as n,o as a}from"./app-CHrRue27.js";const t={};function d(l,e){return a(),i("div",null,e[0]||(e[0]=[n(`<p>git之本地版本回退，然后发改远程版本:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">回滚到指定提交版本:</span>
<span class="line">$ git reset --hard a14201ce5a455c3ad0aff1043772a5f8822449bc</span>
<span class="line">  </span>
<span class="line">回退之后，可以直接用本地版本覆盖远程:</span>
<span class="line">$ git push -f origin dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ git push -f origin dev:dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="两者的关系" tabindex="-1"><a class="header-anchor" href="#两者的关系"><span>两者的关系</span></a></h5><ul><li><p><strong><code>git push -f origin dev</code></strong> 省略了目标分支，等价于：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-f</span> origin dev:dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>也就是：把本地的 <strong><code>dev</code> 分支</strong> 推送到远程 <code>origin</code> 的 <strong><code>dev</code> 分支</strong>，并且强制覆盖。</p><ul><li><p><strong><code>git push -f origin 本地分支:远程分支</code></strong> 这种写法更灵活，比如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> push <span class="token parameter variable">-f</span> origin dev:feature-x</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>意思是：把本地的 <code>dev</code> 分支推到远程的 <code>feature-x</code> 分支（覆盖远程）。</p></li></ul><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><ul><li><code>git push -f origin dev</code> 👉 本地 <code>dev</code> → 远程 <code>dev</code>（强制覆盖）</li><li><code>git push -f origin dev:dev</code> 👉 完整写法，结果一样</li><li><code>git push -f origin dev:other-branch</code> 👉 本地 <code>dev</code> → 远程 <code>other-branch</code>（强制覆盖）</li></ul>`,10)]))}const c=s(t,[["render",d],["__file","git之本地版本回退，然后发改远程版本.html.vue"]]),o=JSON.parse('{"path":"/content/other/git/git%E4%B9%8B%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8F%91%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%89%88%E6%9C%AC.html","title":"git之本地版本回退，然后发改远程版本","lang":"en-US","frontmatter":{"sidebar":false,"title":"git之本地版本回退，然后发改远程版本","description":"git之本地版本回退，然后发改远程版本"},"headers":[],"git":{},"filePathRelative":"content/other/git/git之本地版本回退，然后发改远程版本.md"}');export{c as comp,o as data};
