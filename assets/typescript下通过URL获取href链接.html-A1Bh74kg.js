import{_ as e,c as a,d as n,o as t}from"./app-CHrRue27.js";const i={};function p(l,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h5 id="typescript下通过url获取href链接" tabindex="-1"><a class="header-anchor" href="#typescript下通过url获取href链接"><span>typescript下通过URL获取href链接</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">new URL(&quot;@/assets/images/without-doi.svg&quot;, import.meta.url).href</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>很好问题，来详细解释一下这段代码中的核心：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">new URL(&quot;@/assets/images/without-doi.svg&quot;, import.meta.url).href</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="✅-import-meta-url-是什么" tabindex="-1"><a class="header-anchor" href="#✅-import-meta-url-是什么"><span>✅ <code>import.meta.url</code> 是什么？</span></a></h3><p>在 <strong>Vite（Nuxt 3 默认构建工具）</strong> 中，<code>import.meta.url</code> 表示<strong>当前模块文件的完整 URL 路径</strong>。</p><p>例如，如果你有一个文件路径是：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">/src/components/DoiIcon.vue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在浏览器里运行时，<code>import.meta.url</code> 会变成类似这样的字符串：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://localhost:3000/src/components/DoiIcon.vue</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个 URL 是当前文件本身的路径。Vite 在构建时会保留这种模块路径。</p><hr><h3 id="✅-new-url-import-meta-url-的作用" tabindex="-1"><a class="header-anchor" href="#✅-new-url-import-meta-url-的作用"><span>✅ <code>new URL(..., import.meta.url)</code> 的作用</span></a></h3><p>这是 JS 原生的用法，表示<strong>根据当前模块的路径来解析另一个资源的相对路径</strong>，确保资源引用是正确的。</p><p>例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;@/assets/images/without-doi.svg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于 <code>@</code> 是 Nuxt 的路径别名，最终 Vite 会解析成类似：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;/src/assets/images/without-doi.svg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后将这个路径转换成正确的完整路径 URL，例如：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://localhost:3000/src/assets/images/without-doi.svg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>并通过 <code>.href</code> 获取到的是最终字符串形式的 URL。</p><hr><h3 id="✅-为什么不用-import-image-from-assets-images-xxx-svg" tabindex="-1"><a class="header-anchor" href="#✅-为什么不用-import-image-from-assets-images-xxx-svg"><span>✅ 为什么不用 <code>import image from &#39;@/assets/images/xxx.svg&#39;</code>？</span></a></h3><p>因为 <code>new URL(..., import.meta.url).href</code> 可以在 <strong>运行时动态拼接路径</strong>，而 <code>import ... from</code> 是编译时静态导入，不能拼接。</p><p>例如这个不能动态：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> icon <span class="token keyword">from</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@/assets/images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.svg</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span> <span class="token comment">// ❌ 不支持变量拼接</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而 <code>new URL</code> 是合法的：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> iconPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@/assets/images/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.svg</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结</span></a></h3><table><thead><tr><th>表达式</th><th>含义</th></tr></thead><tbody><tr><td><code>import.meta.url</code></td><td>当前模块的完整路径 URL</td></tr><tr><td><code>new URL(..., import.meta.url)</code></td><td>以当前模块为基准解析其他相对资源路径</td></tr><tr><td><code>.href</code></td><td>最终资源的字符串 URL，可用于 <code>&lt;img&gt;</code> 等</td></tr></tbody></table><hr><p>如你想支持更高级的 SVG 处理（如变色、内嵌），可以配合 Nuxt 的 <code>vite-svg-loader</code> 使用 <code>import icon from &#39;...svg?component&#39;</code>，那是另一个方向。需要我说明这部分吗？</p><hr><p>简单理解: mport.meta.url 就像是 “当前文件的 GPS 坐标” new URL(relativePath, import.meta.url) 就像是 “以这个 GPS 为参考点找其它文件”</p><hr><p>举个例子: 完全正确 ✅！</p><p>你可以这样理解：</p><hr><h3 id="🧭-import-meta-url-就像是-当前文件的-gps-坐标" tabindex="-1"><a class="header-anchor" href="#🧭-import-meta-url-就像是-当前文件的-gps-坐标"><span>🧭 <code>import.meta.url</code> 就像是 “当前文件的 GPS 坐标”</span></a></h3><p>它提供了你代码文件本身的完整 URL。</p><hr><h3 id="🧰-new-url-relativepath-import-meta-url-就像是-以这个-gps-为参考点找其它文件" tabindex="-1"><a class="header-anchor" href="#🧰-new-url-relativepath-import-meta-url-就像是-以这个-gps-为参考点找其它文件"><span>🧰 <code>new URL(relativePath, import.meta.url)</code> 就像是 “以这个 GPS 为参考点找其它文件”</span></a></h3><p>它会根据当前文件的路径去定位其它相对路径下的资源，比如 SVG 图片。</p><hr><h3 id="🌐-举个例子" tabindex="-1"><a class="header-anchor" href="#🌐-举个例子"><span>🌐 举个例子：</span></a></h3><p>假设你的文件结构如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">- src/</span>
<span class="line">  - components/</span>
<span class="line">    - DoiIcon.vue  ← 当前文件</span>
<span class="line">  - assets/</span>
<span class="line">    - images/</span>
<span class="line">      - without-doi.svg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>DoiIcon.vue</code> 中写：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;@/assets/images/without-doi.svg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Vite 会解析为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#39;/src/assets/images/without-doi.svg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;http://localhost:3000/src/components/DoiIcon.vue&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最终生成：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://localhost:3000/src/assets/images/without-doi.svg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="✅-用途总结" tabindex="-1"><a class="header-anchor" href="#✅-用途总结"><span>✅ 用途总结：</span></a></h3><ul><li>📍 <code>import.meta.url</code>: 确定“我在哪里”</li><li>🔗 <code>new URL(...)</code>: 找“我要用的资源在哪”</li><li>🔄 <code>.href</code>: 拿到这个资源的最终 URL 字符串，可用于 <code>&lt;img&gt;</code> 等 HTML 属性</li></ul><hr><p>如果你将来图片改为放 CDN 或从后端接口返回路径，也可以用这个方式临时加载本地资源进行过渡或占位，非常灵活。需要我帮你封装一个 <code>useDoiIcon(props.item)</code> 的小组合函数也可以。</p>`,60)]))}const o=e(i,[["render",p],["__file","typescript下通过URL获取href链接.html.vue"]]),c=JSON.parse(`{"path":"/content/front/js/typescript%E4%B8%8B%E9%80%9A%E8%BF%87URL%E8%8E%B7%E5%8F%96href%E9%93%BE%E6%8E%A5.html","title":"typescript下通过URL获取href链接","lang":"en-US","frontmatter":{"sidebar":false,"title":"typescript下通过URL获取href链接","head":[["meta",{"name":"title","content":"typescript下通过URL获取href链接"}],["meta",{"name":"description","content":"typescript下通过URL获取href链接"}],["meta",{"name":"keywords","content":"typescript,vue3"}],["meta",{"property":"og:title","content":"typescript下通过URL获取href链接"}],["meta",{"property":"og:description","content":"typescript下通过URL获取href链接"}]]},"headers":[{"level":3,"title":"✅ import.meta.url 是什么？","slug":"✅-import-meta-url-是什么","link":"#✅-import-meta-url-是什么","children":[]},{"level":3,"title":"✅ new URL(..., import.meta.url) 的作用","slug":"✅-new-url-import-meta-url-的作用","link":"#✅-new-url-import-meta-url-的作用","children":[]},{"level":3,"title":"✅ 为什么不用 import image from '@/assets/images/xxx.svg'？","slug":"✅-为什么不用-import-image-from-assets-images-xxx-svg","link":"#✅-为什么不用-import-image-from-assets-images-xxx-svg","children":[]},{"level":3,"title":"✅ 总结","slug":"✅-总结","link":"#✅-总结","children":[]},{"level":3,"title":"🧭 import.meta.url 就像是 “当前文件的 GPS 坐标”","slug":"🧭-import-meta-url-就像是-当前文件的-gps-坐标","link":"#🧭-import-meta-url-就像是-当前文件的-gps-坐标","children":[]},{"level":3,"title":"🧰 new URL(relativePath, import.meta.url) 就像是 “以这个 GPS 为参考点找其它文件”","slug":"🧰-new-url-relativepath-import-meta-url-就像是-以这个-gps-为参考点找其它文件","link":"#🧰-new-url-relativepath-import-meta-url-就像是-以这个-gps-为参考点找其它文件","children":[]},{"level":3,"title":"🌐 举个例子：","slug":"🌐-举个例子","link":"#🌐-举个例子","children":[]},{"level":3,"title":"✅ 用途总结：","slug":"✅-用途总结","link":"#✅-用途总结","children":[]}],"git":{},"filePathRelative":"content/front/js/typescript下通过URL获取href链接.md"}`);export{o as comp,c as data};
