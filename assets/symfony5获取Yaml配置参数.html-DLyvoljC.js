import{_ as s,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>如何获取app/config/services.yaml的配置文件内容</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. Include the ParameterBagInterface class</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>DependencyInjection<span class="token punctuation">\\</span>ParameterBag<span class="token punctuation">\\</span>ParameterBagInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. Basically what we do is autoinject the ParameterBagInterface as argument</span></span>
<span class="line"><span class="token comment">//    inside the method where you need to obtain a parameter from the services.yaml file</span></span>
<span class="line"><span class="token comment">//    and then, using the get method you can retrieve a specific parameter.</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">ParameterBagInterface</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$uploadsDirectory</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;uploads_directory&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ... or retrieve them all with $params-&gt;all()</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const i=s(t,[["render",l],["__file","symfony5获取Yaml配置参数.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony5%E8%8E%B7%E5%8F%96Yaml%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0.html","title":"symfony5获取Yaml配置参数","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony5获取Yaml配置参数","description":"symfony5获取Yaml配置参数"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony5获取Yaml配置参数.md"}');export{i as comp,r as data};
