import{_ as s,c as e,d as i,o as l}from"./app-CHrRue27.js";const a={};function c(d,n){return l(),e("div",null,n[0]||(n[0]=[i('<p>docker_compose加载环境变量env文件:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">和docker-compose.yml文件同级的 .env文件会被自动加载:</span>\n<span class="line">关于 `.env` 文件的自动加载，有几点需要说明：</span>\n<span class="line">  </span>\n<span class="line">1. Docker Compose 默认行为:</span>\n<span class="line">Docker Compose 默认会查找并使用当前目录下的 `.env` 文件。这意味着在大多数情况下，你不需要明确指定 `--env-file .env`。</span>\n<span class="line">  </span>\n<span class="line">2. 自动加载:</span>\n<span class="line">- 当你运行 `docker-compose up` 或其他 Docker Compose 命令时，它会自动寻找并加载同目录下的 `.env` 文件。</span>\n<span class="line">- 这个过程是自动的，你不需要额外的配置来使其工作。</span>\n<span class="line">  </span>\n<span class="line">3. 优先级:</span>\n<span class="line">- 环境变量的加载有一定的优先级：命令行中设置的变量 &gt; 环境中已存在的变量 &gt; `.env` 文件中的变量。</span>\n<span class="line">- 这意味着 `.env` 文件中的变量可以被其他方式设置的同名变量覆盖。</span>\n<span class="line">  </span>\n<span class="line">4. 确保加载:</span>\n<span class="line">虽然通常不需要，但如果你想确保使用特定的 `.env` 文件，可以使用 `--env-file` 选项：</span>\n<span class="line">  </span>\n<span class="line">docker-compose --env-file .env up -d</span>\n<span class="line">  </span>\n<span class="line">5. 在 Compose 文件中引用:</span>\n<span class="line">你可以在 `docker-compose.yml` 文件中直接引用 `.env` 文件中定义的变量，使用 `${VARIABLE_NAME}` 语法。</span>\n<span class="line">  </span>\n<span class="line">6. 注意事项:</span>\n<span class="line">- 确保 `.env` 文件和 `docker-compose.yml` 文件在同一目录下。</span>\n<span class="line">- `.env` 文件应该被包含在你的 `.gitignore` 文件中，以避免敏感信息被提交到版本控制系统。</span>\n<span class="line">  </span>\n<span class="line">总结来说，是的，`.env` 文件通常会被 Docker Compose 自动加载和使用，无需特殊配置。只要确保文件位置正确，并且变量名在 `docker-compose.yml` 中正确引用即可。</span>\n<span class="line">  </span>\n<span class="line">如果你在实践中发现环境变量没有正确加载，可以尝试以下调试步骤：</span>\n<span class="line">1. 使用 `docker-compose config` 命令查看解析后的配置，确认变量是否被正确替换。</span>\n<span class="line">2. 在 `docker-compose.yml` 中的某个服务下添加 `env_file: .env` 来明确指定使用 `.env` 文件。</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2)]))}const v=s(a,[["render",c],["__file","docker_compose加载环境变量env文件.html.vue"]]),o=JSON.parse('{"path":"/content/service/docker/docker_compose%E5%8A%A0%E8%BD%BD%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fenv%E6%96%87%E4%BB%B6.html","title":"docker_compose加载配置文件","lang":"en-US","frontmatter":{"sidebar":false,"title":"docker_compose加载配置文件","description":"docker_compose加载配置文件"},"headers":[],"git":{},"filePathRelative":"content/service/docker/docker_compose加载环境变量env文件.md"}');export{v as comp,o as data};
