import{_ as a,c as n,d as s,o as l}from"./app-CHrRue27.js";const i={};function t(d,e){return l(),n("div",null,e[0]||(e[0]=[s(`<p>makefile的相关介绍:</p><blockquote></blockquote><p><code>Makefile</code> 是用于自动化构建过程的文件，通过它可以定义各种编译规则、文件依赖和操作指令。<code>Makefile</code> 主要由构建工具 <code>make</code> 使用，通常用于编译程序，但也可以被用来处理任何其他任务，比如测试、打包、文档生成等。</p><p>一个典型的 <code>Makefile</code> 的结构包括目标（target）、依赖（dependencies）和命令（command），它们一般长这样：</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token target symbol">target</span><span class="token punctuation">:</span> dependencies</span>
<span class="line">    command</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>Makefile</code> 的主要功能：</p><ol><li><p><strong>自动化构建</strong>：通过 <code>Makefile</code> 可以自动化地进行代码编译，避免手动输入复杂的编译命令。</p></li><li><p><strong>管理依赖</strong>：<code>Makefile</code> 可以检查源文件是否发生更改，并仅重新编译那些受影响的文件，提高构建效率。</p></li><li><p><strong>执行自定义任务</strong>：<code>Makefile</code> 可以用于构建、清理、测试、部署等任务，通过 <code>make clean</code>、<code>make test</code> 等命令执行。</p></li><li><p><strong>跨平台支持</strong>：虽然具体的 <code>Makefile</code> 可能需要针对不同平台做调整，但它提供了一个基础的跨平台构建方案，特别适用于 UNIX 系统。</p></li></ol><p>使用参考手册: https://makefiletutorial.com/ //非官方</p><p>定义一个makefile: Makefile 文件通常直接命名为 Makefile（首字母大写，没有文件扩展名），这是约定俗成的命名方式。这样命名后，只需在项目根目录下执行 make 命令即可自动找到并执行 Makefile 文件中的默认任务（即第一个定义的目标）。 如果 Makefile 文件的名称不同于默认的 Makefile，可以使用 -f 选项指定文件名：make -f Makefile.dev</p><p>使用案例: 下面是一个典型的 Go 项目 Makefile，包括构建、运行、测试和清理等命令：</p><h5 id="定义变量" tabindex="-1"><a class="header-anchor" href="#定义变量"><span>定义变量</span></a></h5><p>APP_NAME = myapp VERSION = 1.0.0 BUILD_DIR = build</p><h5 id="默认目标" tabindex="-1"><a class="header-anchor" href="#默认目标"><span>默认目标</span></a></h5><p>.PHONY: all all: build</p><h5 id="编译项目" tabindex="-1"><a class="header-anchor" href="#编译项目"><span>编译项目</span></a></h5><p>.PHONY: build build: go build -o $(BUILD_DIR)/$(APP_NAME) main.go</p><h5 id="运行项目" tabindex="-1"><a class="header-anchor" href="#运行项目"><span>运行项目</span></a></h5><p>.PHONY: run run: go run main.go</p><h5 id="执行测试" tabindex="-1"><a class="header-anchor" href="#执行测试"><span>执行测试</span></a></h5><p>.PHONY: test test: go test ./...</p><h5 id="清理构建文件" tabindex="-1"><a class="header-anchor" href="#清理构建文件"><span>清理构建文件</span></a></h5><p>.PHONY: clean clean: rm -rf $(BUILD_DIR)</p><h5 id="代码检查和格式化" tabindex="-1"><a class="header-anchor" href="#代码检查和格式化"><span>代码检查和格式化</span></a></h5><p>.PHONY: lint lint: go vet ./... golint ./...</p><p>在此例中，<code>make</code> 会根据 <code>Makefile</code> 自动化地编译程序，<code>make clean</code> 则可以清理生成的文件。 在这个 Makefile 中，你可以使用以下命令： make build：编译项目，生成二进制文件。 make run：直接运行项目。 make test：执行测试。 make clean：清理构建文件。 make lint：执行代码检查和格式化。</p><p>当然在项目根目录中打开终端，运行以下命令来执行 Makefile 中的默认目标： make //不加任何额外命令, 如果想执行特定目标，例如 build 或 test，可以在 make 命令后指定目标名称, 如上所展示的内容.</p><p>关于默认目标的定义: 在 <code>Makefile</code> 中，默认目标通常是第一个定义的目标。这个目标会在直接运行 <code>make</code> 时自动执行，所以通常将最常用或核心的任务作为第一个目标，例如 <code>all</code>、<code>build</code> 或 <code>default</code>。</p><h5 id="常见的默认目标" tabindex="-1"><a class="header-anchor" href="#常见的默认目标"><span>常见的默认目标</span></a></h5><ol><li><p><strong><code>all</code></strong>：最常见的默认目标，通常用于执行一系列任务（如构建、测试、代码检查等）。</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> all</span>
<span class="line"><span class="token target symbol">all</span><span class="token punctuation">:</span> build test lint</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>build</code></strong>：直接将构建任务作为默认目标，如果构建是项目的核心操作。</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> build</span>
<span class="line"><span class="token target symbol">build</span><span class="token punctuation">:</span></span>
<span class="line">    go build -o myapp main.go</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>default</code></strong>：有些开发者会使用 <code>default</code> 作为默认目标的名称，效果与 <code>all</code> 类似，但这不是一种通用惯例。</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> default</span>
<span class="line"><span class="token target symbol">default</span><span class="token punctuation">:</span> build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h5 id="如何选择默认目标" tabindex="-1"><a class="header-anchor" href="#如何选择默认目标"><span>如何选择默认目标</span></a></h5><ul><li><strong>小型项目</strong>：一般选择 <code>build</code> 或 <code>run</code> 作为默认目标。</li><li><strong>中大型项目</strong>：使用 <code>all</code> 作为默认目标，并在其中包含多个任务，例如构建、测试、代码检查等。</li></ul><p>例如：</p><div class="language-makefile line-numbers-mode" data-highlighter="prismjs" data-ext="makefile" data-title="makefile"><pre><code><span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> all</span>
<span class="line"><span class="token target symbol">all</span><span class="token punctuation">:</span> build test lint</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> build</span>
<span class="line"><span class="token target symbol">build</span><span class="token punctuation">:</span></span>
<span class="line">    go build -o myapp main.go</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> test</span>
<span class="line"><span class="token target symbol">test</span><span class="token punctuation">:</span></span>
<span class="line">    go test ./...</span>
<span class="line"></span>
<span class="line"><span class="token builtin-target builtin">.PHONY</span><span class="token punctuation">:</span> lint</span>
<span class="line"><span class="token target symbol">lint</span><span class="token punctuation">:</span></span>
<span class="line">    go vet ./...</span>
<span class="line">    golint ./...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接执行 <code>make</code> 时，默认会先运行 <code>all</code> 目标，然后依次执行 <code>build</code>、<code>test</code> 和 <code>lint</code>。</p><p>.PHONY 用于声明伪目标（phony targets），即标识某些目标不是实际文件，而是任务名称。这样可以避免 make 把目标名称当作文件来处理，提高任务执行的可靠性和性能。</p>`,35)]))}const c=a(i,[["render",t],["__file","makefile的相关介绍.html.vue"]]),o=JSON.parse('{"path":"/content/other/spread/makefile%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D.html","title":"makefile的相关介绍","lang":"en-US","frontmatter":{"sidebar":false,"title":"makefile的相关介绍","description":"makefile的相关介绍"},"headers":[],"git":{},"filePathRelative":"content/other/spread/makefile的相关介绍.md"}');export{c as comp,o as data};
