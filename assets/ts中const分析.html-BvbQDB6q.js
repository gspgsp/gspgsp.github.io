import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function o(c,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>ts中const分析:</p><p>例子：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">const timezonesMap = {</span>
<span class="line">  1: &quot;Europe/Berlin&quot;,</span>
<span class="line">  2: &quot;America/New_York&quot;,</span>
<span class="line">  3: &quot;Asia/Shanghai&quot;</span>
<span class="line">} as const;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.在 TypeScript 中，<code>as const</code> 是一种常见的类型断言，它用于将一个对象的 <strong>字面量值</strong> 转换为一个 <strong>更具体的类型</strong>，而不仅仅是其类型的宽泛表示。</p><p>你提到的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>as const</code> 是必须的，因为它会改变 <code>timezonesMap</code> 的类型推断，确保 TypeScript 将对象的值保持为字面量类型，而不是更宽泛的类型。让我们逐步分析一下：</p><h3 id="_1-const-关键字的作用" tabindex="-1"><a class="header-anchor" href="#_1-const-关键字的作用"><span>1. <code>const</code> 关键字的作用</span></a></h3><p>使用 <code>const</code> 声明的变量会使该变量 <strong>不可重新赋值</strong>，即它是常量。但它不会影响对象的 <strong>属性类型</strong>。即使你用 <code>const</code> 声明一个对象，TypeScript 依然会将该对象的值推断为 <strong>可变的类型</strong>，例如字符串。</p><h4 id="没有-as-const-的情况" tabindex="-1"><a class="header-anchor" href="#没有-as-const-的情况"><span>没有 <code>as const</code> 的情况</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 会推断出 <code>timezonesMap</code> 的类型如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着 <code>timezonesMap[1]</code> 可以是任何字符串，而不是限定为 <code>&quot;Europe/Berlin&quot;</code>。它会推断为一个 <strong>宽泛的 <code>string</code> 类型</strong>。</p><h3 id="_2-as-const-的作用" tabindex="-1"><a class="header-anchor" href="#_2-as-const-的作用"><span>2. <code>as const</code> 的作用</span></a></h3><p>当你添加 <code>as const</code> 后，TypeScript 会将 <code>timezonesMap</code> 中的所有属性值的类型推断为 <strong>字面量类型</strong>，而不是 <code>string</code> 类型。这就使得每个属性的类型更加精确，变成了具体的字符串值。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，<code>timezonesMap</code> 的类型将被推断为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这意味着 <code>timezonesMap[1]</code> 的类型是 <code>&quot;Europe/Berlin&quot;</code>，<code>timezonesMap[2]</code> 的类型是 <code>&quot;America/New_York&quot;</code>，而不是通用的 <code>string</code> 类型。</p><h3 id="_3-为什么需要-as-const" tabindex="-1"><a class="header-anchor" href="#_3-为什么需要-as-const"><span>3. 为什么需要 <code>as const</code>？</span></a></h3><ul><li><strong>没有 <code>as const</code></strong>：对象的值会被推断为更宽泛的类型（例如 <code>string</code>），允许你将任何字符串赋给这些属性。</li><li><strong>使用 <code>as const</code></strong>：对象的值会被推断为字面量类型，这样可以确保值的精确性，并避免值被误用为其他类型。</li></ul><h3 id="示例对比" tabindex="-1"><a class="header-anchor" href="#示例对比"><span>示例对比</span></a></h3><h4 id="没有-as-const-普通的-const" tabindex="-1"><a class="header-anchor" href="#没有-as-const-普通的-const"><span>没有 <code>as const</code>（普通的 <code>const</code>）</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这里 timezonesMap[1] 被推断为 string 类型</span></span>
<span class="line">timezonesMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Europe/Paris&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 这是允许的，因为它的类型是 string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-as-const" tabindex="-1"><a class="header-anchor" href="#使用-as-const"><span>使用 <code>as const</code></span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">const</span> timezonesMap <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&quot;Europe/Berlin&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&quot;America/New_York&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">&quot;Asia/Shanghai&quot;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这里 timezonesMap[1] 被推断为 &quot;Europe/Berlin&quot; 字面量类型</span></span>
<span class="line">timezonesMap<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Europe/Paris&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 这是错误的，因为类型是 &quot;Europe/Berlin&quot;，不能赋值为其他字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p><code>as const</code> 的作用是让 TypeScript 更严格地推断对象的属性类型，并使属性值保持字面量类型，而不是推断为更宽泛的类型（如 <code>string</code>）。这样做的好处是能够在类型层面确保值的准确性和可预测性，避免赋值错误。</p><p>2.对于 const timezonesMap 是不可变的， const 使得变量 不可重新赋值，但它并不会使对象的属性变成 不可变。在 TypeScript 中，const 关键字只是确保变量本身不可重新赋值，而不会影响该对象的内部结构或属性类型。</p><p>3.as const 和 const 是两个不同的概念，目的也不同： const 让变量不可重新赋值，但不会影响对象的属性类型。 as const 会将对象的属性值的类型转为字面量类型（literal type），从而使得对象的属性值更加严格，不能再随意修改成其他值。</p>`,31)]))}const l=n(p,[["render",o],["__file","ts中const分析.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/ts%E4%B8%ADconst%E5%88%86%E6%9E%90.html","title":"ts中const分析","lang":"en-US","frontmatter":{"sidebar":false,"title":"ts中const分析","description":"ts中const分析"},"headers":[{"level":3,"title":"1. const 关键字的作用","slug":"_1-const-关键字的作用","link":"#_1-const-关键字的作用","children":[]},{"level":3,"title":"2. as const 的作用","slug":"_2-as-const-的作用","link":"#_2-as-const-的作用","children":[]},{"level":3,"title":"3. 为什么需要 as const？","slug":"_3-为什么需要-as-const","link":"#_3-为什么需要-as-const","children":[]},{"level":3,"title":"示例对比","slug":"示例对比","link":"#示例对比","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"content/front/js/ts中const分析.md"}');export{l as comp,r as data};
