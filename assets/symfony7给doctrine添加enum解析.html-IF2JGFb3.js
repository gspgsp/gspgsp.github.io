import{_ as s,c as e,d as a,o as t}from"./app-CHrRue27.js";const c={};function o(i,n){return t(),e("div",null,n[0]||(n[0]=[a(`<p>symfony7中使用enum类型, 为什么需要如下的配置，那是因为默认doctrine不支持enum类型，需要这么一个映射配置:</p><p>1&gt;配置 <code>mapping_types</code> 中的 <code>enum</code> 为 <code>string</code> 在 Doctrine 和 Symfony 中处理 <code>ENUM</code> 类型字段时是一个常见做法，因为它允许 Doctrine 将数据库中的 <code>ENUM</code> 类型映射为 PHP 中的字符串类型，并正常操作该字段的值。</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">doctrine</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">dbal</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">connections</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">default</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># 其他 DB 配置</span></span>
<span class="line">                <span class="token key atrule">mapping_types</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token key atrule">enum</span><span class="token punctuation">:</span> string</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="作用详解" tabindex="-1"><a class="header-anchor" href="#作用详解"><span>作用详解</span></a></h5><p>在这种配置下，Doctrine 会将 MySQL 中的 <code>ENUM</code> 类型映射为 <code>string</code>，这样您可以在代码中直接以字符串的形式读取和操作 <code>ENUM</code> 字段，而不必自定义 Doctrine 类型来专门支持 <code>ENUM</code>。这一设置将自动应用于所有包含 <code>ENUM</code> 类型的字段，不会影响现有的字段操作。</p><h5 id="配合-columndefinition-使用" tabindex="-1"><a class="header-anchor" href="#配合-columndefinition-使用"><span>配合 <code>columnDefinition</code> 使用</span></a></h5><p>当您在实体中用 <code>columnDefinition</code> 定义 <code>ENUM</code> 字段类型时：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">columnDefinition</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;ENUM(&#39;Single-line text&#39;, &#39;Multi-line text&#39;, &#39;Single choice&#39;, &#39;Multiple choices&#39;)&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$title</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Doctrine 会在数据库中将 <code>title</code> 字段创建为 <code>ENUM</code> 类型，同时，在 PHP 中该字段的类型为 <code>string</code>。通过 <code>mapping_types</code> 配置的映射关系，Doctrine 能够识别数据库中的 <code>ENUM</code> 并将其当作 <code>string</code> 处理，不会导致类型不兼容的问题。</p><h5 id="这样配置的好处" tabindex="-1"><a class="header-anchor" href="#这样配置的好处"><span>这样配置的好处</span></a></h5><ul><li><strong>无需额外类型定义</strong>：避免为 <code>ENUM</code> 创建自定义 Doctrine 类型。</li><li><strong>数据库兼容性</strong>：适用于使用 MySQL 数据库的项目，保持数据库层面的数据约束。</li><li><strong>便捷操作</strong>：在代码中直接以 <code>string</code> 类型操作 <code>ENUM</code> 字段的值，符合 PHP 的使用习惯。</li></ul><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><p>配置 <code>mapping_types</code> 来将 <code>enum</code> 映射为 <code>string</code>，可以让您在 Symfony 和 Doctrine 中轻松地定义和操作数据库的 <code>ENUM</code> 字段，且不会丢失数据库约束。</p><p>2&gt;在 Symfony 7 和 Doctrine 中，您可以使用 <code>columnDefinition</code> 来为 <code>enum</code> 字段定义自定义的 SQL 类型。以下是这个定义的作用和相关注意事项：</p><h5 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h5><p>通过以下定义：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">ORM<span class="token punctuation">\\</span>Column</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">type</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">columnDefinition</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">&quot;ENUM(&#39;Single-line text&#39;, &#39;Multi-line text&#39;, &#39;Single choice&#39;, &#39;Multiple choices&#39;)&quot;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword type-declaration">string</span> <span class="token variable">$title</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>您为 <code>title</code> 字段指定了一个 <code>ENUM</code> 数据类型，这样做会在数据库中直接创建一个 <code>ENUM</code> 类型的字段，其可选值为 <code>&#39;Single-line text&#39;</code>, <code>&#39;Multi-line text&#39;</code>, <code>&#39;Single choice&#39;</code>, <code>&#39;Multiple choices&#39;</code>。字段在数据库层面上将被限制为这些值，任何其他值都会导致数据库约束错误。</p><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h5><ol><li><p><strong>直接定义 ENUM</strong>：</p><ul><li>使用 <code>columnDefinition</code> 定义 <code>ENUM</code> 类型，能够利用数据库的原生 <code>ENUM</code> 特性，实现更严格的数据约束。</li><li>这种方式不会影响 Doctrine 实体的使用，您可以直接读取和设置 <code>title</code> 字段为字符串值，例如 <code>$title = &#39;Single-line text&#39;</code>。</li></ul></li><li><p><strong>数据库兼容性</strong>：</p><ul><li><code>ENUM</code> 类型是 MySQL 的特性，如果您的项目需要支持其他数据库（如 PostgreSQL、SQLite），则此配置可能会导致兼容性问题，因为其他数据库可能不支持 <code>ENUM</code> 或实现方式不同。</li><li>如果有跨数据库需求，建议使用 <code>VARCHAR</code> 类型加上代码级别的校验。</li></ul></li><li><p><strong>更新迁移</strong>：</p><ul><li>如果以后需要增加或修改 <code>ENUM</code> 的选项，您需要手动更新数据库列。Doctrine 的自动迁移工具（如 <code>doctrine:migrations:diff</code>）可能不会自动检测 <code>ENUM</code> 选项的变化，您可能需要编写自定义 SQL 语句来更新这些选项。</li></ul></li><li><p><strong>使用代码校验（可选）</strong>：</p><ul><li>虽然数据库会约束 <code>title</code> 字段的值，但在应用层面，也可以在 Symfony 实体中进行值校验，防止在到达数据库之前写入不符合 <code>ENUM</code> 定义的值。</li></ul></li></ol><h5 id="示例用法" tabindex="-1"><a class="header-anchor" href="#示例用法"><span>示例用法</span></a></h5><p>在应用中，您可以正常读取和设置 <code>title</code> 字段的值：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Single choice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">echo</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Single choice</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样使用可以很好地将数据库约束和代码逻辑结合起来，以确保数据一致性和正确性。</p>`,24)]))}const l=s(c,[["render",o],["__file","symfony7给doctrine添加enum解析.html.vue"]]),d=JSON.parse('{"path":"/content/php/symfony/symfony7%E7%BB%99doctrine%E6%B7%BB%E5%8A%A0enum%E8%A7%A3%E6%9E%90.html","title":"symfony7给doctrine添加enum解析","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7给doctrine添加enum解析","description":"symfony7给doctrine添加enum解析"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony7给doctrine添加enum解析.md"}');export{l as comp,d as data};
