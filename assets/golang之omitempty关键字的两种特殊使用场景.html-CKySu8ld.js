import{_ as s,c as a,d as t,o as p}from"./app-CHrRue27.js";const e={};function o(l,n){return p(),a("div",null,n[0]||(n[0]=[t(`<p>golang之omitempty关键字的两种特殊使用场景:</p><ul><li>问题 golang在处理json转换时，对于标签omitempty定义的field，如果给它赋得值恰好<br> 等于空值（比如：false、0、&quot;&quot;、nil指针、nil接口、长度为0的数组、切片、映射），<br> 则在转为json之后不会输出这个field。那么，针对结构体中嵌套结构体，如果嵌套结构<br> 体为空，是否也会忽略？如果要忽略空结构体输出，怎么处理？</li></ul><p>实际使用过程中，针对结构体中嵌套结构体，如果嵌套结构体为空，默认不会忽略，会输出一个空的对象</p><ul><li>情况一：匿名结构体：使用omitempty修饰该匿名结构体中的字段，那么当为空时不会输出</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Book <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line">	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span></span>
<span class="line">	Price <span class="token builtin">float32</span> <span class="token string">\`json:&quot;price&quot;\`</span></span>
<span class="line">	Desc <span class="token builtin">string</span> <span class="token string">\`json:&quot;desc,omitempty&quot;\`</span></span>
<span class="line">	Author <span class="token comment">//匿名结构体</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Gender <span class="token builtin">int</span> <span class="token string">\`json:&quot;gender,omitempty&quot;\`</span></span>
<span class="line">	Age <span class="token builtin">int</span> <span class="token string">\`json:&quot;age,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> book Book</span>
<span class="line">	book<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;testBook&quot;</span></span>
<span class="line">	bookByte<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>bookByte<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">输出：</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;testBook&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>情况二：非匿名结构体</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">type</span> Book <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line">	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span></span>
<span class="line">	Price <span class="token builtin">float32</span> <span class="token string">\`json:&quot;price&quot;\`</span></span>
<span class="line">	Desc <span class="token builtin">string</span> <span class="token string">\`json:&quot;desc,omitempty&quot;\`</span></span>
<span class="line">	Author Author <span class="token string">\`json:&quot;author,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Gender <span class="token builtin">int</span> <span class="token string">\`json:&quot;gender,omitempty&quot;\`</span></span>
<span class="line">	Age <span class="token builtin">int</span> <span class="token string">\`json:&quot;age,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> book Book</span>
<span class="line">	book<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;testBook&quot;</span></span>
<span class="line">	bookByte<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>bookByte<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">输出：</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;testBook&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">可以发现，没有给嵌套结构体赋值时，会打印该嵌套结构体的空结构体。这是因为该空结构体不属于omitempty能识别的空值（<span class="token boolean">false</span>、<span class="token number">0</span>、<span class="token string">&quot;&quot;</span>、<span class="token boolean">nil</span>指针、<span class="token boolean">nil</span>接口、长度为<span class="token number">0</span>的数组、切片、映射）。但若期望该嵌套结构体的空结构体也不会输出，可以通过指针实现。</span>
<span class="line">  </span>
<span class="line"><span class="token keyword">type</span> Book <span class="token keyword">struct</span><span class="token punctuation">{</span></span>
<span class="line">	Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;name&quot;\`</span></span>
<span class="line">	Price <span class="token builtin">float32</span> <span class="token string">\`json:&quot;price&quot;\`</span></span>
<span class="line">	Desc <span class="token builtin">string</span> <span class="token string">\`json:&quot;desc,omitempty&quot;\`</span></span>
<span class="line">	Author <span class="token operator">*</span>Author <span class="token string">\`json:&quot;author,omitempty&quot;\`</span> <span class="token comment">//这里加上指针类型，但是后面给这个这个指针元素赋值的时候需要(*Author).Age = xxx</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> Author <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">	Gender <span class="token builtin">int</span> <span class="token string">\`json:&quot;gender&quot;\`</span></span>
<span class="line">	Age <span class="token builtin">int</span> <span class="token string">\`json:&quot;age&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> book Book</span>
<span class="line">	book<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;testBook&quot;</span></span>
<span class="line">	bookByte<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>bookByte<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">输出：</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;testBook&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;price&quot;</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际开发过程中，我使用的是第二种场景，因为给前端API返回的数据，经常会有嵌套的情况，但是这个 Author 需要先初始化，不然会报错 nil pointer</p>`,8)]))}const c=s(e,[["render",o],["__file","golang之omitempty关键字的两种特殊使用场景.html.vue"]]),u=JSON.parse('{"path":"/content/go/base/golang%E4%B9%8Bomitempty%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%89%B9%E6%AE%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"golang之omitempty关键字的两种特殊使用场景","lang":"en-US","frontmatter":{"sidebar":false,"title":"golang之omitempty关键字的两种特殊使用场景","description":"golang之omitempty关键字的两种特殊使用场景"},"headers":[],"git":{},"filePathRelative":"content/go/base/golang之omitempty关键字的两种特殊使用场景.md"}');export{c as comp,u as data};
