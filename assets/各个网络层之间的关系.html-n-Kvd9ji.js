import{_ as i,c as s,d as e,o as n}from"./app-CHrRue27.js";const t={};function a(r,l){return n(),s("div",null,l[0]||(l[0]=[e(`<h3 id="各个网络层之间的关系" tabindex="-1"><a class="header-anchor" href="#各个网络层之间的关系"><span>各个网络层之间的关系</span></a></h3><p>从 <strong>OSI 七层模型</strong> 和 <strong>TCP/IP 四层模型</strong> 两个视角对比，再结合 HTTP / MySQL / TCP 来理解。</p><h4 id="_1-osi-七层模型" tabindex="-1"><a class="header-anchor" href="#_1-osi-七层模型"><span>1. OSI 七层模型</span></a></h4><p>理论模型，分为 7 层，每层只和相邻层交互：</p><ol><li><p><strong>应用层</strong></p><ul><li>直接面对用户，定义应用协议。</li><li>例子：HTTP、FTP、SMTP、MySQL 协议。</li></ul></li><li><p><strong>表示层</strong></p><ul><li>数据表示、加密解密、压缩。</li><li>例子：TLS/SSL（HTTPS 就用它）。</li></ul></li><li><p><strong>会话层</strong></p><ul><li>建立、管理、终止会话。</li><li>例子：RPC、SQL 会话管理。</li></ul></li><li><p><strong>传输层</strong></p><ul><li>端到端传输、错误检测、流量控制。</li><li>例子：TCP（可靠）、UDP（不可靠）。</li></ul></li><li><p><strong>网络层</strong></p><ul><li>负责寻址和路由。</li><li>例子：IP 协议。</li></ul></li><li><p><strong>数据链路层</strong></p><ul><li>在同一个局域网（直连节点）传输帧。</li><li>例子：以太网、Wi-Fi、PPP。</li></ul></li><li><p><strong>物理层</strong></p><ul><li>真实比特流传输。</li><li>例子：光纤、电缆、无线电波。</li></ul></li></ol><h4 id="_2-tcp-ip-四层模型-工程实践" tabindex="-1"><a class="header-anchor" href="#_2-tcp-ip-四层模型-工程实践"><span>2. TCP/IP 四层模型（工程实践）</span></a></h4><p>实际使用时，常简化为四层：</p><ol><li><p><strong>应用层</strong>（对应 OSI 应用+表示+会话层）</p><ul><li>HTTP、MySQL、DNS、SSH …</li></ul></li><li><p><strong>传输层</strong></p><ul><li>TCP、UDP</li></ul></li><li><p><strong>网络层</strong></p><ul><li>IP</li></ul></li><li><p><strong>网络接口层</strong>（对应 OSI 数据链路+物理层）</p><ul><li>以太网、Wi-Fi、光纤、电缆</li></ul></li></ol><h4 id="_3-各层关系-以-php-访问-mysql-举例" tabindex="-1"><a class="header-anchor" href="#_3-各层关系-以-php-访问-mysql-举例"><span>3. 各层关系（以 PHP 访问 MySQL 举例）</span></a></h4><ul><li><p><strong>应用层</strong></p><ul><li>协议：MySQL 协议（定义握手、认证、SQL 命令格式）</li><li>参与者：PHP <code>mysqli</code> / <code>PDO</code> 驱动，MySQL Server</li></ul></li><li><p><strong>传输层</strong></p><ul><li>协议：TCP</li><li>功能：提供可靠的数据流，让 MySQL 协议的报文不丢失、不乱序</li></ul></li><li><p><strong>网络层</strong></p><ul><li>协议：IP</li><li>功能：把数据从客户端主机路由到服务器主机</li></ul></li><li><p><strong>链路/物理层</strong></p><ul><li>协议：以太网帧、光纤、Wi-Fi</li><li>功能：真正传输 0 和 1</li></ul></li></ul><h4 id="_4-层与层的协作关系" tabindex="-1"><a class="header-anchor" href="#_4-层与层的协作关系"><span>4. 层与层的协作关系</span></a></h4><ol><li><p><strong>上层依赖下层</strong></p><ul><li>HTTP/MySQL 不需要关心数据怎么走，只要 TCP 能保证可靠性就行。</li><li>TCP 不需要关心数据怎么到对方，只要 IP 能正确路由就行。</li></ul></li><li><p><strong>封装（Encapsulation）</strong></p><ul><li><p>每一层的数据都会被下一层“打包”。</p></li><li><p>例子：</p><ul><li>应用层报文 → 加 TCP 头 → TCP 段</li><li>TCP 段 → 加 IP 头 → IP 包</li><li>IP 包 → 加以太网头 → 数据帧</li></ul></li></ul></li><li><p><strong>解封装（Decapsulation）</strong></p><ul><li>服务器收到数据后，反向剥开：物理层 → 数据链路层 → 网络层 → 传输层 → 应用层。</li></ul></li></ol><hr><h4 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h4><ul><li><strong>TCP/IP 是分层设计的</strong>，各层只需关注本职工作。</li><li><strong>应用层</strong>决定了数据“长什么样”（HTTP、MySQL、游戏协议）。</li><li><strong>传输层</strong>决定了数据“怎么传”（可靠 TCP / 不可靠 UDP）。</li><li><strong>网络层</strong>决定了数据“去哪”（IP 地址、路由）。</li><li><strong>链路/物理层</strong>决定了数据“怎么送到下一跳”（网卡、电缆、无线）。</li></ul><hr><h4 id="_6-对应用层-http、ftp、smtp、mysql-协议-使用方式分析" tabindex="-1"><a class="header-anchor" href="#_6-对应用层-http、ftp、smtp、mysql-协议-使用方式分析"><span>6. 对应用层 HTTP、FTP、SMTP、MySQL 协议 使用方式分析</span></a></h4><p><strong>应用层协议（HTTP、FTP、SMTP、MySQL 等）与“协议://”写法的关系</strong>：</p><h5 id="_1-应用层协议和-uri-统一资源标识符" tabindex="-1"><a class="header-anchor" href="#_1-应用层协议和-uri-统一资源标识符"><span>1. <strong>应用层协议和 URI (统一资源标识符)</strong></span></a></h5><ul><li>在日常开发中，我们经常写 <strong><code>协议://地址:端口/...</code></strong>，这是 URI/URL 的一种语法格式。</li><li>但要注意：并不是所有的应用层协议都必须以这种方式书写，是否使用 <code>协议://</code> 取决于这个协议有没有 <strong>统一的资源定位方式</strong>。</li></ul><h5 id="_2-常见协议的-协议-形式" tabindex="-1"><a class="header-anchor" href="#_2-常见协议的-协议-形式"><span>2. <strong>常见协议的 <code>协议://</code> 形式</strong></span></a></h5><p>✅ <strong>HTTP/HTTPS</strong></p><ul><li><p>使用统一的 URL 语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://example.com:80/path</span>
<span class="line">https://example.com:443/path</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>HTTP 是万维网的核心协议，天然适合用 URL。</p></li></ul><p>✅ <strong>FTP</strong></p><ul><li><p>也支持 URI 形式：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ftp://user:password@ftp.example.com:21/path/file.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>✅ <strong>SMTP</strong>（邮件传输协议）</p><ul><li><p>一般不直接用 URL，而是邮件地址形式：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">user@example.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>但理论上也存在 URI 规范：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mailto:user@example.com</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>✅ <strong>MySQL 协议</strong></p><ul><li><p>MySQL 有自己的 <strong>连接字符串格式</strong>，不同语言/驱动可能差异：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">// 参数方式</span>
<span class="line">mysqli_connect(&quot;127.0.0.1&quot;, &quot;user&quot;, &quot;pass&quot;, &quot;db&quot;);</span>
<span class="line"></span>
<span class="line">// URI 方式（某些驱动支持）</span>
<span class="line">mysql://user:pass@127.0.0.1:3306/db</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>这是参考 URL 习惯写的，方便表示，但它本质上不是 HTTP 那样的通用 URL，而是 MySQL 驱动库自己解析的字符串。</p></li></ul><hr><h5 id="_3-总结关系" tabindex="-1"><a class="header-anchor" href="#_3-总结关系"><span>3. <strong>总结关系</strong></span></a></h5><ul><li><code>协议://...</code> 是 <strong>URI 语法</strong>，主要用于资源定位（尤其是 HTTP/FTP）。</li><li>有些协议（HTTP/FTP）<strong>标准化了 URI 语法</strong>，所以大家都用。</li><li>有些协议（MySQL、Redis、MongoDB）<strong>借鉴了 URI 语法</strong>，作为连接字符串。</li><li>有些协议（SMTP、POP3）主要用在程序交互，不常见 URI，但标准也定义过。</li></ul>`,32)]))}const o=i(t,[["render",a],["__file","各个网络层之间的关系.html.vue"]]),d=JSON.parse('{"path":"/content/other/spread/%E5%90%84%E4%B8%AA%E7%BD%91%E7%BB%9C%E5%B1%82%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.html","title":"各个网络层之间的关系","lang":"en-US","frontmatter":{"sidebar":false,"title":"各个网络层之间的关系","head":[["meta",{"name":"title","content":"各个网络层之间的关系"}],["meta",{"name":"description","content":"各个网络层之间的关系"}],["meta",{"name":"keywords","content":"网络"}],["meta",{"property":"og:title","content":"各个网络层之间的关系"}],["meta",{"property":"og:description","content":"各个网络层之间的关系"}]]},"headers":[{"level":3,"title":"各个网络层之间的关系","slug":"各个网络层之间的关系","link":"#各个网络层之间的关系","children":[]}],"git":{},"filePathRelative":"content/other/spread/各个网络层之间的关系.md"}');export{o as comp,d as data};
