import{_ as a,c as n,d as e,o as t}from"./app-CHrRue27.js";const o={};function p(l,s){return t(),n("div",null,s[0]||(s[0]=[e(`<p>mysql通过子查询更新数据，下面这个有使用前提就是[主表的待数据为null,需要更新为附表中的值，有个前提是 子查询的数据唯一]:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">update</span> video <span class="token keyword">set</span> course_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> course_id <span class="token keyword">from</span> course_manage <span class="token keyword">where</span> course_manage<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">&#39;video&#39;</span> <span class="token operator">and</span> course_manage<span class="token punctuation">.</span>content_id <span class="token operator">=</span> video<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">where</span> video<span class="token punctuation">.</span>course_id <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>再复杂一点儿就需要使用存储过程的游标循环来做</p>`,3)]))}const r=a(o,[["render",p],["__file","mysql通过子查询更新数据.html.vue"]]),i=JSON.parse('{"path":"/content/database/mysql/mysql%E9%80%9A%E8%BF%87%E5%AD%90%E6%9F%A5%E8%AF%A2%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE.html","title":"mysql通过子查询更新数据","lang":"en-US","frontmatter":{"sidebar":false,"title":"mysql通过子查询更新数据","description":"mysql通过子查询更新数据"},"headers":[],"git":{},"filePathRelative":"content/database/mysql/mysql通过子查询更新数据.md"}');export{r as comp,i as data};
