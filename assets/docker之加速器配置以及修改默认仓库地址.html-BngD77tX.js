import{_ as n,c as e,d as a,o as i}from"./app-CHrRue27.js";const l={};function r(t,s){return i(),e("div",null,s[0]||(s[0]=[a(`<h5 id="docker之加速器配置以及修改默认仓库地址" tabindex="-1"><a class="header-anchor" href="#docker之加速器配置以及修改默认仓库地址"><span>docker之加速器配置以及修改默认仓库地址</span></a></h5><p>通过如下命令进入docker仓库配置</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ vim /etc/docker/daemon.json</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="docker-镜像加速器配置" tabindex="-1"><a class="header-anchor" href="#docker-镜像加速器配置"><span>docker 镜像加速器配置</span></a></h5><p>{ &quot;registry-mirrors&quot;: [ &quot;https://docker.1ms.run&quot; ] }</p><p>👌 你这个配置里的</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;https://docker.1ms.run&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是 <strong>配置镜像加速器（mirror）</strong>，而不是直接改 Docker 的默认仓库地址。</p><p>区别要搞清楚：</p><ol><li><p><strong>默认仓库 (default registry)</strong></p><ul><li><p><strong><code>https://registry-1.docker.io</code></strong> （官方 Docker Hub 的注册服务器）</p></li><li><p>在镜像名称中简写为 <strong><code>docker.io</code></strong></p></li><li><p>默认的命名空间是 <strong><code>library</code></strong>，所以 <code>nginx</code> 实际全名是 <code>docker.io/library/nginx</code></p></li><li><p>也就是说，<code>docker pull nginx</code> 依然是去拉 <code>docker.io/library/nginx:latest</code>。</p></li></ul></li><li><p><strong>镜像加速器 (registry-mirror)</strong></p><ul><li>Docker 在访问 <code>docker.io</code> 时，会先通过你配置的镜像加速器（<code>https://docker.1ms.run</code>）去拉。</li><li>如果加速器有缓存，就直接下；如果没有，它会再去 Docker Hub 拉取，然后缓存起来。</li><li>常见于国内网络环境，用于解决访问 Docker Hub 慢或者被墙的问题。</li></ul></li><li><p><strong>如果你想改成真正的“默认仓库”</strong>（比如所有 <code>docker pull xxx</code> 都不是从 Docker Hub，而是从你自己的仓库），需要改成这样：</p></li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://docker.1ms.run&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;registry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.mycompany.com&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 <code>docker pull nginx</code> 就会去你的 <code>registry.mycompany.com</code> 找，而不是 <code>docker.io</code>。</p><h5 id="修改默认仓库地址" tabindex="-1"><a class="header-anchor" href="#修改默认仓库地址"><span>修改默认仓库地址</span></a></h5><p>{ &quot;registry&quot;: &quot;https://registry.mycompany.com&quot; }</p><h3 id="_1-默认情况下" tabindex="-1"><a class="header-anchor" href="#_1-默认情况下"><span>1. 默认情况下</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> pull nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>等价于：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">docker pull docker.io/library/nginx:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>镜像会显示为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">REPOSITORY          TAG       IMAGE ID       ...</span>
<span class="line">nginx               latest    xxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但实际上完整名是 <code>docker.io/library/nginx:latest</code>。</p><h5 id="_2-如果你在-etc-docker-daemon-json-配置了" tabindex="-1"><a class="header-anchor" href="#_2-如果你在-etc-docker-daemon-json-配置了"><span>2. 如果你在 <code>/etc/docker/daemon.json</code> 配置了</span></a></h5><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;registry&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://registry.mycompany.com&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> pull nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就会变成去拉：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">registry.mycompany.com/library/nginx:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>镜像本地保存时的完整信息就是：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">registry.mycompany.com/library/nginx:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>（注意：Docker Hub 的 <code>library</code> 命名空间是“默认公共库”的概念，你自己私有仓库可能也需要加 <code>library</code> 才能兼容）</p><h5 id="_3-验证方式" tabindex="-1"><a class="header-anchor" href="#_3-验证方式"><span>3. 验证方式</span></a></h5><p>你可以在拉取后执行：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> images</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会看到：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">REPOSITORY                              TAG       IMAGE ID       ...</span>
<span class="line">registry.mycompany.com/library/nginx    latest    xxxx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想带上 <code>library</code>，你需要在拉取时明确写出仓库路径，比如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> pull registry.mycompany.com/nginx:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那保存下来的就是 <code>registry.mycompany.com/nginx:latest</code>。</p><hr><h5 id="docker官方仓库-https-hub-docker-com-u-library" tabindex="-1"><a class="header-anchor" href="#docker官方仓库-https-hub-docker-com-u-library"><span>docker官方仓库: https://hub.docker.com/u/library</span></a></h5><hr><h5 id="如果要自己搭建一个mirror-主要有三种方式" tabindex="-1"><a class="header-anchor" href="#如果要自己搭建一个mirror-主要有三种方式"><span>如果要自己搭建一个mirror，主要有三种方式</span></a></h5><p>搭建自己的Docker镜像源有几种方案，我来详细介绍：</p><h5 id="方案一-使用官方docker-registry作为mirror" tabindex="-1"><a class="header-anchor" href="#方案一-使用官方docker-registry作为mirror"><span>方案一：使用官方Docker Registry作为Mirror</span></a></h5><h5 id="方案二-使用docker-compose部署-具体配置-这个下次自己操作以后再写" tabindex="-1"><a class="header-anchor" href="#方案二-使用docker-compose部署-具体配置-这个下次自己操作以后再写"><span>方案二：使用docker-compose部署(具体配置，这个下次自己操作以后再写)</span></a></h5><h5 id="方案三-使用nginx作为缓存代理" tabindex="-1"><a class="header-anchor" href="#方案三-使用nginx作为缓存代理"><span>方案三：使用Nginx作为缓存代理</span></a></h5><h5 id="_1-使用docker-compose方式-推荐-下面基于方案二来理解-因为没有自己搭建-所以先记录一下" tabindex="-1"><a class="header-anchor" href="#_1-使用docker-compose方式-推荐-下面基于方案二来理解-因为没有自己搭建-所以先记录一下"><span>1. 使用docker-compose方式（推荐,下面基于方案二来理解,因为没有自己搭建，所以先记录一下）</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 创建目录</span></span>
<span class="line"><span class="token function">mkdir</span> docker-mirror <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> docker-mirror</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 下载上面的配置文件</span></span>
<span class="line"><span class="token comment"># 创建数据目录</span></span>
<span class="line"><span class="token function">mkdir</span> data</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动服务</span></span>
<span class="line"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 查看状态</span></span>
<span class="line"><span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-配置客户端使用" tabindex="-1"><a class="header-anchor" href="#_2-配置客户端使用"><span>2. 配置客户端使用</span></a></h5><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;registry-mirrors&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;http://your-server-ip:5000&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-验证是否工作" tabindex="-1"><a class="header-anchor" href="#_3-验证是否工作"><span>3. 验证是否工作</span></a></h5><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 测试拉取</span></span>
<span class="line"><span class="token function">docker</span> pull hello-world</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查镜像源日志</span></span>
<span class="line"><span class="token function">docker-compose</span> logs docker-mirror</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="高级配置" tabindex="-1"><a class="header-anchor" href="#高级配置"><span>高级配置</span></a></h5><h3 id="_1-添加https支持" tabindex="-1"><a class="header-anchor" href="#_1-添加https支持"><span>1. 添加HTTPS支持</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 生成证书</span></span>
<span class="line">openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-newkey</span> rsa:2048 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-keyout</span> tls.key <span class="token parameter variable">-out</span> tls.crt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-添加认证" tabindex="-1"><a class="header-anchor" href="#_2-添加认证"><span>2. 添加认证</span></a></h5><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token comment"># 在config.yml中添加</span></span>
<span class="line"><span class="token key atrule">auth</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">htpasswd</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">realm</span><span class="token punctuation">:</span> basic<span class="token punctuation">-</span>realm</span>
<span class="line">    <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/docker/registry/htpasswd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-多镜像源支持" tabindex="-1"><a class="header-anchor" href="#_3-多镜像源支持"><span>3. 多镜像源支持</span></a></h5><p>可以同时代理多个镜像仓库：</p><ul><li>Docker Hub</li><li>Quay.io</li><li>GCR.io</li><li>阿里云等</li></ul><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h5><ol><li><strong>存储空间</strong> - 缓存会占用大量磁盘空间</li><li><strong>网络带宽</strong> - 首次拉取仍需要从官方下载</li><li><strong>定期清理</strong> - 设置缓存清理策略</li><li><strong>安全性</strong> - 考虑访问控制和HTTPS</li><li><strong>监控</strong> - 添加日志和监控指标</li></ol><p>这样你就有了自己的Docker镜像源，既能加速下载，又能在网络受限时提供服务！</p><h5 id="自建-docker-镜像加速-缓存服务-下面是别人搭建的-但是和我上面的差不多" tabindex="-1"><a class="header-anchor" href="#自建-docker-镜像加速-缓存服务-下面是别人搭建的-但是和我上面的差不多"><span>自建 Docker 镜像加速&amp;缓存服务(下面是别人搭建的，但是和我上面的差不多)</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://v2ex.com/t/1048655</span>
<span class="line">https://github.com/brighill/registry-mirror</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,65)]))}const p=n(l,[["render",r],["__file","docker之加速器配置以及修改默认仓库地址.html.vue"]]),d=JSON.parse('{"path":"/content/service/docker/docker%E4%B9%8B%E5%8A%A0%E9%80%9F%E5%99%A8%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80.html","title":"docker之加速器配置以及修改默认仓库地址","lang":"en-US","frontmatter":{"sidebar":false,"title":"docker之加速器配置以及修改默认仓库地址","head":[["meta",{"name":"title","content":"docker之加速器配置以及修改默认仓库地址"}],["meta",{"name":"description","content":"docker之加速器配置以及修改默认仓库地址"}],["meta",{"name":"keywords","content":"docker"}],["meta",{"property":"og:title","content":"docker之加速器配置以及修改默认仓库地址"}],["meta",{"property":"og:description","content":"docker之加速器配置以及修改默认仓库地址"}]]},"headers":[{"level":3,"title":"1. 默认情况下","slug":"_1-默认情况下","link":"#_1-默认情况下","children":[]},{"level":3,"title":"1. 添加HTTPS支持","slug":"_1-添加https支持","link":"#_1-添加https支持","children":[]}],"git":{},"filePathRelative":"content/service/docker/docker之加速器配置以及修改默认仓库地址.md"}');export{p as comp,d as data};
