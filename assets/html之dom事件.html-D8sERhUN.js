import{_ as l,c as o,d as e,o as m}from"./app-CHrRue27.js";const a={};function i(p,t){return m(),o("div",null,t[0]||(t[0]=[e("<p>dom操作的几个事件</p><ul><li>事件冒泡<br> 从实际操作的元素（事件）向上级父元素一级一级执行下去，直到达到document</li></ul><p>在JavaScript中，并非所有的事件都可以冒泡，像：blur、unload、load等事件就不能冒泡</p><p>有些时候父元素和子元素都定义了click事件，但是不希望点击子元素的时候执行父元素的click事件（例如dialog弹窗的遮罩层如果是父元素，而dialog弹窗内容层是子元素，同时可以通过点击遮罩层来关闭弹窗，但是点击内容层不关闭弹窗），可以通过stopPropagation()在子元素上阻止冒泡。vue使用.stop</p><ul><li><p>事件捕获（不常用） 当鼠标点击或者触发dom事件时（被触发dom事件的这个元素被叫作事件源），浏览器会从根节点 =&gt;事件源（由外到内）进行事件传播。</p></li><li><p>事件委托<br> 又称事件代理：将原本作用在子元素的事件写在父元素，而子元素通过事件冒泡的原理，会触发绑定在父元素上的事件，这就是事件委托。</p></li></ul><p>作用：</p><p>可以节省内存，不需要给所有子元素绑定事件 新增的子元素依旧会拥有事件</p>",7)]))}const n=l(a,[["render",i],["__file","html之dom事件.html.vue"]]),r=JSON.parse('{"path":"/content/front/html/html%E4%B9%8Bdom%E4%BA%8B%E4%BB%B6.html","title":"html之dom事件","lang":"en-US","frontmatter":{"sidebar":false,"title":"html之dom事件","description":"html之dom事件"},"headers":[],"git":{},"filePathRelative":"content/front/html/html之dom事件.md"}');export{n as comp,r as data};
