import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const l={};function i(p,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h5 id="symfony7之使用mysql8的cte功能" tabindex="-1"><a class="header-anchor" href="#symfony7之使用mysql8的cte功能"><span>symfony7之使用mysql8的CTE功能</span></a></h5><p>使用CTE查询:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEventOrderTickets</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Event</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>SQL</span></span>
<span class="line">WITH reserved AS (</span>
<span class="line">SELECT ticket_id, SUM(quantity) AS reservedAmount</span>
<span class="line">FROM ticket_reservations</span>
<span class="line">GROUP BY ticket_id</span>
<span class="line">)</span>
<span class="line">SELECT</span>
<span class="line">t.id,</span>
<span class="line">t.title,</span>
<span class="line">COALESCE(t.quantity, 0) AS availability,</span>
<span class="line">COALESCE(rs.reservedAmount, 0) as reservedAmount,</span>
<span class="line">s.title AS sectionTitle,</span>
<span class="line"></span>
<span class="line">    COUNT(CASE WHEN o.status_id != :initialStatus THEN 1 ELSE NULL END) AS registeredAmount,</span>
<span class="line">    COUNT(DISTINCT CASE WHEN o.status_id = :completedStatus THEN JSON_UNQUOTE(JSON_EXTRACT(r.camel_cased_registration_data, &#39;$.email&#39;)) ELSE NULL END) AS completedCount,</span>
<span class="line">    COUNT(DISTINCT CASE WHEN r.checked_in = 1 AND o.status_id = :completedStatus THEN JSON_UNQUOTE(JSON_EXTRACT(r.camel_cased_registration_data, &#39;$.email&#39;)) ELSE NULL END) AS checkedInCount</span>
<span class="line"></span>
<span class="line">FROM tickets t</span>
<span class="line">LEFT JOIN ticket_sections s ON t.section_id = s.id</span>
<span class="line">JOIN events e ON t.event_id = e.id</span>
<span class="line">LEFT JOIN event_registrations r ON r.ticket_id = t.id</span>
<span class="line">LEFT JOIN event_registration_orders o ON r.order_id = o.id</span>
<span class="line">LEFT JOIN reserved rs ON rs.ticket_id = t.id</span>
<span class="line"></span>
<span class="line">WHERE e.id = :eventId</span>
<span class="line">GROUP BY t.id</span>
<span class="line">ORDER BY t.created_at DESC</span>
<span class="line"><span class="token delimiter symbol">SQL<span class="token punctuation">;</span></span></span></span>
<span class="line"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;eventId&#39;</span>         <span class="token operator">=&gt;</span> <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;initialStatus&#39;</span>   <span class="token operator">=&gt;</span> <span class="token class-name static-context">EventRegistrationOrderStatusEnum</span><span class="token operator">::</span><span class="token constant">INITIAL</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;completedStatus&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">EventRegistrationOrderStatusEnum</span><span class="token operator">::</span><span class="token constant">COMPLETED</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">fetchAllAssociative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>使用子查询:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getEventOrderTickets</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Event</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>SQL</span></span>
<span class="line">SELECT</span>
<span class="line">t.id,</span>
<span class="line">t.title,</span>
<span class="line">COALESCE(t.quantity, 0) AS availability,</span>
<span class="line">COALESCE(rs.reservedAmount, 0) as reservedAmount,</span>
<span class="line">s.title AS sectionTitle,</span>
<span class="line">COUNT(CASE WHEN o.status_id != :initialStatus THEN 1 ELSE NULL END) AS registeredAmount,</span>
<span class="line">COUNT(DISTINCT CASE WHEN o.status_id = :completedStatus THEN JSON_UNQUOTE(JSON_EXTRACT(r.camel_cased_registration_data, &#39;$.email&#39;)) ELSE NULL END) AS completedCount,</span>
<span class="line">COUNT(DISTINCT CASE WHEN r.checked_in = 1 AND o.status_id = :completedStatus THEN JSON_UNQUOTE(JSON_EXTRACT(r.camel_cased_registration_data, &#39;$.email&#39;)) ELSE NULL END) AS checkedInCount</span>
<span class="line">FROM tickets t</span>
<span class="line">LEFT JOIN ticket_sections s ON t.section_id = s.id</span>
<span class="line">JOIN events e ON t.event_id = e.id</span>
<span class="line">LEFT JOIN event_registrations r ON r.ticket_id = t.id</span>
<span class="line">LEFT JOIN event_registration_orders o ON r.order_id = o.id</span>
<span class="line">LEFT JOIN (</span>
<span class="line">SELECT ticket_id, SUM(quantity) AS reservedAmount</span>
<span class="line">FROM ticket_reservations</span>
<span class="line">GROUP BY ticket_id</span>
<span class="line">) rs ON rs.ticket_id = t.id</span>
<span class="line">WHERE e.id = :eventId</span>
<span class="line">GROUP BY t.id</span>
<span class="line">ORDER BY t.created_at DESC</span>
<span class="line"><span class="token delimiter symbol">SQL<span class="token punctuation">;</span></span></span></span>
<span class="line"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;eventId&#39;</span>         <span class="token operator">=&gt;</span> <span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;initialStatus&#39;</span>   <span class="token operator">=&gt;</span> <span class="token class-name static-context">EventRegistrationOrderStatusEnum</span><span class="token operator">::</span><span class="token constant">INITIAL</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string single-quoted-string">&#39;completedStatus&#39;</span> <span class="token operator">=&gt;</span> <span class="token class-name static-context">EventRegistrationOrderStatusEnum</span><span class="token operator">::</span><span class="token constant">COMPLETED</span><span class="token operator">-&gt;</span><span class="token property">value</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getEntityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">fetchAllAssociative</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="关于cte" tabindex="-1"><a class="header-anchor" href="#关于cte"><span>关于CTE</span></a></h5><ul><li>CTE(Common Table Expression)</li><li>语法真的非常强大，在复杂查询中几乎是“结构清晰 + 可复用 + 易读”的利器。</li></ul><hr><h5 id="✅-cte-with-语法-强大的几点" tabindex="-1"><a class="header-anchor" href="#✅-cte-with-语法-强大的几点"><span>✅ CTE（<code>WITH</code> 语法）强大的几点</span></a></h5><h5 id="_1-让复杂-sql-拆分更清晰" tabindex="-1"><a class="header-anchor" href="#_1-让复杂-sql-拆分更清晰"><span>1. <strong>让复杂 SQL 拆分更清晰</strong></span></a></h5><p>你可以把中间步骤抽出来，不需要嵌套多层子查询，<strong>逻辑清楚、语义明确</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> active_users <span class="token keyword">AS</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> email <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> is_active <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">order_totals <span class="token keyword">AS</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token function">SUM</span><span class="token punctuation">(</span>total_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> total <span class="token keyword">FROM</span> orders <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> </span>
<span class="line">  u<span class="token punctuation">.</span>email<span class="token punctuation">,</span> o<span class="token punctuation">.</span>total</span>
<span class="line"><span class="token keyword">FROM</span> active_users u</span>
<span class="line"><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> order_totals o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> o<span class="token punctuation">.</span>user_id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比多层嵌套的子查询，这种结构<strong>清晰易维护</strong>。</p><hr><h5 id="_2-可以递归-with-recursive-——非常适合处理树形结构" tabindex="-1"><a class="header-anchor" href="#_2-可以递归-with-recursive-——非常适合处理树形结构"><span>2. <strong>可以递归（WITH RECURSIVE）——非常适合处理树形结构</strong></span></a></h5><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> RECURSIVE category_tree <span class="token keyword">AS</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> parent_id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> categories <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">  <span class="token keyword">UNION</span> <span class="token keyword">ALL</span></span>
<span class="line">  <span class="token keyword">SELECT</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>parent_id<span class="token punctuation">,</span> c<span class="token punctuation">.</span>name</span>
<span class="line">  <span class="token keyword">FROM</span> categories c</span>
<span class="line">  <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> category_tree ct <span class="token keyword">ON</span> c<span class="token punctuation">.</span>parent_id <span class="token operator">=</span> ct<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> category_tree<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 这对处理<strong>无限级分类、组织结构树、评论嵌套</strong>等非常强大。</p><hr><h5 id="_3-可被多次引用-提高复用性和效率" tabindex="-1"><a class="header-anchor" href="#_3-可被多次引用-提高复用性和效率"><span>3. <strong>可被多次引用，提高复用性和效率</strong></span></a></h5><p>比如你聚合一个统计值，在后面多个 JOIN 或 SELECT 中重复使用，<strong>CTE 避免重复写 SQL</strong>，而不像子查询只能用一次。</p><hr><h5 id="_4-比子查询更容易调试和优化" tabindex="-1"><a class="header-anchor" href="#_4-比子查询更容易调试和优化"><span>4. <strong>比子查询更容易调试和优化</strong></span></a></h5><p>你可以先调试 CTE 中的部分逻辑，逐步构建主查询。对于优化器来说，有些数据库（如 PostgreSQL）还会将 CTE 内联提升性能（MySQL 目前不一定内联）。</p><hr><h5 id="🧠-小贴士-mysql-限制" tabindex="-1"><a class="header-anchor" href="#🧠-小贴士-mysql-限制"><span>🧠 小贴士（MySQL 限制）</span></a></h5><ul><li>MySQL 8.0+ 才支持 CTE。</li><li>CTE 默认不是 materialized 的（MySQL 会尽量 inline）。</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">* 如果你希望明确“只执行一次”，你可能需要注意不同数据库（如 PostgreSQL、SQL Server 和 MySQL）对 CTE 的优化策略不同。</span>
<span class="line"></span>
<span class="line">---</span>
<span class="line"></span>
<span class="line">##### ✅ 在 Symfony Doctrine 中用法也很友好</span>
<span class="line"></span>
<span class="line">如果你是用：</span>
<span class="line"></span>
<span class="line">* \`-&gt;getConnection()-&gt;executeQuery($sql)\`：可以直接写 \`WITH\`。</span>
<span class="line">* Doctrine DQL 不支持 CTE，但可以通过原生 SQL 或用 View、SubQuery 实现类似效果。</span>
<span class="line"></span>
<span class="line">---</span>
<span class="line"></span>
<span class="line">##### CTE 默认不是 materialized 的（MySQL 会尽量 inline）, 怎么理解?</span>
<span class="line">这个问题非常关键，尤其当你对性能敏感时，**CTE 是否 materialized（物化）** 会直接影响查询的执行效率。</span>
<span class="line"></span>
<span class="line">---</span>
<span class="line"></span>
<span class="line">##### 什么是 CTE 的 materialized 与 inline？</span>
<span class="line"></span>
<span class="line">当你写：</span>
<span class="line"></span>
<span class="line">\`\`\`sql</span>
<span class="line">WITH my_cte AS (</span>
<span class="line">  SELECT ... FROM big_table WHERE condition</span>
<span class="line">)</span>
<span class="line">SELECT * FROM my_cte WHERE another_condition;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库有两种执行策略：</p><table><thead><tr><th>策略</th><th>说明</th><th>优缺点</th></tr></thead><tbody><tr><td><strong>materialized</strong>（物化）</td><td>数据库先执行 <code>my_cte</code>，将结果缓存（临时表），然后再用于主查询</td><td>✅ 结果复用，避免重复计算<br>❌ 对性能有开销（写入临时表）</td></tr><tr><td><strong>inline</strong>（内联）</td><td>数据库把 <code>my_cte</code> 看作“纯粹的子查询”，每用一次就重新执行一次</td><td>✅ 避免临时表<br>❌ 多次引用会重复计算，影响性能</td></tr></tbody></table><hr><h5 id="🐬-mysql-中的行为-重点" tabindex="-1"><a class="header-anchor" href="#🐬-mysql-中的行为-重点"><span>🐬 MySQL 中的行为（重点）</span></a></h5><h5 id="✅-mysql-8-中-默认是-inline-的" tabindex="-1"><a class="header-anchor" href="#✅-mysql-8-中-默认是-inline-的"><span>✅ MySQL 8+ 中，<strong>默认是 inline 的</strong></span></a></h5><p>即：<strong>CTE 不会被 materialized</strong>，而是像“语法糖的子查询”，在查询树中每次展开。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> my_cte <span class="token keyword">AS</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> big_table <span class="token keyword">WHERE</span> col <span class="token operator">&gt;</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> my_cte <span class="token keyword">WHERE</span> col <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等价于：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> big_table <span class="token keyword">WHERE</span> col <span class="token operator">&gt;</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">AS</span> my_cte</span>
<span class="line"><span class="token keyword">WHERE</span> col <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说：<strong>MySQL 不会单独执行 <code>my_cte</code> 一次并缓存结果。</strong></p><hr><h5 id="🧪-举个例子帮助你理解" tabindex="-1"><a class="header-anchor" href="#🧪-举个例子帮助你理解"><span>🧪 举个例子帮助你理解</span></a></h5><h5 id="假设" tabindex="-1"><a class="header-anchor" href="#假设"><span>假设：</span></a></h5><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> slow_query <span class="token keyword">AS</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> SLEEP<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> delay <span class="token keyword">FROM</span> some_table</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> slow_query<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是 materialized，只会 <code>SLEEP(1)</code> 一次。</li><li>如果是 inline，你引用多次，就会 <code>SLEEP(1)</code> 多次。</li></ul><hr><h5 id="🧩-那能不能控制它是否-materialized-呢" tabindex="-1"><a class="header-anchor" href="#🧩-那能不能控制它是否-materialized-呢"><span>🧩 那能不能控制它是否 materialized 呢？</span></a></h5><blockquote><p>✅ 在 MySQL 8.0.23+ 引入了语法控制：</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> my_cte <span class="token keyword">AS</span> MATERIALIZED <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">WITH</span> my_cte <span class="token keyword">AS</span> <span class="token operator">NOT</span> MATERIALIZED <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="但注意" tabindex="-1"><a class="header-anchor" href="#但注意"><span>但注意：</span></a></h5><ul><li>默认是 <strong>NOT MATERIALIZED</strong>（即 inline）</li><li><strong>PostgreSQL 默认是 MATERIALIZED</strong>，可以手动加 <code>NOT MATERIALIZED</code> 控制（正相反）</li></ul><hr><h5 id="🔧-小结-mysql-里的理解" tabindex="-1"><a class="header-anchor" href="#🔧-小结-mysql-里的理解"><span>🔧 小结（MySQL 里的理解）</span></a></h5><table><thead><tr><th>理解点</th><th>说明</th></tr></thead><tbody><tr><td>默认行为</td><td>MySQL 默认不物化（inline）</td></tr><tr><td>优点</td><td>快速、避免不必要的临时表</td></tr><tr><td>缺点</td><td>多次引用时可能导致重复计算</td></tr><tr><td>控制方式（8.0.23+）</td><td>可显式写 <code>AS MATERIALIZED</code></td></tr></tbody></table><hr><h5 id="🎯-你该怎么做" tabindex="-1"><a class="header-anchor" href="#🎯-你该怎么做"><span>🎯 你该怎么做？</span></a></h5><ul><li><strong>一次性引用，inline 足够。</strong></li><li><strong>多次引用 or 逻辑复杂 or 数据量大 → 用 <code>AS MATERIALIZED</code> 提高性能（8.0.23+）</strong></li><li>对于<strong>写业务复杂统计、递归、去重汇总表</strong>时，materialized 更安全。</li><li>用 <code>EXPLAIN</code> 查看实际执行计划是关键。</li></ul><hr>`,59)]))}const o=n(l,[["render",i],["__file","symfony7之使用mysql8的CTE功能.html.vue"]]),r=JSON.parse('{"path":"/content/database/mysql/symfony7%E4%B9%8B%E4%BD%BF%E7%94%A8mysql8%E7%9A%84CTE%E5%8A%9F%E8%83%BD.html","title":"symfony7之使用mysql8的CTE功能","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7之使用mysql8的CTE功能","head":[["meta",{"name":"title","content":"symfony7之使用mysql8的CTE功能"}],["meta",{"name":"description","content":"symfony7之使用mysql8的CTE功能"}],["meta",{"name":"keywords","content":"symfony7,mysql8"}],["meta",{"property":"og:title","content":"symfony7之使用mysql8的CTE功能"}],["meta",{"property":"og:description","content":"symfony7之使用mysql8的CTE功能"}]]},"headers":[],"git":{},"filePathRelative":"content/database/mysql/symfony7之使用mysql8的CTE功能.md"}');export{o as comp,r as data};
