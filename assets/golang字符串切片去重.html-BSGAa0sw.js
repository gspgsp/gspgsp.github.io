import{_ as s,c as a,d as t,o as p}from"./app-CHrRue27.js";const e={};function o(l,n){return p(),a("div",null,n[0]||(n[0]=[t(`<p>golang字符串切片去重: 有时候需要去除字符串切片里的重复数据，可以通过下面的方法实现，其中 sort.Strings 很有用，这样可以很精确的对数据进行处理</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">removeDuplicateString</span><span class="token punctuation">(</span>data <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">	dataS <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>dataS<span class="token punctuation">)</span></span>
<span class="line">	i <span class="token operator">:=</span> <span class="token number">0</span></span>
<span class="line">	<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">for</span> j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>dataS<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dataS<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">			list <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> dataS<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">			i<span class="token operator">++</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">return</span> list</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const i=s(e,[["render",o],["__file","golang字符串切片去重.html.vue"]]),u=JSON.parse('{"path":"/content/go/base/golang%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%88%87%E7%89%87%E5%8E%BB%E9%87%8D.html","title":"golang字符串切片去重","lang":"en-US","frontmatter":{"sidebar":false,"title":"golang字符串切片去重","description":"golang字符串切片去重"},"headers":[],"git":{},"filePathRelative":"content/go/base/golang字符串切片去重.md"}');export{i as comp,u as data};
