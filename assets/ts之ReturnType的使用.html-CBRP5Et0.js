import{_ as s,c as n,d as a,o as t}from"./app-CHrRue27.js";const p={};function l(o,e){return t(),n("div",null,e[0]||(e[0]=[a(`<p>ts之ReturnType的使用:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">如：type Field = ReturnType&lt;typeof useField&gt;;</span>
<span class="line">这段 TypeScript 代码定义了一个类型 Field，它是 useField 函数的返回类型。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关键部分" tabindex="-1"><a class="header-anchor" href="#关键部分"><span>关键部分</span></a></h4><ol><li><p><strong><code>typeof useField</code></strong>：</p><ul><li><code>typeof</code> 是 TypeScript 中的操作符，用于获取某个变量、函数或类的类型。</li><li>在这里，<code>typeof useField</code> 获取了 <code>useField</code> 函数的类型。</li></ul></li><li><p><strong><code>ReturnType&lt;typeof useField&gt;</code></strong>：</p><ul><li><code>ReturnType&lt;T&gt;</code> 是 TypeScript 提供的一个内置泛型类型，用于获取类型 <code>T</code> 的返回值类型。</li><li>因此，<code>ReturnType&lt;typeof useField&gt;</code> 获取了 <code>useField</code> 函数的返回值类型。</li></ul></li></ol><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h4><p>这段代码的作用是：<code>Field</code> 被定义为 <code>useField</code> 函数返回值的类型。简单来说，它是根据 <code>useField</code> 函数的返回类型动态生成的类型。 例如，如果 <code>useField</code> 返回一个对象 <code>{ value: string }</code>，那么 <code>Field</code> 的类型就是 <code>{ value: string }</code>。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h4><p>这里的 T 必须是一个函数类型, 不能是一个常规的类型，比如这里如果 <code>typeof useField</code> 不是一个方法，而是一个自定义类型，使用 <code>ReturnType&lt;typeof useField&gt;</code> 会导致 TypeScript 报错或者产生不符合预期的结果。让我们来具体分析一下。</p><h4 id="具体分析" tabindex="-1"><a class="header-anchor" href="#具体分析"><span>具体分析</span></a></h4><h4 id="_1-returntype-t-作用" tabindex="-1"><a class="header-anchor" href="#_1-returntype-t-作用"><span>1. <code>ReturnType&lt;T&gt;</code> 作用</span></a></h4><p><code>ReturnType&lt;T&gt;</code> 是 TypeScript 的内置泛型工具类型，它的目的是获取类型 <code>T</code> 的 <strong>返回值类型</strong>。它要求 <code>T</code> 必须是一个 <strong>函数类型</strong>。</p><p>例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyFunction</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Result</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>MyFunction<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Result 会是 string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>ReturnType&lt;MyFunction&gt;</code> 会得到 <code>MyFunction</code> 返回的类型，即 <code>string</code>。</p><h4 id="_2-如果-typeof-usefield-不是函数类型" tabindex="-1"><a class="header-anchor" href="#_2-如果-typeof-usefield-不是函数类型"><span>2. 如果 <code>typeof useField</code> 不是函数类型</span></a></h4><p>假设 <code>useField</code> 不是一个函数，而是一个普通的类型或接口，像这样：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">useField</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  field<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这种情况下，<code>typeof useField</code> 获取的将是一个 <strong>对象类型</strong>，而不是一个函数类型。此时 <code>ReturnType&lt;typeof useField&gt;</code> 会报错，因为 <code>ReturnType</code> 只适用于函数类型。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">type Field = ReturnType&lt;typeof useField&gt;; // 会报错，不能对非函数类型使用 ReturnType</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-解决方案" tabindex="-1"><a class="header-anchor" href="#_3-解决方案"><span>3. 解决方案</span></a></h4><ul><li>如果你要使用 <code>ReturnType</code>，确保 <code>useField</code> 是一个函数。如果 <code>useField</code> 只是一个类型或接口，你不能直接使用 <code>ReturnType</code>，而是可以将其作为一个类型本身：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Field</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> useField<span class="token punctuation">;</span> <span class="token comment">// 直接使用类型本身</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果 <code>useField</code> 是一个工厂函数（返回对象的函数），你可以使用 <code>ReturnType</code> 来获取其返回值类型：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    field<span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token operator">:</span> <span class="token number">42</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Field</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> useField<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Field 类型会是 { field: string, value: number }， 注意 typeof useField 也很重要，必须要先获取useField这个函数的类型</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结</span></a></h4><ul><li><code>ReturnType&lt;T&gt;</code> 只能用于函数类型。</li><li>如果 <code>typeof useField</code> 是一个类型或接口（非函数），直接使用 <code>ReturnType</code> 会导致报错。</li><li>对于非函数类型，直接使用 <code>typeof useField</code> 或者其他方式来获取类型。</li></ul><hr><h4 id="直接type-field-typeof-usefield-和-type-field-returntype-typeof-usefield-啥区别" tabindex="-1"><a class="header-anchor" href="#直接type-field-typeof-usefield-和-type-field-returntype-typeof-usefield-啥区别"><span>直接<code>type Field = typeof useField;和 type Field = ReturnType&lt;typeof useField&gt;;</code>啥区别？</span></a></h4><p>这两者的区别在于 <strong><code>typeof useField</code></strong> 和 <strong><code>ReturnType&lt;typeof useField&gt;</code></strong> 表达的含义不同，它们分别代表不同的类型信息。让我们逐一分析它们的区别：</p><h4 id="_1-type-field-typeof-usefield" tabindex="-1"><a class="header-anchor" href="#_1-type-field-typeof-usefield"><span>1. <code>type Field = typeof useField;</code></span></a></h4><ul><li><code>typeof useField</code> 获取的是 <code>useField</code> 这个变量本身的 <strong>类型</strong>，也就是它作为一个值的类型（通常是函数类型）。</li><li>如果 <code>useField</code> 是一个函数，<code>typeof useField</code> 就是该函数的类型。</li></ul><p>例如，如果 <code>useField</code> 是一个函数：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">&quot;example&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Field</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> useField<span class="token punctuation">;</span>  <span class="token comment">// Field 的类型是 () =&gt; { field: string, value: number }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>Field</code> 会被推断为 <code>useField</code> 函数的类型，即 <code>() =&gt; { field: string; value: number }</code>。这个类型描述了 <code>useField</code> 作为一个 <strong>函数</strong> 的签名。</p><h4 id="_2-type-field-returntype-typeof-usefield" tabindex="-1"><a class="header-anchor" href="#_2-type-field-returntype-typeof-usefield"><span>2. <code>type Field = ReturnType&lt;typeof useField&gt;;</code></span></a></h4><ul><li><code>ReturnType&lt;T&gt;</code> 是 TypeScript 内置的工具类型，它用于提取 <strong>函数</strong> <code>T</code> 的 <strong>返回值类型</strong>。</li><li><code>ReturnType&lt;typeof useField&gt;</code> 会获取 <code>useField</code> 函数返回的对象的类型。</li></ul><p>继续上面的例子：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Field</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> useField<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// Field 的类型是 { field: string, value: number }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里，<code>Field</code> 会被推断为 <code>useField</code> 函数的 <strong>返回值类型</strong>，即 <code>{ field: string; value: number }</code>。</p><h4 id="区别总结" tabindex="-1"><a class="header-anchor" href="#区别总结"><span>区别总结</span></a></h4><ul><li><strong><code>typeof useField</code></strong> 是获取 <code>useField</code> 函数的 <strong>函数签名</strong>（包括函数参数和返回值），也就是 <code>useField</code> 作为一个 <strong>函数</strong> 的类型。</li><li><strong><code>ReturnType&lt;typeof useField&gt;</code></strong> 是获取 <code>useField</code> 函数的 <strong>返回值类型</strong>，即 <code>useField</code> 函数执行后返回的内容的类型。</li></ul><h3 id="示例对比" tabindex="-1"><a class="header-anchor" href="#示例对比"><span>示例对比</span></a></h3><p>假设有以下代码：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">useField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Field1</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> useField<span class="token punctuation">;</span>          <span class="token comment">// Field1 的类型是 () =&gt; { field: string, value: number }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Field2</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> useField<span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// Field2 的类型是 { field: string, value: number }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Field1</code> 是 <code>useField</code> 函数的类型，描述了函数本身的签名：一个无参函数，返回 <code>{ field: string, value: number }</code>。</li><li><code>Field2</code> 是 <code>useField</code> 函数的 <strong>返回值类型</strong>，即 <code>{ field: string, value: number }</code>，它是函数执行后返回的对象类型。</li></ul><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span>总结</span></a></h4><ul><li><strong><code>typeof useField</code></strong>：获取 <code>useField</code> 的类型（函数类型）。</li><li><strong><code>ReturnType&lt;typeof useField&gt;</code></strong>：获取 <code>useField</code> 函数返回值的类型。</li></ul>`,47)]))}const d=s(p,[["render",l],["__file","ts之ReturnType的使用.html.vue"]]),c=JSON.parse('{"path":"/content/front/js/ts%E4%B9%8BReturnType%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"ts之ReturnType的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"ts之ReturnType的使用","head":[["meta",{"name":"title","content":"ts之ReturnType的使用"}],["meta",{"name":"description","content":"ts之ReturnType的使用"}],["meta",{"name":"keywords","content":"typescript"}],["meta",{"property":"og:title","content":"ts之ReturnType的使用"}],["meta",{"property":"og:description","content":"ts之ReturnType的使用"}]]},"headers":[{"level":3,"title":"示例对比","slug":"示例对比","link":"#示例对比","children":[]}],"git":{},"filePathRelative":"content/front/js/ts之ReturnType的使用.md"}');export{d as comp,c as data};
