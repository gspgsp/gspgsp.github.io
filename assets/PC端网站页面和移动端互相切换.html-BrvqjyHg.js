import{_ as s,c as a,d as p,o as e}from"./app-CHrRue27.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>1.基于tailwind(配合nuxt3框架使用)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">个人总结一下，目前感觉如果没有设计稿约束的话，可以直接用响应式布局的框架，如tailwind</span>
<span class="line">但是如果严格按照设计稿来做的话，tailwind的样式可能不够用，所以要自定义很样式，这个可能是tailwind的一大弊端吧</span>
<span class="line">tailwind弊端:</span>
<span class="line">Tailwind CSS虽然好用，但是它有一个非常大的缺点，就是它自身提供的类名是非常有限的，并且它的默认单位是rem，这就导致如果一个项目要严格按照设计稿的尺寸来编写，它需要你手动添加大量的样式，也就是如果一个盒子的宽是375px，虽然你可以使用蓝湖这一类的工具将设计稿转换为rem为单位，375px如果按照16px的基准来转换就是23.4375rem。如果你需要严格参照设计稿，那么你就必须手动在tailwind.config.js文件中添加93.75: &quot;23.4375rem&quot;这一类的参数，如果你每次都要这么进行计算的话，那会是一个非常麻烦的事情，这个时候你会想：直接在tailwind.config.js文件中将1px~2000px全部添加进去不就好了嘛！</span>
<span class="line"></span>
<span class="line">事实上是不行，tailwind.config.js文件中，你预设的样式越多，你项目启动的速度就会越慢，因为它会通过postcss进行大量的计算，我尝试过将1px~2000px全部填入配置文件中，每次启动项目的时间大概是在2~3分钟左右。</span>
<span class="line"></span>
<span class="line">我在项目中直接没有使用tailwind的样式类库，只用了基本的几个，如:container 其他的都直接写到vue页面的 scope 范围内。基于scss语法 rem 单位。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.普通网站处理</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>     <span class="token comment">//手机 m站</span></span>
<span class="line"> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>     <span class="token comment">//电脑 www站</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.如何在Nuxt3中检测用户设备并加载相应的用户界面？ 上面说了，如果严格按照设计稿来做的话，就需要www 和 m 站各处一套设计稿，对应的样式可能就有两套，页面也有两套，就需要根据用户当前设备来加载相应的界面了 这里使用：mobile-detect 这个js包</p><p>安装(基于:https://github.com/hgoebl/mobile-detect.js):</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">npm i mobile-detect / yarn add mobile-detect</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用: plugins/device.ts 中import 报错： can only be default-imported using the &#39;esModuleInterop&#39; flag</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineNuxtPlugin<span class="token punctuation">,</span> useRequestHeaders<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span>  MobileDetect <span class="token keyword">from</span> <span class="token string">&#39;mobile-detect&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 这样import就不会有问题了</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtPlugin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token function">useRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> md <span class="token operator">=</span> process<span class="token punctuation">.</span>server <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">MobileDetect</span><span class="token punctuation">(</span>headers<span class="token punctuation">[</span><span class="token string">&#39;user-agent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MobileDetect</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> isMobile <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> md<span class="token punctuation">.</span><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;UnknownMobile&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> isTablet <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> md<span class="token punctuation">.</span><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;UnknownTablet&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> isDesktop <span class="token operator">=</span> <span class="token operator">!</span>isMobile <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isTablet</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        provide<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function-variable function">isMobile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isMobile<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">isTablet</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isTablet<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">isDesktop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isDesktop</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是上面的代码运行以后会报：<strong>vite_ssr_import_1</strong> is not a constructor 所以还是改为 plugins/device.js 格式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span>defineNuxtPlugin<span class="token punctuation">,</span> useRequestHeaders<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> MobileDetect <span class="token keyword">from</span> <span class="token string">&#39;mobile-detect&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtPlugin</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> headers <span class="token operator">=</span> <span class="token function">useRequestHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> md <span class="token operator">=</span> process<span class="token punctuation">.</span>server <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">MobileDetect</span><span class="token punctuation">(</span>headers<span class="token punctuation">[</span><span class="token string">&#39;user-agent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">MobileDetect</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> isMobile <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> md<span class="token punctuation">.</span><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;UnknownMobile&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> isTablet <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">tablet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">||</span> md<span class="token punctuation">.</span><span class="token function">mobile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;UnknownTablet&#39;</span></span>
<span class="line">    <span class="token keyword">const</span> isDesktop <span class="token operator">=</span> <span class="token operator">!</span>isMobile <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isTablet</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">provide</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function-variable function">isMobile</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isMobile<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">isTablet</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isTablet<span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">isDesktop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isDesktop</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.项目中使用(判断了$isMobile，就可以加载不同的页面了)</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$isMobile()<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span> show on mobile <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span> <span class="token punctuation">&gt;</span></span> show on pc <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13)]))}const i=s(t,[["render",o],["__file","PC端网站页面和移动端互相切换.html.vue"]]),u=JSON.parse('{"path":"/content/front/js/PC%E7%AB%AF%E7%BD%91%E7%AB%99%E9%A1%B5%E9%9D%A2%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%BA%92%E7%9B%B8%E5%88%87%E6%8D%A2.html","title":"PC端网站页面和移动端互相切换","lang":"en-US","frontmatter":{"sidebar":false,"title":"PC端网站页面和移动端互相切换","description":"PC端网站页面和移动端互相切换"},"headers":[],"git":{},"filePathRelative":"content/front/js/PC端网站页面和移动端互相切换.md"}');export{i as comp,u as data};
