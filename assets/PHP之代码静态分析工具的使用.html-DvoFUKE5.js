import{_ as s,c as n,d as a,o as p}from"./app-CHrRue27.js";const i={};function t(r,e){return p(),n("div",null,e[0]||(e[0]=[a(`<p>多人同时开发同一个项目的时候，为了同意编码的风格，可以通过 phpstan 和 php-cs-fixer 对代码进行静态分析，使用命令如下:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php7.4 ./vendor/bin/phpstan</span>
<span class="line">php7.4 ./vendor/bin/php-cs-fixer fix <span class="token parameter variable">--config</span><span class="token operator">=</span>.php-cs-fixer.dist.php <span class="token parameter variable">--verbose</span> --dry-run --using-cache<span class="token operator">=</span>no <span class="token parameter variable">--diff</span> //这个会展示具体的哪些行有问题</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以是:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$ php ./vendor/bin/phpstan</span>
<span class="line">$ php ./vendor/friendsofphp/php-cs-fixer/php-cs-fixer.php fix --verbose --dry-run --using-cache=no //这个只会展示哪些有问题，但是不会展示哪些行</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要单元测试，可以通过下面的命令实现:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php7.4 ./vendor/bin/simple-phpunit</span>
<span class="line">php ./vendor/bin/phpunit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的php7.4只是当前环境下php的版本，可以配置为 全局php软连接，上面的命令执行都是在项目的根目录下.</p>`,7)]))}const d=s(i,[["render",t],["__file","PHP之代码静态分析工具的使用.html.vue"]]),c=JSON.parse('{"path":"/content/php/base/PHP%E4%B9%8B%E4%BB%A3%E7%A0%81%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"PHP之代码静态分析工具的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"PHP之代码静态分析工具的使用","description":"PHP之代码静态分析工具的使用"},"headers":[],"git":{},"filePathRelative":"content/php/base/PHP之代码静态分析工具的使用.md"}');export{d as comp,c as data};
