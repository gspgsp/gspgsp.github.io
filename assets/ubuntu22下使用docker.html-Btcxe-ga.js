import{_ as n,c as e,d as i,o as a}from"./app-CHrRue27.js";const l={};function d(c,s){return a(),e("div",null,s[0]||(s[0]=[i(`<p>ubuntu22下使用docker:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1&gt;端口映射关系，也适用于直接docker run -p host_port:container_port</span>
<span class="line"></span>
<span class="line">https://juejin.cn/s/docker-compose.yml%20%E7%AB%AF%E5%8F%A3</span>
<span class="line">  </span>
<span class="line">2&gt;docker 命名卷</span>
<span class="line">默认情况下,命名卷在大多数 Linux 发行版中存储在主机文件系统的 /var/lib/docker/volumes 目录下</span>
<span class="line">比如:</span>
<span class="line">volumes:</span>
<span class="line">  - volume-mysql-duoxiaozhan:/var/lib/mysql //声明 命名卷，然后挂载到 /var/lib/mysql，用来存储mysql数据，这样即使容器销毁数据还在</span>
<span class="line">在 Linux 上: /var/lib/docker/volumes/volume-mysql-duoxiaozhan/_data</span>
<span class="line">  </span>
<span class="line">3&gt;为docker-compose 配置环境变量</span>
<span class="line">https://docs.docker.com/compose/environment-variables/set-environment-variables/</span>
<span class="line">  </span>
<span class="line">4&gt;关于jwilder/nginx-proxy</span>
<span class="line">http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/</span>
<span class="line">  </span>
<span class="line">5&gt;现在可以直接使用 docker compose build , 过去需要使用 docker-compose build</span>
<span class="line">对于新版 Docker(19.03+),只需安装 Docker Engine 即可使用 docker compose 命令</span>
<span class="line">对于旧版 Docker,需要先安装 Docker Engine,再单独安装 docker-compose</span>
<span class="line"></span>
<span class="line">还有一点很重要:</span>
<span class="line">过去在当前 docker-compose.yml目录下执行 docker-compose up，如果镜像不存在，会自动执行 docker-compose build [可以加单独镜像名称，比如nginx]命令</span>
<span class="line">现在必须要先执行 docker compose build [可以加单独镜像名称，比如nginx], 然后单独执行 docker compose up [-d参数]， 使用 -d 标志启动容器,表示以&quot;分离(detached)&quot;模式运行。</span>
<span class="line">分离模式意味着容器将在后台运行,而不会将它们的输出流(标准输出和标准错误)连接到您的终端。</span>
<span class="line">  </span>
<span class="line">6&gt;执行 docker image ls，报下面的错误</span>
<span class="line">permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head ......</span>
<span class="line"></span>
<span class="line">原因是:</span>
<span class="line">这是因为你当前的用户没有这个权限。默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。即我们当前的用户不是root用户。</span>
<span class="line"></span>
<span class="line">解决办法：把我们当前的用户添加到docker组中就可以了，这样他们就是一家人了。</span>
<span class="line"></span>
<span class="line">第一步：sudo gpasswd -a username docker  #将普通用户username加入到docker组中，username这个字段也可以直接换成$USER。</span>
<span class="line">第二步：newgrp docker  #更新docker组</span>
<span class="line">第三步：再执行你报错的命令，此时就不会报错了。</span>
<span class="line">  </span>
<span class="line">7&gt;docker 容器内执行vim</span>
<span class="line">root@b8c739f8b2b3:/app# apt-get update</span>
<span class="line">root@b8c739f8b2b3:/app# apt-get install -y vim</span>
<span class="line"></span>
<span class="line">https://blog.csdn.net/hkl_Forever/article/details/125466251</span>
<span class="line">  </span>
<span class="line">8&gt;docker容器内导入数据</span>
<span class="line">root@bf42367264b4:/dumps# mysql -u duoxiaozhan -p duoxiaozhanpub_dev &lt; /dumps/duoxiaozhanpub.sql</span>
<span class="line">Enter password: </span>
<span class="line">ERROR 1118 (42000) at line 1739814: Row size too large (&gt; 8126). Changing some columns to TEXT or BLOB or using ROW_FORMAT=DYNAMIC or ROW_FORMAT=COMPRESSED may help. In current row format, BLOB prefix of 768 bytes is stored inline.</span>
<span class="line"></span>
<span class="line">解决方式:</span>
<span class="line"></span>
<span class="line">找到对应表DML，把 ROW_FORMAT=COMPACT 改为 ROW_FORMAT=DYNAMIC:</span>
<span class="line">DROP TABLE IF EXISTS \`users\`;</span>
<span class="line">CREATE TABLE \`users\` (</span>
<span class="line">  \`id\` int unsigned NOT NULL AUTO_INCREMENT,</span>
<span class="line">  \`editor_id\` int unsigned DEFAULT NULL,</span>
<span class="line">  \`email\` char(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span>
<span class="line">  \`password\` char(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span>
<span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2184475 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci ROW_FORMAT=DYNAMIC;</span>
<span class="line"></span>
<span class="line">至于网上的 各种设置都没用，其实就上面的提示就是解决方法</span>
<span class="line"></span>
<span class="line">然后执行:</span>
<span class="line">root@bf42367264b4:/dumps# ls</span>
<span class="line">duoxiaozhanpub.sql  tables</span>
<span class="line">root@bf42367264b4:/dumps# mysql -u root -p duoxiaozhanpub_dev &lt; /dumps/duoxiaozhanpub.sql</span>
<span class="line">Enter password: </span>
<span class="line">root@bf42367264b4:/dumps#</span>
<span class="line"></span>
<span class="line">导入完成</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>补充:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://blog.csdn.net/guo_zhen_qian/article/details/132254406 //命令行安装(简单)</span>
<span class="line">https://docs.docker.com/desktop/install/linux-install/ //安装desk版本</span>
<span class="line">https://docs.docker.com/engine/install/ubuntu/ //安装engine版本</span>
<span class="line">  </span>
<span class="line">// docker-compose 安装, 新版本的docker 可以不用单独安装这个，可以直接使用，见上面的命令操作</span>
<span class="line">sudo curl -L https://github.com/docker/compose/releases/download/v2.26.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose</span>
<span class="line">$ sudo chmod +x ./docker-compose //记得赋权限</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const r=n(l,[["render",d],["__file","ubuntu22下使用docker.html.vue"]]),o=JSON.parse('{"path":"/content/service/docker/ubuntu22%E4%B8%8B%E4%BD%BF%E7%94%A8docker.html","title":"ubuntu22下使用docker","lang":"en-US","frontmatter":{"sidebar":false,"title":"ubuntu22下使用docker","description":"ubuntu22下使用docker"},"headers":[],"git":{},"filePathRelative":"content/service/docker/ubuntu22下使用docker.md"}');export{r as comp,o as data};
