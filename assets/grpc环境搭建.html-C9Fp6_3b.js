import{_ as p,c as e,d as r,o as t}from"./app-CHrRue27.js";const g={};function c(s,o){return t(),e("div",null,o[0]||(o[0]=[r("<p>grpc环境搭建:</p><p>1.prococ安装 ①到 https://github.com/protocolbuffers/protobuf/releases 分别下载Windows和Linux环境的执行器 ②选择最新版本的protoc下载 ③将下载的文件解压，将解压后的bin目录加入到环境变量的path下 ④查看安装是否成功 命令：protoc --version 输出:libprotoc 3.20.2</p><p>2.protobuf下go、grpc 插件的安装 protoc-gen-go： go专用的protoc的编译器插件，安装后会在GOPATH的bin目录下生成一个protoc-gen-go.exe protoc-gen-go-grp：go调用grpc的插件，安装后会在GOPATH的bin目录下生成一个protoc-gen-go-grpc.exe</p><p>go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26 go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1</p><p>至此使用Protobuf的准备工作就做完了</p><p>3.创建go项目，同时编写 proto文件 ①先新建一个 proto 文件夹，再在里面编写 hello.proto syntax = &quot;proto3&quot;;</p><p>package hello;</p><p>option go_package = &quot;./grpc/service&quot;; // 这个参数主要是定义生成的 pb.go 以及 grpc.pb.go 存到哪里 可以直接设为 &quot;./&quot; 就在当前目录下</p><p>service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }</p><p>message HelloRequest { string name = 1; }</p><p>message HelloReply { string message = 1; }</p><p>②进入存放.proto路径下</p><p>③运行如下命令，生成 pb.go 以及 grpc.pb.go 代码</p><p>D:\\go-registry\\src\\k8s-hello\\proto&gt;protoc --go_out=. --go-grpc_out=. *.proto</p><p>可以在 D:\\go-registry\\src\\k8s-hello\\proto\\grpc\\service 看到生成的 pb.go 以及 grpc.pb.go 文件，到这里准备工作算是完成了</p>",15)]))}const n=p(g,[["render",c],["__file","grpc环境搭建.html.vue"]]),a=JSON.parse('{"path":"/content/go/base/grpc%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html","title":"grpc环境搭建","lang":"en-US","frontmatter":{"sidebar":false,"title":"grpc环境搭建","description":"grpc环境搭建"},"headers":[],"git":{},"filePathRelative":"content/go/base/grpc环境搭建.md"}');export{n as comp,a as data};
