import{_ as s,c as a,d as p,o as t}from"./app-CHrRue27.js";const e={};function c(o,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h5 id="js之reduce方法解析" tabindex="-1"><a class="header-anchor" href="#js之reduce方法解析"><span>js之reduce方法解析</span></a></h5><p><code>reduce</code> 是 JavaScript 数组中最灵活也最有表现力的方法之一。你可以用它实现很多功能，比如：</p><hr><h5 id="✅-常见用途举例" tabindex="-1"><a class="header-anchor" href="#✅-常见用途举例"><span>✅ 常见用途举例：</span></a></h5><h5 id="_1-数组求和" tabindex="-1"><a class="header-anchor" href="#_1-数组求和"><span>1. <strong>数组求和</strong></span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_2-数组转对象" tabindex="-1"><a class="header-anchor" href="#_2-数组转对象"><span>2. <strong>数组转对象</strong></span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Bob&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  acc<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>name</span>
<span class="line">  <span class="token keyword">return</span> acc</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// { 1: &#39;Alice&#39;, 2: &#39;Bob&#39; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-统计某个值出现的次数" tabindex="-1"><a class="header-anchor" href="#_3-统计某个值出现的次数"><span>3. <strong>统计某个值出现的次数</strong></span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> colors<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  acc<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>acc<span class="token punctuation">[</span>color<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">  <span class="token keyword">return</span> acc</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// { red: 2, blue: 3, green: 1 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-扁平化数组" tabindex="-1"><a class="header-anchor" href="#_4-扁平化数组"><span>4. <strong>扁平化数组</strong></span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> nested <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> flat <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4, 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="📌-小技巧-避免副作用" tabindex="-1"><a class="header-anchor" href="#📌-小技巧-避免副作用"><span>📌 小技巧：避免副作用</span></a></h5><p><code>reduce</code> 中如果要操作对象或数组，最好<strong>返回一个新的对象/数组</strong>，避免修改 <code>acc</code> 引起难以发现的副作用。</p><hr><p>需要的时候也可以嵌套 <code>reduce</code>，结合 <code>map</code>/<code>filter</code> 更强大。如果想用在 Vue/Nuxt 的 <code>computed</code> 中，也非常高效且响应式友好。</p><h5 id="reduce-的第二个参数就是-初始值-initial-value" tabindex="-1"><a class="header-anchor" href="#reduce-的第二个参数就是-初始值-initial-value"><span><code>reduce</code> 的第二个参数就是：<strong>初始值（initial value）</strong></span></a></h5><hr><h5 id="📌-举个最简单的例子" tabindex="-1"><a class="header-anchor" href="#📌-举个最简单的例子"><span>📌 举个最简单的例子：</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//              ↑           ↑</span></span>
<span class="line"><span class="token comment">//        初始值 acc       当前项 item</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>0</code> 就是初始值，<code>acc</code> 从 0 开始累加。</p><hr><h5 id="🚨-如果没有提供初始值-会发生什么" tabindex="-1"><a class="header-anchor" href="#🚨-如果没有提供初始值-会发生什么"><span>🚨 如果没有提供初始值，会发生什么？</span></a></h5><p>当你 <strong>不传第二个参数</strong>，reduce 会默认使用数组的 <strong>第一个元素作为初始值</strong>，从第二个元素开始循环。</p><h5 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> item<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 初始 acc = 1（arr[0]）</span></span>
<span class="line"><span class="token comment">// 从 item = 2 开始</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span> <span class="token comment">// 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然结果是一样的，但：</p><hr><h5 id="❗为什么推荐总是提供初始值" tabindex="-1"><a class="header-anchor" href="#❗为什么推荐总是提供初始值"><span>❗为什么推荐总是提供初始值？</span></a></h5><ol><li><p>更安全，避免空数组报错：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> item<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// ✅ 返回 0</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> item<span class="token punctuation">)</span>    <span class="token comment">// ❌ TypeError: Reduce of empty array with no initial value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>更清晰，一眼看出你希望累加/合并成哪种类型的值（数值、对象、数组等）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment">// 初始是一个对象</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 初始是一个数组</span></span>
<span class="line">arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>   <span class="token comment">// 初始是一个字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><h5 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结：</span></a></h5><ul><li><code>reduce(callback, initialValue)</code> 的第二个参数就是 <strong>初始值</strong>。</li><li>建议：<strong>总是显式传初始值</strong>，更加健壮、清晰、可维护。特别是在你处理对象或空数组的时候。</li></ul>`,34)]))}const i=s(e,[["render",c],["__file","js之reduce方法解析.html.vue"]]),u=JSON.parse('{"path":"/content/front/js/js%E4%B9%8Breduce%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90.html","title":"js之reduce方法解析","lang":"en-US","frontmatter":{"sidebar":false,"title":"js之reduce方法解析","head":[["meta",{"name":"title","content":"js之reduce方法解析"}],["meta",{"name":"description","content":"js之reduce方法解析"}],["meta",{"name":"keywords","content":"sass"}],["meta",{"property":"og:title","content":"js之reduce方法解析"}],["meta",{"property":"og:description","content":"js之reduce方法解析"}]]},"headers":[],"git":{},"filePathRelative":"content/front/js/js之reduce方法解析.md"}');export{i as comp,u as data};
