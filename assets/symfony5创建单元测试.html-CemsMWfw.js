import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function l(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>symfony5创建单元测试: ①在测试环境中，这些环境文件被读取（如果其中有重复的变量，列表中较低的文件会覆盖之前的项目）： .env：包含具有应用默认值的环境变量； .env.test：覆盖/设置特定的测试值或变量； .env.test.local: 覆盖本机的特定设置</p><p>例如:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment"># .env.test</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"><span class="token constant">DATABASE_URL</span><span class="token operator">=</span><span class="token string double-quoted-string">&quot;mysql://db_user:db_password@127.0.0.1:3306/db_name_test?serverVersion=5.7&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②生成测试类 应用程序测试是PHP文件，通常在应用程序的test/Controller/目录下。它们通常扩展WebTestCase。这个类在KernelTestCase的基础上增加了特殊的逻辑。 例如你想测试PostController类处理的页面，首先使用SymfonyMakerBundle的make:test命令创建一个新的PostControllerTest：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$php</span> bin<span class="token operator">/</span>console make<span class="token punctuation">:</span>test</span>
<span class="line"></span>
<span class="line">Which test type would you like<span class="token operator">?</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token operator">&gt;</span> WebTestCase</span>
<span class="line"></span>
<span class="line">The name of the test <span class="token keyword">class</span> <span class="token punctuation">(</span>e<span class="token operator">.</span>g<span class="token operator">.</span> BlogPostTest<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line"><span class="token operator">&gt;</span> Controller\\PostControllerTest</span>
<span class="line"> </span>
<span class="line">会创建如下的测试类<span class="token punctuation">:</span></span>
<span class="line"><span class="token comment">// tests/Controller/PostControllerTest.php</span></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Tests<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Test<span class="token punctuation">\\</span>WebTestCase</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostControllerTest</span> <span class="token keyword">extends</span> <span class="token class-name">WebTestCase</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// This calls KernelTestCase::bootKernel(), and creates a</span></span>
<span class="line">        <span class="token comment">// &quot;client&quot; that is acting as the browser</span></span>
<span class="line">        <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Request a specific page</span></span>
<span class="line">        <span class="token variable">$crawler</span> <span class="token operator">=</span> <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Validate a successful response and some content</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertResponseIsSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSelectorTextContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)]))}const c=n(p,[["render",l],["__file","symfony5创建单元测试.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony5%E5%88%9B%E5%BB%BA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","title":"symfony5创建单元测试","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony5创建单元测试","description":"symfony5创建单元测试"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony5创建单元测试.md"}');export{c as comp,r as data};
