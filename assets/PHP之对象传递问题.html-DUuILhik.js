import{_ as a,c as n,d as e,o as l}from"./app-CHrRue27.js";const i={};function t(p,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h5 id="php之对象传递问题" tabindex="-1"><a class="header-anchor" href="#php之对象传递问题"><span>PHP之对象传递问题</span></a></h5><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">本来以为对象作为参数传递或者赋值是引用传递的，但是不是这样的，其实是对象标识符（即对象句柄）传递，这个句柄允许访问实际的对象。但是有引用传递的效果。</span>
<span class="line"></span>
<span class="line">示例:</span>
<span class="line">class Test {</span>
<span class="line">    public $value = 1;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">function modify(Test $obj) {</span>
<span class="line">    $obj-&gt;value = 99;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">$a = new Test();</span>
<span class="line">modify($a);</span>
<span class="line"></span>
<span class="line">echo $a-&gt;value; // 输出 99，说明 modify 中的修改影响了原始对象</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">class Person {</span>
<span class="line">    public string $name = &#39;Alice&#39;;</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">$a = new Person();</span>
<span class="line">$b = $a;</span>
<span class="line"></span>
<span class="line">$b-&gt;name = &#39;Bob&#39;;</span>
<span class="line"></span>
<span class="line">echo $a-&gt;name; // 输出 Bob ✅</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">如果想创建一个新的独立对象，必须使用 clone：</span>
<span class="line">$c = clone $a;</span>
<span class="line">$c-&gt;name = &#39;Charlie&#39;;</span>
<span class="line"></span>
<span class="line">echo $a-&gt;name; // 仍然是 Bob ✅</span>
<span class="line">echo $c-&gt;name; // 是 Charlie ✅</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">官方文档说明: https://www.php.net/manual/en/language.oop5.references.php</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">对象句柄和&amp;引用传递的区别:</span>
<span class="line">对于 $b = $a 来说， $b 和 $a 是两个变量，分别有自己的内存地址，但是指向的内容是一样的， $b 如果再次被赋值为$c，那就和$a 没关系了</span>
<span class="line">对于 $b = &amp;$a 来说， $b就是$a的alias(别名)， 它们是同一个变量的两个名字， b 如果再次被赋值为$c, 那么$a 也要变</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="通过zval的角度分析" tabindex="-1"><a class="header-anchor" href="#通过zval的角度分析"><span>通过zval的角度分析:</span></a></h5><p>我们现在来<strong>深入底层</strong>探讨：</p><blockquote><p>当执行 <code>$a = new StdClass(); $b = $a;</code> 时，<strong>$a 的 zval 到底是什么结构</strong>，<strong>$b 的 zval 和 $a 的有什么不同？</strong></p></blockquote><p>我们将分两步：</p><ol><li><strong>先理解 zval 是什么（PHP 内部结构）</strong></li><li><strong>具体讲 <code>$a = new StdClass(); $b = $a;</code> 时发生了什么</strong></li></ol><hr><h2 id="🧠-第一步-什么是-zval" tabindex="-1"><a class="header-anchor" href="#🧠-第一步-什么是-zval"><span>🧠 第一步：什么是 zval？</span></a></h2><p><code>zval</code> 是 PHP 用来存储<strong>变量</strong>的内部结构。</p><p>一个 <code>zval</code> 包括这些核心部分：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>value</code></td><td>存储实际值（int、string、object 句柄等）</td></tr><tr><td><code>refcount</code></td><td>引用计数（这个值被几个变量引用）</td></tr><tr><td><code>is_ref</code></td><td>是否是显式引用（通过 <code>&amp;</code> 赋值）</td></tr><tr><td><code>type</code></td><td>类型信息，如 IS_STRING、IS_OBJECT 等</td></tr></tbody></table><hr><h2 id="🧪-第二步-执行-a-new-stdclass-后发生了什么" tabindex="-1"><a class="header-anchor" href="#🧪-第二步-执行-a-new-stdclass-后发生了什么"><span>🧪 第二步：执行 <code>$a = new StdClass();</code> 后发生了什么？</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这一步会创建：</p><h3 id="🔹-一个对象结构-heap-上" tabindex="-1"><a class="header-anchor" href="#🔹-一个对象结构-heap-上"><span>🔹 一个对象结构（heap 上）：</span></a></h3><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">对象实例（如地址 0xABC123）：</span>
<span class="line">  class_name =&gt; StdClass</span>
<span class="line">  properties =&gt; []</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-一个-zval-给-a" tabindex="-1"><a class="header-anchor" href="#🔹-一个-zval-给-a"><span>🔹 一个 zval 给 <code>$a</code>：</span></a></h3><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">zval_a:</span>
<span class="line">  type =&gt; IS_OBJECT</span>
<span class="line">  value =&gt; handle 指向 0xABC123</span>
<span class="line">  refcount =&gt; 1</span>
<span class="line">  is_ref =&gt; 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量 <code>$a</code> 指向这个 <code>zval_a</code>。</p><hr><h2 id="然后-b-a-又做了什么" tabindex="-1"><a class="header-anchor" href="#然后-b-a-又做了什么"><span>然后 <code>$b = $a;</code> 又做了什么？</span></a></h2><p>这一步不是复制对象，也不是复制 zval，而是：</p><ul><li><strong>复制 zval 的指针（zval_b 指向和 zval_a 同一块内存）</strong></li><li><strong>zval 的引用计数 <code>refcount++</code></strong></li></ul><p>所以现在：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">$a 和 $b 都指向同一个 zval：</span>
<span class="line"></span>
<span class="line">zval_shared:</span>
<span class="line">  type =&gt; IS_OBJECT</span>
<span class="line">  value =&gt; handle → 0xABC123</span>
<span class="line">  refcount =&gt; 2</span>
<span class="line">  is_ref =&gt; 0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：<strong>$a 和 $b 是两个变量名，但它们指向同一个 zval（zval 本身在内存中只有一份）</strong></p></blockquote><hr><h2 id="✅-修改对象属性时的行为" tabindex="-1"><a class="header-anchor" href="#✅-修改对象属性时的行为"><span>✅ 修改对象属性时的行为</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$b</span><span class="token operator">-&gt;</span><span class="token property">x</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>你是在操作对象句柄（0xABC123）指向的内存，所以 <code>$a-&gt;x</code> 也变了。</p><hr><h2 id="❗但再举一个反例-看看不一样的地方" tabindex="-1"><a class="header-anchor" href="#❗但再举一个反例-看看不一样的地方"><span>❗但再举一个反例，看看不一样的地方：</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时 b 不再指向原对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在 <code>$b</code> 会指向新的 zval：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">$b → zval_b_new</span>
<span class="line">  value =&gt; handle → 0xDEF456</span>
<span class="line">  refcount =&gt; 1</span>
<span class="line"></span>
<span class="line">$a → 原 zval_a</span>
<span class="line">  value =&gt; handle → 0xABC123</span>
<span class="line">  refcount =&gt; 1（原来是 2，现在 -1）</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔁-如果你用了引用" tabindex="-1"><a class="header-anchor" href="#🔁-如果你用了引用"><span>🔁 如果你用了引用 <code>&amp;</code>：</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时会合并 <code>$a</code> 和 <code>$b</code> 的符号表变量名，让它们指向同一个 zval，并把 <code>is_ref</code> 设置为 1：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">zval_ref:</span>
<span class="line">  type =&gt; IS_OBJECT</span>
<span class="line">  value =&gt; handle → 0xABC123</span>
<span class="line">  refcount =&gt; 2</span>
<span class="line">  is_ref =&gt; 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，无论你对 <code>$a</code> 还是 <code>$b</code> 赋新值、改指向，都完全等价了（引用语义）。</p><hr><h2 id="🧪-如何验证这些行为" tabindex="-1"><a class="header-anchor" href="#🧪-如何验证这些行为"><span>🧪 如何验证这些行为？</span></a></h2><p>可以用 PHP 的 <code>debug_zval_dump()</code>：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">debug_zval_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出类似：</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">object(stdClass)#1 (0) refcount(2)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>说明 <code>$a</code> 的 <code>zval</code> 被引用了 2 次（$a 和 $b）。</p><hr><h2 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结</span></a></h2><table><thead><tr><th>操作</th><th>行为</th></tr></thead><tbody><tr><td><code>$a = new StdClass();</code></td><td>创建 zval，<code>refcount = 1</code>，<code>is_ref = 0</code></td></tr><tr><td><code>$b = $a;</code></td><td>指向同一 zval，<code>refcount++</code></td></tr><tr><td><code>$b = &amp;$a;</code></td><td>真正引用，两个变量名绑定同一个 zval，<code>is_ref = 1</code></td></tr><tr><td>修改对象属性</td><td>改的是对象实例本身，两个变量看到的结果都变</td></tr><tr><td>重新赋新对象给 <code>$b</code></td><td><code>$b</code> 指向新 zval，<code>$a</code> 不受影响</td></tr></tbody></table><hr><p>可以发现，refcount 都为2，但是 is_ref 一个是0 一个是1</p><p>官方文档说明: https://www.php.net/manual/zh/function.debug-zval-dump.php</p><h5 id="关于写时复制" tabindex="-1"><a class="header-anchor" href="#关于写时复制"><span>关于写时复制:</span></a></h5><p>我们现在来深入讲解：</p><hr><h2 id="🧠-php-的-copy-on-write-cow-写时复制-机制-zval-管理图解" tabindex="-1"><a class="header-anchor" href="#🧠-php-的-copy-on-write-cow-写时复制-机制-zval-管理图解"><span>🧠 PHP 的 Copy-On-Write（COW，写时复制）机制 + zval 管理图解</span></a></h2><hr><h2 id="一、背景-php-的变量实现方式" tabindex="-1"><a class="header-anchor" href="#一、背景-php-的变量实现方式"><span>一、背景：PHP 的变量实现方式</span></a></h2><p>PHP 每个变量都不是直接保存值，而是通过一个叫 <strong>zval</strong> 的结构来管理值和引用关系。</p><h3 id="一个-zval-结构包含" tabindex="-1"><a class="header-anchor" href="#一个-zval-结构包含"><span>一个 <code>zval</code> 结构包含：</span></a></h3><ul><li><code>value</code>: 变量的值（string/int/object/array...）</li><li><code>refcount</code>: 有多少个变量共享这个 zval（引用计数）</li><li><code>is_ref</code>: 是否为“引用模式”（即通过 <code>&amp;</code> 建立 alias）</li></ul><hr><h2 id="二、赋值行为图解" tabindex="-1"><a class="header-anchor" href="#二、赋值行为图解"><span>二、赋值行为图解</span></a></h2><h3 id="情况-1-普通赋值-非引用" tabindex="-1"><a class="header-anchor" href="#情况-1-普通赋值-非引用"><span>情况 1：普通赋值（非引用）</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 发生了什么：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+------+        +-----------------------+</span>
<span class="line">| $a   | -----&gt; | zval:                 |</span>
<span class="line">|      |        | value: &quot;hello&quot;        |</span>
<span class="line">| $b   | -----&gt; | refcount: 2           |</span>
<span class="line">|      |        | is_ref: 0             |</span>
<span class="line">+------+        +-----------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>$a</code> 和 <code>$b</code> 指向同一个 <code>zval</code></li><li><code>refcount = 2</code></li><li>但 <code>is_ref = 0</code>，表示它们<strong>不是绑定 alias</strong></li><li>改 <code>$a = &#39;world&#39;</code> 会发生 <strong>写时复制</strong>（Copy-On-Write）</li></ul><hr><h3 id="写时复制触发-cow" tabindex="-1"><a class="header-anchor" href="#写时复制触发-cow"><span>写时复制触发（COW）</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;world&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 发生了什么：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Step 1:</span>
<span class="line">$a, $b --&gt; &quot;hello&quot; (refcount = 2, is_ref = 0)</span>
<span class="line"></span>
<span class="line">Step 2:</span>
<span class="line">$a = &#39;world&#39;; // 修改触发 Copy-On-Write：</span>
<span class="line"></span>
<span class="line">    -&gt; PHP 创建一个新的 zval 给 $a</span>
<span class="line">    -&gt; 原 zval 的 refcount--（变 1）</span>
<span class="line">    -&gt; 新 zval 的 refcount = 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">$a ---&gt; &quot;world&quot; (refcount = 1)</span>
<span class="line">$b ---&gt; &quot;hello&quot; (refcount = 1)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 <strong>这样就节省了内存，直到你真的需要修改才复制。</strong></p><hr><h3 id="情况-2-引用赋值-使用" tabindex="-1"><a class="header-anchor" href="#情况-2-引用赋值-使用"><span>情况 2：引用赋值（使用 <code>&amp;</code>）</span></a></h3><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;hello&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>🔍 发生了什么：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">+------+        +------------------------+</span>
<span class="line">| $a   | -----&gt; | zval:                  |</span>
<span class="line">| $b   | -----&gt; | value: &quot;hello&quot;         |</span>
<span class="line">|      |        | refcount: 2            |</span>
<span class="line">|      |        | is_ref: 1   &lt;--------- 绑定 alias</span>
<span class="line">+------+        +------------------------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>$a</code> 和 <code>$b</code> 完全绑定，是 <strong>同一个变量的两个名字</strong></li><li>改任意一方，另一方立即变</li><li>赋值也影响彼此（不是写时复制）</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;world&#39;</span><span class="token punctuation">;</span> <span class="token comment">// $a 也变成 &#39;world&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="三、对象赋值与-cow-的不同" tabindex="-1"><a class="header-anchor" href="#三、对象赋值与-cow-的不同"><span>三、对象赋值与 COW 的不同</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token variable">$obj1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在对象赋值中：</p><ul><li>变量指向的是一个对象句柄（handle）</li><li>PHP 不会复制对象，默认行为就是“引用共享对象”</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$obj2</span><span class="token operator">-&gt;</span><span class="token property">x</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment">// $obj1-&gt;x 也变</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但重要的是：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">stdClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ $obj1 保持原对象</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对象赋值 <strong>不会触发 COW</strong>，因为对象内部不是简单值，而是指向堆上对象内存。</p><hr><h2 id="四、变量表、zval、内存图" tabindex="-1"><a class="header-anchor" href="#四、变量表、zval、内存图"><span>四、变量表、zval、内存图</span></a></h2><h3 id="php-的变量机制可视化如下" tabindex="-1"><a class="header-anchor" href="#php-的变量机制可视化如下"><span>PHP 的变量机制可视化如下：</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Symbol Table (符号表)</span>
<span class="line">+------+     +-----------+</span>
<span class="line">| $a   | --&gt; | zval A    |</span>
<span class="line">| $b   | --&gt; | zval A    |</span>
<span class="line">+------+     +-----------+</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当赋值或引用时：</p><ul><li>变量表指向同一个 zval</li><li>修改时，根据 <code>refcount</code> 和 <code>is_ref</code> 判断是否需要 copy</li><li><code>refcount &gt; 1 &amp;&amp; is_ref == 0</code> → 会触发 COW</li><li><code>is_ref == 1</code> → 强制引用，绝不复制</li></ul><hr><h2 id="五、最佳口诀记忆" tabindex="-1"><a class="header-anchor" href="#五、最佳口诀记忆"><span>五、最佳口诀记忆：</span></a></h2><table><thead><tr><th>类型</th><th>refcount</th><th>is_ref</th><th>是否复制</th></tr></thead><tbody><tr><td>普通赋值</td><td>✅ 增加</td><td>❌ 否</td><td>✅ 修改时复制</td></tr><tr><td>引用赋值（<code>&amp;</code>）</td><td>✅ 增加</td><td>✅ 是</td><td>❌ 不复制</td></tr><tr><td>对象赋值</td><td>✅ 共享</td><td>❌ 否</td><td>❌ 不复制，操作引用</td></tr></tbody></table><hr><h2 id="🧪-推荐调试方法" tabindex="-1"><a class="header-anchor" href="#🧪-推荐调试方法"><span>🧪 推荐调试方法</span></a></h2><p>使用 <code>debug_zval_dump($var)</code> 查看：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;abc&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">debug_zval_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">string(3) &quot;abc&quot;</span>
<span class="line">refcount(2)</span>
<span class="line">is_ref=0</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再用 <code>$b = &amp;$a;</code> 试试看区别。</p><hr>`,111)]))}const c=a(i,[["render",t],["__file","PHP之对象传递问题.html.vue"]]),r=JSON.parse('{"path":"/content/php/base/PHP%E4%B9%8B%E5%AF%B9%E8%B1%A1%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98.html","title":"PHP之对象传递问题","lang":"en-US","frontmatter":{"sidebar":false,"title":"PHP之对象传递问题","head":[["meta",{"name":"title","content":"PHP之对象传递问题"}],["meta",{"name":"description","content":"PHP之对象传递问题"}],["meta",{"name":"keywords","content":"php"}],["meta",{"property":"og:title","content":"PHP之对象传递问题"}],["meta",{"property":"og:description","content":"PHP之对象传递问题"}]]},"headers":[{"level":2,"title":"🧠 第一步：什么是 zval？","slug":"🧠-第一步-什么是-zval","link":"#🧠-第一步-什么是-zval","children":[]},{"level":2,"title":"🧪 第二步：执行 $a = new StdClass(); 后发生了什么？","slug":"🧪-第二步-执行-a-new-stdclass-后发生了什么","link":"#🧪-第二步-执行-a-new-stdclass-后发生了什么","children":[{"level":3,"title":"🔹 一个对象结构（heap 上）：","slug":"🔹-一个对象结构-heap-上","link":"#🔹-一个对象结构-heap-上","children":[]},{"level":3,"title":"🔹 一个 zval 给 $a：","slug":"🔹-一个-zval-给-a","link":"#🔹-一个-zval-给-a","children":[]}]},{"level":2,"title":"然后 $b = $a; 又做了什么？","slug":"然后-b-a-又做了什么","link":"#然后-b-a-又做了什么","children":[]},{"level":2,"title":"✅ 修改对象属性时的行为","slug":"✅-修改对象属性时的行为","link":"#✅-修改对象属性时的行为","children":[]},{"level":2,"title":"❗但再举一个反例，看看不一样的地方：","slug":"❗但再举一个反例-看看不一样的地方","link":"#❗但再举一个反例-看看不一样的地方","children":[]},{"level":2,"title":"🔁 如果你用了引用 &：","slug":"🔁-如果你用了引用","link":"#🔁-如果你用了引用","children":[]},{"level":2,"title":"🧪 如何验证这些行为？","slug":"🧪-如何验证这些行为","link":"#🧪-如何验证这些行为","children":[]},{"level":2,"title":"✅ 总结","slug":"✅-总结","link":"#✅-总结","children":[]},{"level":2,"title":"🧠 PHP 的 Copy-On-Write（COW，写时复制）机制 + zval 管理图解","slug":"🧠-php-的-copy-on-write-cow-写时复制-机制-zval-管理图解","link":"#🧠-php-的-copy-on-write-cow-写时复制-机制-zval-管理图解","children":[]},{"level":2,"title":"一、背景：PHP 的变量实现方式","slug":"一、背景-php-的变量实现方式","link":"#一、背景-php-的变量实现方式","children":[{"level":3,"title":"一个 zval 结构包含：","slug":"一个-zval-结构包含","link":"#一个-zval-结构包含","children":[]}]},{"level":2,"title":"二、赋值行为图解","slug":"二、赋值行为图解","link":"#二、赋值行为图解","children":[{"level":3,"title":"情况 1：普通赋值（非引用）","slug":"情况-1-普通赋值-非引用","link":"#情况-1-普通赋值-非引用","children":[]},{"level":3,"title":"写时复制触发（COW）","slug":"写时复制触发-cow","link":"#写时复制触发-cow","children":[]},{"level":3,"title":"情况 2：引用赋值（使用 &）","slug":"情况-2-引用赋值-使用","link":"#情况-2-引用赋值-使用","children":[]}]},{"level":2,"title":"三、对象赋值与 COW 的不同","slug":"三、对象赋值与-cow-的不同","link":"#三、对象赋值与-cow-的不同","children":[]},{"level":2,"title":"四、变量表、zval、内存图","slug":"四、变量表、zval、内存图","link":"#四、变量表、zval、内存图","children":[{"level":3,"title":"PHP 的变量机制可视化如下：","slug":"php-的变量机制可视化如下","link":"#php-的变量机制可视化如下","children":[]}]},{"level":2,"title":"五、最佳口诀记忆：","slug":"五、最佳口诀记忆","link":"#五、最佳口诀记忆","children":[]},{"level":2,"title":"🧪 推荐调试方法","slug":"🧪-推荐调试方法","link":"#🧪-推荐调试方法","children":[]}],"git":{},"filePathRelative":"content/php/base/PHP之对象传递问题.md"}');export{c as comp,r as data};
