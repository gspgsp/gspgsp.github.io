import{_ as s,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h5 id="symfony7之使用redis缓存" tabindex="-1"><a class="header-anchor" href="#symfony7之使用redis缓存"><span>symfony7之使用redis缓存</span></a></h5><ul><li>部分代码如下</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token comment">//这个是 redis cache servvice 的部分定义</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CachePrefixEnum</span> <span class="token variable">$prefix</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$hashKey</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token variable">$key</span>  <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildCacheKey</span><span class="token punctuation">(</span><span class="token variable">$prefix</span><span class="token punctuation">,</span> <span class="token variable">$hashKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cache</span><span class="token operator">-&gt;</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">isHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>然后在使用的时候，有这么一个定义</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$statisticsDto</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cacheService</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">Enum</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>CachePrefixEnum</span><span class="token operator">::</span><span class="token constant">EVENT_STATS</span><span class="token punctuation">,</span> <span class="token variable">$hashKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$statisticsDto</span> <span class="token keyword">instanceof</span> <span class="token class-name class-name-fully-qualified">Dto<span class="token punctuation">\\</span>Query<span class="token punctuation">\\</span>Statistic<span class="token punctuation">\\</span>EventStatisticsDto</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$announcedEventsDto</span> <span class="token operator">=</span> <span class="token variable">$statisticsDto</span><span class="token operator">-&gt;</span><span class="token function">getAnnouncedEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">//other logic</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>问题是对于拿到的redis缓存数据，为什么可以用 <code>instanceof</code>？ 原因如下:</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. 缓存的是一个对象（例如 EventStatisticsDto 实例）。</span>
<span class="line">2. Redis 缓存实际上存储的是序列化后的字符串（二进制数据）。</span>
<span class="line">3. Symfony 的缓存组件在底层会帮你自动做序列化和反序列化操作。</span>
<span class="line">4. 取缓存时 $item-&gt;get() 返回的就是你缓存时存进去的原始对象（经过自动反序列化后的对象）。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>实际上直接使用<code>redis</code>缓存数据是不可能有这个 <code>instanceof</code> 的</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. Redis 里缓存的是序列化后的字符串，不是对象本身。</span>
<span class="line">2. Symfony 缓存组件（symfony/cache）会自动对数据做序列化和反序列化，所以 $item-&gt;get() 返回的才是反序列化后的对象实例。</span>
<span class="line">3. 如果绕过了 Symfony 缓存组件，直接用 Redis 客户端取数据（原始字符串）时，确实没法 instanceof，因为它就是字符串，不是对象。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="现在深入分析一下symfony7的缓存策略" tabindex="-1"><a class="header-anchor" href="#现在深入分析一下symfony7的缓存策略"><span>现在深入分析一下symfony7的缓存策略</span></a></h5><ul><li>通过 Symfony 缓存组件 API 来操作缓存（CacheItemPoolInterface），而不是直接使用redis命令操作.</li><li>关于 CacheItemPoolInterface 的解释如下 <blockquote><ul><li>它是 PSR-6 缓存接口规范里定义的一个核心接口。</li><li>用于定义缓存池（Cache Pool）的行为。</li><li>Symfony 的缓存组件实现了这个接口（如 Symfony\\Component\\Cache\\Adapter\\RedisAdapter），以标准方式操作缓存项。</li></ul></blockquote></li><li>主要职责和作用 <blockquote><ul><li>获取缓存项（key 对应的缓存数据项）。</li><li>保存缓存项（更新或新建缓存数据）。</li><li>删除缓存项。</li><li>清空缓存池。</li><li>批量操作。</li></ul></blockquote></li><li>核心方法<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name-definition class-name">CacheItemPoolInterface</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 根据缓存键获取缓存项对象 CacheItemInterface</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getItem</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">CacheItemInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 获取多个缓存项对象</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getItems</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$keys</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">iterable</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 检查缓存键是否存在且未过期</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hasItem</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 保存缓存项（写入缓存）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CacheItemInterface</span> <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 延迟保存缓存项（可以批量写入）</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">saveDeferred</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CacheItemInterface</span> <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 提交所有延迟保存的缓存项</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 删除指定缓存项</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">deleteItem</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 删除多个缓存项</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">deleteItems</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$keys</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 清空整个缓存池</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>之前的get()方法与 CacheItemInterface 的关系<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">getItem($key) 返回一个 CacheItemInterface 对象，代表具体的缓存条目。</span>
<span class="line">CacheItemInterface 负责管理缓存条目：</span>
<span class="line">    读取缓存值 (get())</span>
<span class="line">    判断缓存是否命中 (isHit())</span>
<span class="line">    设置缓存值 (set())</span>
<span class="line">    设置过期时间 (expiresAt(), expiresAfter())</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>总结<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. CacheItemPoolInterface 是缓存“池”接口，负责获取、保存、删除缓存项。</span>
<span class="line">2. 每个缓存项通过 CacheItemInterface 表示，封装了具体数据和值和元信息（如过期时间、是否命中）。</span>
<span class="line">3. 它是 PSR-6 规范的一部分，保证缓存库接口的统一。</span>
<span class="line">4. Symfony 实现了这个接口，适配 Redis、Memcached、Filesystem 等多种缓存存储。</span>
<span class="line">5. 使用这个接口，可以优雅且标准地操作缓存，避免直接操作 Redis 客户端细节。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li><p>对于Symfony 7 里你想用 Redis 缓存，一般就是用 <code>Adapter\\RedisAdapter</code>，然后在配置文件里配置就可以了。</p><h5 id="_1-symfony-缓存适配器概念" tabindex="-1"><a class="header-anchor" href="#_1-symfony-缓存适配器概念"><span>1. Symfony 缓存适配器概念</span></a></h5><ul><li><code>Symfony\\Component\\Cache\\Adapter\\RedisAdapter</code> 是 Symfony Cache 组件提供的 Redis 缓存适配器。</li><li>它实现了 PSR-6 的 <code>CacheItemPoolInterface</code>，你可以用它操作缓存（读写缓存项）。</li></ul><h5 id="_2-如何配置和使用-redisadapter" tabindex="-1"><a class="header-anchor" href="#_2-如何配置和使用-redisadapter"><span>2. 如何配置和使用 RedisAdapter</span></a></h5><h5 id="方法一-在-symfony-配置文件中配置缓存" tabindex="-1"><a class="header-anchor" href="#方法一-在-symfony-配置文件中配置缓存"><span>方法一：在 Symfony 配置文件中配置缓存</span></a></h5><ul><li>如果是 Symfony Flex 项目，一般在 <code>config/packages/cache.yaml</code> 或 <code>config/packages/framework.yaml</code> 配置：</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">framework</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cache</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">pools</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">app.redis_cache</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">adapter</span><span class="token punctuation">:</span> <span class="token string">&#39;cache.adapter.redis&#39;</span></span>
<span class="line">                <span class="token key atrule">default_lifetime</span><span class="token punctuation">:</span> <span class="token number">3600</span></span>
<span class="line">                <span class="token key atrule">provider</span><span class="token punctuation">:</span> <span class="token string">&#39;redis://localhost&#39;</span>  <span class="token comment"># 或者用环境变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样配置后，你就可以在代码里通过依赖注入拿到这个缓存池：</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\\</span>Cache<span class="token punctuation">\\</span>CacheItemPoolInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token class-name type-declaration">CacheItemPoolInterface</span> <span class="token variable">$redisCache</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">cache</span> <span class="token operator">=</span> <span class="token variable">$redisCache</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>或者你直接通过服务名获取：<code>app.redis_cache</code></li></ul><h5 id="方法二-手动创建-redisadapter" tabindex="-1"><a class="header-anchor" href="#方法二-手动创建-redisadapter"><span>方法二：手动创建 RedisAdapter</span></a></h5><p>如果你想手动创建：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Cache<span class="token punctuation">\\</span>Adapter<span class="token punctuation">\\</span>RedisAdapter</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$redisClient</span> <span class="token operator">=</span> <span class="token class-name static-context">RedisAdapter</span><span class="token operator">::</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;redis://localhost&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$cache</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisAdapter</span><span class="token punctuation">(</span><span class="token variable">$redisClient</span><span class="token punctuation">,</span> <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$defaultLifetime</span> <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 <code>$cache</code> 就是一个符合 PSR-6 的缓存池。</p><h5 id="_3-常见环境变量配置" tabindex="-1"><a class="header-anchor" href="#_3-常见环境变量配置"><span>3. 常见环境变量配置</span></a></h5><p>一般会把 Redis 连接串放到 <code>.env</code> 文件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">REDIS_URL=redis://localhost:6379</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在 <code>framework.yaml</code> 里引用：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">framework</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cache</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">pools</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">app.redis_cache</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">adapter</span><span class="token punctuation">:</span> <span class="token string">&#39;cache.adapter.redis&#39;</span></span>
<span class="line">                <span class="token key atrule">provider</span><span class="token punctuation">:</span> <span class="token string">&#39;%env(REDIS_URL)%&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例"><span>4. 使用示例</span></a></h5><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$item</span> <span class="token operator">=</span> <span class="token variable">$cache</span><span class="token operator">-&gt;</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;some_key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">isHit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;some expensive data&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$cache</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><ul><li>Symfony 7 的缓存组件自带多种适配器（Redis、Filesystem、Memcached 等）。</li><li>你只要在配置文件中声明 <code>adapter: cache.adapter.redis</code> 和 Redis 连接字符串即可。</li><li>也可以直接用 <code>RedisAdapter</code> 手动创建缓存池对象。</li><li>通过依赖注入使用缓存，方便优雅。</li></ul></li></ul><hr><h5 id="关于psr6" tabindex="-1"><a class="header-anchor" href="#关于psr6"><span>关于PSR6</span></a></h5><ul><li>参考链接 https://www.php-fig.org/psr/psr-6/</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CacheItemPoolInterface 来自 PSR-6（PHP Standards Recommendation 6），是 PHP-FIG（PHP Framework Interop Group）定义的缓存接口标准。</span>
<span class="line"></span>
<span class="line">不是 PHP 自带:</span>
<span class="line">PHP 本身（内核或标准库）没有缓存相关接口，这需要第三方库或者框架实现。</span>
<span class="line"></span>
<span class="line">Symfony 的实现:</span>
<span class="line">Symfony 7 及其缓存组件（symfony/cache 包）实现了 PSR-6 规范，并提供了具体的类（例如 Symfony\\Component\\Cache\\Adapter\\RedisAdapter）实现了这个接口。</span>
<span class="line"></span>
<span class="line">安装方式:</span>
<span class="line">需要通过 Composer 安装相关包（通常 symfony/cache 会自动依赖 psr/cache，其中包含接口定义）。也可以单独安装 composer require psr/cache</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>symfony7包依赖关系</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1. Symfony 7 框架 本身包含很多组件，但缓存相关功能主要由 symfony/cache 组件提供。</span>
<span class="line">2. symfony/cache 组件实现了 PSR-6 和 PSR-16 缓存标准接口，支持多种缓存适配器（Redis、Memcached、Filesystem 等）。</span>
<span class="line">3. PSR-6 规范接口 是由 psr/cache 这个包定义的，里面包含了 CacheItemPoolInterface、CacheItemInterface 等接口声明。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="关于-php-fig" tabindex="-1"><a class="header-anchor" href="#关于-php-fig"><span>关于 PHP-FIG</span></a></h5><blockquote><p>PHP-FIG（PHP Framework Interop Group）是一个第三方组织，专门致力于推动 PHP 社区各大框架和库之间的互操作性和标准化。</p></blockquote><ul><li><strong>全称</strong>：PHP Framework Interop Group</li><li><strong>性质</strong>：开源社区组织（非盈利性质）</li><li><strong>成立目的</strong>： 为了让不同 PHP 框架和库能更好地协同工作，制定一套统一的编码规范和接口标准（PSR，PHP Standards Recommendations）。</li><li><strong>成员</strong>：来自多个主流 PHP 框架和库的开发者（比如 Symfony、Laravel、Zend Framework、Drupal 等）</li><li><strong>工作方式</strong>：通过讨论和提案，发布规范（PSR），推动 PHP 生态标准化。</li></ul><h5 id="主要贡献" tabindex="-1"><a class="header-anchor" href="#主要贡献"><span>主要贡献</span></a></h5><ul><li><p>制定了很多重要的 PHP 标准规范，如：</p><ul><li><strong>PSR-1</strong>：基础编码规范</li><li><strong>PSR-4</strong>：自动加载规范</li><li><strong>PSR-6</strong>：缓存接口规范</li><li><strong>PSR-7</strong>：HTTP 消息接口</li><li><strong>PSR-12</strong>：代码风格规范 等等...</li></ul></li></ul><h5 id="影响" tabindex="-1"><a class="header-anchor" href="#影响"><span>影响</span></a></h5><ul><li>PHP-FIG 的标准被绝大多数现代 PHP 框架和库广泛采纳。</li><li>它极大地促进了 PHP 生态系统的规范化和互通性。</li><li>Composer（PHP 包管理工具）也很大程度上依赖这些标准。</li></ul><h5 id="简单总结" tabindex="-1"><a class="header-anchor" href="#简单总结"><span>简单总结</span></a></h5><table><thead><tr><th>组织名</th><th>作用</th><th>特点</th></tr></thead><tbody><tr><td>PHP-FIG</td><td>制定 PHP 标准规范（PSR 系列）</td><td>社区驱动，跨框架协作组织</td></tr></tbody></table>`,30)]))}const o=s(t,[["render",l],["__file","symfony7之使用redis缓存.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony7%E4%B9%8B%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98.html","title":"symfony7之使用redis缓存","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7之使用redis缓存","head":[["meta",{"name":"title","content":"symfony7之使用redis缓存"}],["meta",{"name":"description","content":"symfony7之使用redis缓存"}],["meta",{"name":"keywords","content":"php,redis"}],["meta",{"property":"og:title","content":"symfony7之使用redis缓存"}],["meta",{"property":"og:description","content":"symfony7之使用redis缓存"}]]},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony7之使用redis缓存.md"}');export{o as comp,r as data};
