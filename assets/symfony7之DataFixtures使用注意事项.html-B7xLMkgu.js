import{_ as n,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function i(l,s){return t(),a("div",null,s[0]||(s[0]=[e(`<p>symfony7之DataFixtures使用注意事项:</p><p>1&gt;一般直接执行 php bin/console doctrine:fixtures:load --append 即可将数据初始化到数据库。一定要加 --append, 除非是第一次拉项目，初始化数据库, 否则操作会清空整个数据库(purging database)中的所有表，而不是仅仅清空与指定 group 相关的表. 这直接会把已经存在的数据清理掉.</p><p>2&gt;假如后来在DataFixtures又有了新的fixture的话，我只想执行新添加的怎么办 ①一开始想到的是如下方法 php bin/console doctrine:fixtures:load --fixtures=src/DataFixtures/LoadEventSubmissionFileRequiredOptionsData.php --fixtures=src/DataFixtures/LoadEventSubmissionFiletypesData.php --fixtures=src/DataFixtures/LoadEventSubmissionTypeWorkflowsData.php --fixtures=src/DataFixtures/LoadEventSubmissionWorkflowData.php</p><p>但是报： doctrine:fixtures:load [--append] [--group GROUP] [--em EM] [--purger PURGER] [--purge-exclusions PURGE-EXCLUSIONS] [--purge-with-truncate] 也即是没有 --fixtures 选项(说明这个方法是错的，没用)</p><p>②使用 group 解决这个问题(真的很实用)</p><ol><li><p><strong>定义组标签：</strong> 首先，<code>DataFixture</code> 类中实现 <code>FixtureGroupInterface</code>，并定义一个组标签。例如：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>DataFixtures</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FixturesBundle<span class="token punctuation">\\</span>Fixture</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Persistence<span class="token punctuation">\\</span>ObjectManager</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FixturesBundle<span class="token punctuation">\\</span>FixtureGroupInterface</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 必须要实现这个FixtureGroupInterface</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserFixtures</span> <span class="token keyword">extends</span> <span class="token class-name">Fixture</span> <span class="token keyword">implements</span> <span class="token class-name">FixtureGroupInterface</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">load</span><span class="token punctuation">(</span><span class="token class-name type-declaration">ObjectManager</span> <span class="token variable">$manager</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 定义数据加载逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;userGroup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>加载特定的组：</strong> 在执行命令时，可以通过 <code>--group</code> 参数指定要加载的 <code>Fixtures</code> 组：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console doctrine:fixtures:load <span class="token parameter variable">--group</span><span class="token operator">=</span>userGroup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果想同时加载多个组，可以添加多个 <code>--group</code> 参数：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console doctrine:fixtures:load <span class="token parameter variable">--group</span><span class="token operator">=</span>userGroup <span class="token parameter variable">--group</span><span class="token operator">=</span>productGroup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>3&gt;小插曲 当时忘了加 --append, 然后无法直接取消，然后直接关了 terminal, 但是后台的进程肯定还在运行，再次执行加上了 --append, 直接报了下面的错误 An exception occurred while executing a query: SQLSTATE[HY000]: General error: 1205 Lock wait timeout exceeded; try restarting transaction</p><p>原因分析: 因为你在第一次执行 <code>doctrine:fixtures:load</code> 时没有使用 <code>--append</code>，导致数据库在执行清空操作时被锁定，而你中断了这个进程（关闭了 terminal 对话框）。这会导致事务没有正确结束，造成表被锁定，从而引发了后续的锁等待超时问题 (<code>Lock wait timeout exceeded</code>)。</p><h3 id="处理步骤" tabindex="-1"><a class="header-anchor" href="#处理步骤"><span>处理步骤</span></a></h3><h4 id="_1-检查并终止锁定的事务" tabindex="-1"><a class="header-anchor" href="#_1-检查并终止锁定的事务"><span>1. <strong>检查并终止锁定的事务</strong></span></a></h4><p>你可以通过 MySQL 命令来查看和终止未完成的事务：</p><ul><li><p><strong>查看当前的锁定情况</strong>： 使用以下命令查看当前被锁定的事务：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SHOW</span> <span class="token keyword">ENGINE</span> <span class="token keyword">INNODB</span> <span class="token keyword">STATUS</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个命令会返回详细的 InnoDB 状态信息，帮助你找出哪个事务占用了锁。</p></li><li><p><strong>终止锁定的事务</strong>： 使用 <code>SHOW FULL PROCESSLIST</code> 查找长时间运行的查询，然后使用 <code>KILL QUERY</code> 终止它。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SHOW</span> <span class="token keyword">FULL</span> PROCESSLIST<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查找到 <code>state</code> 为 <code>Locked</code> 的查询，记下对应的 <code>ID</code>，然后使用以下命令终止该查询：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">KILL</span> QUERY <span class="token operator">&lt;</span>ID<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_2-重启-mysql-服务-如有必要" tabindex="-1"><a class="header-anchor" href="#_2-重启-mysql-服务-如有必要"><span>2. <strong>重启 MySQL 服务（如有必要）</strong></span></a></h4><p>如果手动终止事务没有效果，或者你不确定哪个事务在持有锁，重启 MySQL 服务会释放所有锁定的事务：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl restart mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3-再次执行-doctrine-fixtures-load-并使用-append" tabindex="-1"><a class="header-anchor" href="#_3-再次执行-doctrine-fixtures-load-并使用-append"><span>3. <strong>再次执行 <code>doctrine:fixtures:load</code> 并使用 <code>--append</code></strong></span></a></h4><p>清除锁定问题后，再次执行 <code>doctrine:fixtures:load</code>，并确保这次使用 <code>--append</code>，以防止数据被清空：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">php bin/console doctrine:fixtures:load <span class="token parameter variable">--group</span><span class="token operator">=</span>event_submission <span class="token parameter variable">--append</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样可以避免再次清空整个数据库，保留已有数据，同时加载指定的 Fixtures。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>未正确结束的事务可能会造成数据库锁定，导致后续操作失败。</li><li>检查并终止锁定的事务，或者通过重启 MySQL 服务释放锁。</li><li>重新运行 <code>doctrine:fixtures:load</code> 时使用 <code>--append</code>，以避免再次触发 <code>purging database</code> 操作。</li></ul>`,21)]))}const c=n(p,[["render",i],["__file","symfony7之DataFixtures使用注意事项.html.vue"]]),r=JSON.parse('{"path":"/content/php/symfony/symfony7%E4%B9%8BDataFixtures%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html","title":"symfony7下关于HasLifecycleCallbacks的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony7下关于HasLifecycleCallbacks的使用","head":[["meta",{"name":"title","content":"symfony7之DataFixtures使用注意事项"}],["meta",{"name":"description","content":"symfony7之DataFixtures使用注意事项"}],["meta",{"name":"keywords","content":"php,DataFixtures"}],["meta",{"property":"og:title","content":"symfony7之DataFixtures使用注意事项"}],["meta",{"property":"og:description","content":"symfony7之DataFixtures使用注意事项"}]]},"headers":[{"level":3,"title":"处理步骤","slug":"处理步骤","link":"#处理步骤","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"content/php/symfony/symfony7之DataFixtures使用注意事项.md"}');export{c as comp,r as data};
