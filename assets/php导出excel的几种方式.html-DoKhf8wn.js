import{_ as s,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h5 id="php导出excel的几种方式" tabindex="-1"><a class="header-anchor" href="#php导出excel的几种方式"><span>php导出excel的几种方式</span></a></h5><ul><li>方式1 通过API返回的方式<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token variable">$writer</span> <span class="token operator">=</span> <span class="token class-name static-context">IOFactory</span><span class="token operator">::</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$spreadsheet</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">ob_get_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant boolean">false</span> <span class="token operator">===</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExportFailedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\\</span>Throwable</span> <span class="token variable">$throwable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExportFailedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExportResponseDto</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>代码结构分析</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.开启输出缓冲区。</span>
<span class="line">2.让 $writer 将 Excel 文件内容写到 php://output（实际上进入缓冲区）。</span>
<span class="line">3.从缓冲区读取数据并清空。</span>
<span class="line">4.如果出错则抛出异常。</span>
<span class="line">5.将文件数据 base64 编码，并和文件名一起封装到 DTO 里返回。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用场景</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.API 导出文件，因为直接传二进制文件在 JSON 中不方便，所以会先 base64 编码。</span>
<span class="line">2.前端拿到数据后，可以 atob() 解码生成 Blob，然后触发下载。</span>
<span class="line">3.避免直接写临时文件到磁盘，提高性能。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ul><li>方式2 通过浏览器直接返回<div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>IOFactory</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">PhpOffice<span class="token punctuation">\\</span>PhpSpreadsheet<span class="token punctuation">\\</span>Spreadsheet</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Bundle<span class="token punctuation">\\</span>FrameworkBundle<span class="token punctuation">\\</span>Controller<span class="token punctuation">\\</span>AbstractController</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>HttpFoundation<span class="token punctuation">\\</span>Response</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\\</span>Component<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Annotation<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ExportController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name">Route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/export&#39;</span><span class="token punctuation">,</span> <span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;app_export_excel&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Response</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1. 创建 Excel 对象</span></span>
<span class="line">        <span class="token variable">$spreadsheet</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Spreadsheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$sheet</span> <span class="token operator">=</span> <span class="token variable">$spreadsheet</span><span class="token operator">-&gt;</span><span class="token function">getActiveSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;A1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Hello World!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token variable">$sheet</span><span class="token operator">-&gt;</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;B1&#39;</span><span class="token punctuation">,</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Y-m-d H:i:s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 2. 创建 Writer</span></span>
<span class="line">        <span class="token variable">$writer</span> <span class="token operator">=</span> <span class="token class-name static-context">IOFactory</span><span class="token operator">::</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$spreadsheet</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 3. 输出头部，告诉浏览器是 Excel 文件</span></span>
<span class="line">        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;export_&#39;</span> <span class="token operator">.</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Ymd_His&#39;</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;.xlsx&#39;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content-Disposition: attachment;filename=&quot;&#39;</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string single-quoted-string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Cache-Control: max-age=0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Expires: 0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Pragma: public&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 4. 保存到 php://output（直接输出给浏览器）</span></span>
<span class="line">        <span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">exit</span><span class="token punctuation">;</span> <span class="token comment">// 终止脚本</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>代码结构分析</p></blockquote><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.不使用 ob_start()</span>
<span class="line">因为我们不需要获取二进制数据进行二次处理，而是直接输出给浏览器。</span>
<span class="line"></span>
<span class="line">2.设置正确的 HTTP 头</span>
<span class="line">让浏览器识别为 Excel 文件并自动下载：</span>
<span class="line">  Content-Type 指定 MIME 类型为 .xlsx</span>
<span class="line">  Content-Disposition 指定下载文件名</span>
<span class="line">  Cache-Control / Expires / Pragma 用于防止缓存</span>
<span class="line"></span>
<span class="line">3.php://output 的作用</span>
<span class="line">它是一个特殊的写入流，写进去的内容会直接发到 HTTP 响应。</span>
<span class="line"></span>
<span class="line">4.exit 结束执行</span>
<span class="line">防止 Symfony 在后面再写额外的 HTML 或 JSON 内容破坏文件。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h5 id="php-output-原理" tabindex="-1"><a class="header-anchor" href="#php-output-原理"><span>php://output 原理</span></a></h5><p><code>php://output</code> 其实是 PHP 提供的一个 <strong>特殊的只写（write-only）流封装器</strong>，它的核心作用是：</p><blockquote><p>让你用文件流的方式，直接把数据写到 PHP 的 <strong>HTTP 响应输出</strong>（也就是发送给客户端的内容）。</p></blockquote><hr><h5 id="_1-它是什么" tabindex="-1"><a class="header-anchor" href="#_1-它是什么"><span><strong>1. 它是什么</strong></span></a></h5><ul><li><code>php://output</code> 是 <a href="https://www.php.net/manual/en/wrappers.php.php" target="_blank" rel="noopener noreferrer">php:// 封装器</a> 系列的一员。</li><li>类型是 <strong>只写流</strong>（write-only stream）。</li><li>它直接连接到 PHP 的 <strong>输出缓冲机制</strong>（Output Buffering System）。</li><li>写入 <code>php://output</code> 的数据 <strong>等效于</strong> 执行 <code>echo</code>、<code>print</code> 或 <code>printf</code>。</li></ul><hr><h5 id="_2-工作原理" tabindex="-1"><a class="header-anchor" href="#_2-工作原理"><span><strong>2. 工作原理</strong></span></a></h5><ol><li><strong>应用层写入</strong></li></ol><ul><li><p>代码执行：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者库中：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>都会将数据写入 <code>php://output</code> 流。</p></li></ul><ol start="2"><li><strong>进入输出缓冲区（可选）</strong></li></ol><ul><li>如果开启了 <code>ob_start()</code>，数据会先进入缓冲区。</li><li>如果没开启缓冲区，数据会直接进入 PHP 的输出处理阶段。</li></ul><ol start="3"><li><strong>SAPI（Server API）阶段</strong></li></ol><ul><li>PHP 会通过对应的 SAPI（如 Apache mod_php、FPM、CLI Server）把数据交给 Web 服务器或直接发给客户端。</li></ul><ol start="4"><li><strong>客户端接收</strong></li></ol><ul><li>最终数据随 HTTP 响应一起发给浏览器、curl、Postman 等客户端。</li></ul><hr><h5 id="_3-关键特性" tabindex="-1"><a class="header-anchor" href="#_3-关键特性"><span><strong>3. 关键特性</strong></span></a></h5><ul><li><p><strong>无文件落地</strong> 不会在磁盘上生成临时文件，直接走内存和输出通道。</p></li><li><p><strong>可以配合任何支持写入流的 API</strong> 比如：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token variable">$writer</span> <span class="token operator">=</span> <span class="token class-name static-context">IOFactory</span><span class="token operator">::</span><span class="token function">createWriter</span><span class="token punctuation">(</span><span class="token variable">$spreadsheet</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Xlsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$writer</span><span class="token operator">-&gt;</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，Excel 数据直接进 HTTP 响应，不用 <code>echo</code> 一堆二进制。</p></li><li><p><strong>受输出缓冲区影响</strong></p><ul><li>如果 <code>ob_start()</code> 已经打开，<code>php://output</code> 会把数据先写入缓冲区，只有 <code>ob_flush()</code> / <code>ob_end_flush()</code> 才会真正发送。</li><li>如果没开启缓冲区，直接写到客户端。</li></ul></li></ul><hr><h5 id="_4-对比其他-php-流" tabindex="-1"><a class="header-anchor" href="#_4-对比其他-php-流"><span><strong>4. 对比其他 php:// 流</strong></span></a></h5><table><thead><tr><th>封装器</th><th>用途</th></tr></thead><tbody><tr><td><code>php://input</code></td><td>只读，读取原始 HTTP 请求体（比如 JSON、XML、文件上传的原始流）</td></tr><tr><td><code>php://output</code></td><td>只写，直接写到 HTTP 响应</td></tr><tr><td><code>php://memory</code></td><td>读写内存中的数据（可随机访问）</td></tr><tr><td><code>php://temp</code></td><td>像 memory，但数据超过限制会写到临时文件</td></tr></tbody></table><hr><h5 id="_5-典型应用" tabindex="-1"><a class="header-anchor" href="#_5-典型应用"><span><strong>5. 典型应用</strong></span></a></h5><ul><li><p><strong>文件导出</strong>（Excel、CSV、PDF 等）</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content-Type: text/csv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Content-Disposition: attachment;filename=&quot;data.csv&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">fputcsv</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">fputcsv</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Alice&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;php://output&#39;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">等价于</span>
<span class="line"><span class="token keyword">echo</span> <span class="token string double-quoted-string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">简单分析<span class="token punctuation">:</span></span>
<span class="line"><span class="token number">1.</span>file_put_contents 调用<span class="token punctuation">:</span></span>
<span class="line">  <span class="token constant">PHP</span> 看到路径是 php<span class="token punctuation">:</span><span class="token comment">//output，就不会去找磁盘文件，而是使用 php:// 封装器 里的 output 模块。</span></span>
<span class="line"></span>
<span class="line"><span class="token number">2.</span>进入输出通道<span class="token punctuation">:</span></span>
<span class="line">  写入的数据会交给 <span class="token constant">PHP</span> 的输出系统（Output Handler）。</span>
<span class="line"></span>
<span class="line"><span class="token number">3.</span>可能先进入输出缓冲区（如果开启了 <span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>）<span class="token punctuation">:</span></span>
<span class="line">  如果有输出缓冲，那么数据先暂存在内存，直到你 <span class="token function">ob_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 或 <span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。</span>
<span class="line">  如果没开启缓冲，直接进入下一步。</span>
<span class="line"></span>
<span class="line"><span class="token number">4.</span>交给 <span class="token constant">SAPI</span>（Server <span class="token constant">API</span>）层<span class="token punctuation">:</span></span>
<span class="line">  <span class="token constant">PHP</span> 把数据交给运行环境：</span>
<span class="line">    <span class="token constant">FPM</span> 模式：交给 <span class="token constant">PHP</span><span class="token operator">-</span><span class="token constant">FPM</span>，再发给 Nginx<span class="token operator">/</span>Apache</span>
<span class="line">    <span class="token constant">CLI</span> 模式：直接输出到终端</span>
<span class="line">    内置服务器：直接发给浏览器</span>
<span class="line"></span>
<span class="line"><span class="token number">5.</span>客户端接收并显示</span>
<span class="line">  浏览器、curl、Postman 等收到 Hello World。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>流式响应大文件</strong>（避免一次性加载到内存）</p></li><li><p><strong><em>与第三方库对接</em></strong>（很多库支持把生成的数据写到流，而不需要文件路径）</p></li></ul>`,30)]))}const o=s(t,[["render",l],["__file","php导出excel的几种方式.html.vue"]]),u=JSON.parse('{"path":"/content/php/base/php%E5%AF%BC%E5%87%BAexcel%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.html","title":"php导出excel的几种方式","lang":"en-US","frontmatter":{"sidebar":false,"title":"php导出excel的几种方式","head":[["meta",{"name":"title","content":"php导出excel的几种方式"}],["meta",{"name":"description","content":"php导出excel的几种方式"}],["meta",{"name":"keywords","content":"php,excel"}],["meta",{"property":"og:title","content":"php导出excel的几种方式"}],["meta",{"property":"og:description","content":"php导出excel的几种方式"}]]},"headers":[],"git":{},"filePathRelative":"content/php/base/php导出excel的几种方式.md"}');export{o as comp,u as data};
