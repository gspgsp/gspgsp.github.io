import{_ as s,c as a,d as t,o as e}from"./app-CHrRue27.js";const p={};function i(o,n){return e(),a("div",null,n[0]||(n[0]=[t(`<p>symfony的form_option关于validation_groups配置的使用:</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre><code><span class="line">场景<span class="token punctuation">:</span></span>
<span class="line">①一个entity和一个entityFormType关联，创建form，这个时候可能用不到validation_groups<span class="token punctuation">,</span>默认的validation_groups值为 <span class="token keyword">Default</span></span>
<span class="line"></span>
<span class="line">②一个entity和多个entityFormType关联</span>
<span class="line">比如某个entity的字段比较多，可能需要多个表单才能创建数据，比如，分了第一步操作，第二步操作，然后提交，那么这个entity才算信息完全。</span>
<span class="line">这个时候就需要多个entityFormType，对entity的数据进行验证，entityFormType<span class="token operator">-</span><span class="token constant">A</span> 可能验证了 userName userEmail<span class="token punctuation">,</span> entityFormType<span class="token operator">-</span><span class="token constant">B</span> 可能验证了 avatar like favor信息</span>
<span class="line"></span>
<span class="line">那么就可以在entity下配置<span class="token punctuation">:</span></span>
<span class="line">@<span class="token function">MainAssert<span class="token punctuation">\\</span>Event</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string double-quoted-string">&quot;Default&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;basic_information&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;basic_information_phys&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;state_change&quot;</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">&quot;event_builder&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">@<span class="token function">MainAssert<span class="token punctuation">\\</span>EventAwards</span><span class="token punctuation">(</span>groups<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string double-quoted-string">&quot;awards&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">这里 entityFormType<span class="token operator">-</span><span class="token constant">A</span>可能配置了 validation_groups<span class="token punctuation">:</span></span>
<span class="line"><span class="token variable">$resolver</span><span class="token operator">-&gt;</span><span class="token function">setDefaults</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;validation_groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;basic_information&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//只会执行在这个组的validator</span></span>
<span class="line">         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">这里 entityFormType<span class="token operator">-</span><span class="token constant">B</span>可能配置了 validation_groups<span class="token punctuation">:</span></span>
<span class="line"><span class="token variable">$resolver</span><span class="token operator">-&gt;</span><span class="token function">setDefaults</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">            <span class="token string single-quoted-string">&#39;validation_groups&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;awards&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//只会执行在这个组的validator</span></span>
<span class="line">         <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">最后控制器下<span class="token punctuation">:</span></span>
<span class="line"><span class="token variable">$form</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context">Form<span class="token punctuation">\\</span>EventAFormType</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// entityFormType-A         </span></span>
<span class="line"><span class="token variable">$form</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context">Form<span class="token punctuation">\\</span>EventBFormType</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$event</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// entityFormType-B</span></span>
<span class="line"></span>
<span class="line">③关于form验证的位置可以有三个地方可以配置</span>
<span class="line"><span class="token number">1</span><span class="token operator">&gt;</span>在formType下的constraints里配置</span>
<span class="line"><span class="token variable">$builder</span></span>
<span class="line">            <span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">TextType</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token string single-quoted-string">&#39;constraints&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">NotBlank</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment">//NotBlank 为框架内置</span></span>
<span class="line">                        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Please enter a email&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">EmailFormat</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment">//EmailFormat 为自定义</span></span>
<span class="line">                        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Please enter a normal email&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">EmailUnique</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token comment">//EmailUnique 为自定义</span></span>
<span class="line">                        <span class="token string single-quoted-string">&#39;message&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Current email already exists!&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">2</span><span class="token operator">&gt;</span>在entity的最外层，全局定义</span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * @ORM\\Entity(repositoryClass=&quot;App\\Repository\\EventRepository&quot;)</span>
<span class="line"> * @ORM\\Table(name=&quot;conferences&quot;, indexes=<span class="token punctuation">{</span>@ORM\\Index(name=&quot;name_system&quot;, columns=<span class="token punctuation">{</span>&quot;name_system&quot;<span class="token punctuation">}</span>),</span>
<span class="line"> *     @ORM\\Index(name=&quot;workflow_id&quot;, columns=<span class="token punctuation">{</span>&quot;workflow_id&quot;<span class="token punctuation">}</span>),</span>
<span class="line"> *     @ORM\\Index(name=&quot;state&quot;, columns=<span class="token punctuation">{</span>&quot;state&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * <span class="token punctuation">}</span>)</span>
<span class="line"> * @ORM\\HasLifecycleCallbacks</span>
<span class="line"> *</span>
<span class="line"> * @MainAssert\\Event(groups=<span class="token punctuation">{</span>&quot;Default&quot;, &quot;basic_information&quot;, &quot;basic_information_phys&quot;, &quot;state_change&quot;, &quot;event_builder&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventBasicInformation(groups=<span class="token punctuation">{</span>&quot;basic_information&quot;, &quot;public_page_edit_basic_information&quot;, &quot;connected_webinar_edit_basic_information&quot;, &quot;connected_webinar_basic_information&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventKeywords(groups=<span class="token punctuation">{</span>&quot;basic_information&quot;, &quot;public_page_edit_basic_information&quot;, &quot;connected_webinar_basic_information&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventRegistrationSettingsBasic(groups=<span class="token punctuation">{</span>&quot;registration_basic&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventRegistrationSettingsFull(groups=<span class="token punctuation">{</span>&quot;registration_full&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventRegistrationSettingsDates(groups=<span class="token punctuation">{</span>&quot;registration_basic&quot;, &quot;registration_full&quot;, &quot;public_page_edit_basic_information&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventSubmissionSettings(groups=<span class="token punctuation">{</span>&quot;submission_settings&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventSubmissionSettingsDates(groups=<span class="token punctuation">{</span>&quot;submission_settings&quot;, &quot;public_page_edit_basic_information&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventAwards(groups=<span class="token punctuation">{</span>&quot;awards&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @MainAssert\\EventPrograms(groups=<span class="token punctuation">{</span>&quot;programs&quot;<span class="token punctuation">}</span>)</span>
<span class="line"> * @Annotation\\FileUploads(subFolder=&quot;/&quot;)</span>
<span class="line"> * @Annotation\\MultiFileUploads</span>
<span class="line"> */</span></span>
<span class="line"></span>
<span class="line"><span class="token number">3</span><span class="token operator">&gt;</span>在entity的指定字段上定义</span>
<span class="line">   <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span><span class="token keyword">null</span></span></span>
<span class="line">     *</span>
<span class="line">     * @ORM\\Column(name=&quot;sponsors_description&quot;, type=&quot;text&quot;, nullable=true)</span>
<span class="line">     * @AcmeAssert\\TinymceField(groups=<span class="token punctuation">{</span>&quot;sponsor_tinymce&quot;<span class="token punctuation">}</span>) // use App\\Validator\\Constraints as AcmeAssert;</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$sponsorsDescription</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * <span class="token keyword">@var</span> <span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">|</span><span class="token keyword">null</span></span></span>
<span class="line">     *</span>
<span class="line">     * @ORM\\Column(type=&quot;string&quot;, nullable=true)</span>
<span class="line">     * @Assert\\NotBlank(groups=<span class="token punctuation">{</span>&quot;basic_information&quot;, &quot;public_page_edit_basic_information&quot;, &quot;connected_webinar_basic_information&quot;, &quot;connected_webinar_edit_basic_information&quot;<span class="token punctuation">}</span>) // use Symfony\\Component\\Validator\\Constraints as Assert;</span>
<span class="line">     * @Assert\\EnableAutoMapping</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$name_full</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const c=s(p,[["render",i],["__file","symfony的form_option关于validation_groups配置的使用.html.vue"]]),u=JSON.parse('{"path":"/content/php/symfony/symfony%E7%9A%84form_option%E5%85%B3%E4%BA%8Evalidation_groups%E9%85%8D%E7%BD%AE%E7%9A%84%E4%BD%BF%E7%94%A8.html","title":"symfony的form_option关于validation_groups配置的使用","lang":"en-US","frontmatter":{"sidebar":false,"title":"symfony的form_option关于validation_groups配置的使用","description":"symfony的form_option关于validation_groups配置的使用"},"headers":[],"git":{},"filePathRelative":"content/php/symfony/symfony的form_option关于validation_groups配置的使用.md"}');export{c as comp,u as data};
