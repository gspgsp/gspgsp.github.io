import{_ as s,c as a,d as t,o as p}from"./app-CHrRue27.js";const e={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[t(`<p>golang通过反射获取数据类型并且实例化对象: 主要是有时候需要判断 interface{}类型数据，对应的源数据类型，可以通过下面的方法实现</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// DuplicateString d 是 []Type 类型的数据</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">DuplicateString</span><span class="token punctuation">(</span>d <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">	t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">if</span> t<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">{</span></span>
<span class="line">		t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//元素的类型</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	newStruct <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token comment">// 调用反射创建对象</span></span>
<span class="line">	newStruct<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;Suits&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;机车&quot;</span><span class="token punctuation">)</span> <span class="token comment">//设置值</span></span>
<span class="line">	<span class="token keyword">return</span> newStruct</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const i=s(e,[["render",c],["__file","golang通过反射获取数据类型并且实例化对象.html.vue"]]),u=JSON.parse('{"path":"/content/go/base/golang%E9%80%9A%E8%BF%87%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B9%B6%E4%B8%94%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%AF%B9%E8%B1%A1.html","title":"golang通过反射获取数据类型并且实例化对象","lang":"en-US","frontmatter":{"sidebar":false,"title":"golang通过反射获取数据类型并且实例化对象","description":"golang通过反射获取数据类型并且实例化对象"},"headers":[],"git":{},"filePathRelative":"content/go/base/golang通过反射获取数据类型并且实例化对象.md"}');export{i as comp,u as data};
