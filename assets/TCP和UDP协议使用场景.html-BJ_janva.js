import{_ as a,c as n,d as r,o as s}from"./app-CHrRue27.js";const l={};function d(e,t){return s(),n("div",null,t[0]||(t[0]=[r('<h3 id="tcp和udp协议使用场景" tabindex="-1"><a class="header-anchor" href="#tcp和udp协议使用场景"><span>TCP和UDP协议使用场景</span></a></h3><h4 id="tcp-的典型使用场景-结合它的特性来看。" tabindex="-1"><a class="header-anchor" href="#tcp-的典型使用场景-结合它的特性来看。"><span><strong>TCP 的典型使用场景</strong>，结合它的特性来看。</span></a></h4><h5 id="🔹-先看-tcp-的特点" tabindex="-1"><a class="header-anchor" href="#🔹-先看-tcp-的特点"><span>🔹 先看 TCP 的特点</span></a></h5><ul><li><strong>面向连接</strong>：三次握手建立连接，保证通信可靠。</li><li><strong>可靠传输</strong>：有序、无丢失、无重复（靠序列号、确认应答、重传）。</li><li><strong>流量控制 &amp; 拥塞控制</strong>：保证传输不会把对方或网络压垮。</li><li><strong>面向字节流</strong>：数据是连续的字节流，适合大块数据传输。</li></ul><p>因此：<strong>TCP 适合对数据完整性和可靠性要求高的场景</strong>。</p><hr><h5 id="🔹-tcp-使用场景" tabindex="-1"><a class="header-anchor" href="#🔹-tcp-使用场景"><span>🔹 TCP 使用场景</span></a></h5><h5 id="_1-网页访问-http-https" tabindex="-1"><a class="header-anchor" href="#_1-网页访问-http-https"><span>1. <strong>网页访问（HTTP/HTTPS）</strong></span></a></h5><ul><li>绝大多数网页加载基于 <strong>HTTP/1.1 和 HTTP/2 → TCP</strong>（HTTP/3 除外，它基于 QUIC/UDP）。</li><li>要求：数据必须完整，HTML/CSS/JS 少一个字节都可能出错。</li></ul><h5 id="_2-文件传输" tabindex="-1"><a class="header-anchor" href="#_2-文件传输"><span>2. <strong>文件传输</strong></span></a></h5><ul><li><strong>FTP、SFTP、FTPS、SMB、NFS</strong> 等。</li><li>要求：文件必须 100% 完整，不能丢数据。</li></ul><h5 id="_3-电子邮件" tabindex="-1"><a class="header-anchor" href="#_3-电子邮件"><span>3. <strong>电子邮件</strong></span></a></h5><ul><li><strong>SMTP、IMAP、POP3</strong> 都基于 TCP。</li><li>要求：邮件必须完整送达，不能缺失。</li></ul><h5 id="_4-数据库访问" tabindex="-1"><a class="header-anchor" href="#_4-数据库访问"><span>4. <strong>数据库访问</strong></span></a></h5><ul><li><strong>MySQL、PostgreSQL、Oracle、SQL Server</strong> 等。</li><li>要求：SQL 查询结果必须可靠返回，事务数据绝不能丢。</li></ul><h5 id="_5-远程登录" tabindex="-1"><a class="header-anchor" href="#_5-远程登录"><span>5. <strong>远程登录</strong></span></a></h5><ul><li><strong>SSH、Telnet</strong>。</li><li>要求：命令和输出必须可靠有序，不能乱序。</li></ul><h5 id="_6-即时通讯-文字为主" tabindex="-1"><a class="header-anchor" href="#_6-即时通讯-文字为主"><span>6. <strong>即时通讯（文字为主）</strong></span></a></h5><ul><li><strong>微信文字聊天、Slack、WhatsApp 消息</strong>（消息层用 TCP 或基于 TCP 的协议）。</li><li>要求：文字消息不能丢，必须按顺序送达。</li><li>（语音/视频实时通话则更多走 UDP）</li></ul><h5 id="_7-大多数-api-调用" tabindex="-1"><a class="header-anchor" href="#_7-大多数-api-调用"><span>7. <strong>大多数 API 调用</strong></span></a></h5><ul><li>REST API（基于 HTTP/HTTPS）</li><li>gRPC（默认基于 HTTP/2 → TCP）</li><li>要求：请求和响应必须可靠。</li></ul><h5 id="_8-大部分区块链网络" tabindex="-1"><a class="header-anchor" href="#_8-大部分区块链网络"><span>8. <strong>大部分区块链网络</strong></span></a></h5><ul><li>例如 <strong>比特币、以太坊 P2P 节点</strong>，常用 TCP 传输区块数据。</li></ul><hr><h4 id="🔹-udp-的使用场景" tabindex="-1"><a class="header-anchor" href="#🔹-udp-的使用场景"><span>🔹 UDP 的使用场景</span></a></h4><h5 id="🔹-先回顾-udp-特点" tabindex="-1"><a class="header-anchor" href="#🔹-先回顾-udp-特点"><span>🔹 先回顾 UDP 特点</span></a></h5><ul><li><strong>无连接</strong>：不需要三次握手，直接发包。</li><li><strong>不可靠</strong>：不保证包一定送达，也不保证顺序。</li><li><strong>轻量级</strong>：头部开销小（8字节，对比 TCP 的 20+ 字节）。</li><li><strong>实时性强</strong>：延迟低，不需要等待确认。</li></ul><p>所以：<strong>UDP 适合对速度要求高、但能容忍部分丢包的场景</strong>。</p><h5 id="🔹-典型使用场景" tabindex="-1"><a class="header-anchor" href="#🔹-典型使用场景"><span>🔹 典型使用场景</span></a></h5><h5 id="_1-实时音视频-语音通话" tabindex="-1"><a class="header-anchor" href="#_1-实时音视频-语音通话"><span>1. <strong>实时音视频/语音通话</strong></span></a></h5><ul><li>场景：Zoom、微信语音、腾讯会议、直播推流</li><li>原因：语音/视频是实时流，偶尔丢几个包只会造成瞬时马赛克，比延迟要好得多。</li><li>协议：很多基于 <strong>RTP/RTCP (Real-time Transport Protocol)</strong>，底层是 UDP。</li></ul><h5 id="_2-在线游戏" tabindex="-1"><a class="header-anchor" href="#_2-在线游戏"><span>2. <strong>在线游戏</strong></span></a></h5><ul><li>场景：LOL、王者荣耀、CS:GO 等</li><li>原因：游戏对实时性要求高，玩家移动/攻击数据必须快速同步，丢个包就算了，下一个包会更新位置。</li><li>协议：常见的游戏引擎（如 Unity、Unreal）提供 UDP 网络模块。</li></ul><h5 id="_3-dns-域名解析" tabindex="-1"><a class="header-anchor" href="#_3-dns-域名解析"><span>3. <strong>DNS (域名解析)</strong></span></a></h5><ul><li>场景：解析 <code>www.example.com -&gt; IP</code></li><li>原因：DNS 查询通常只有一个请求+一个响应，短小快速，不必建立 TCP 连接。</li><li>说明：大部分 DNS 用 UDP，只有在响应过长或需要可靠性时才会切 TCP。</li></ul><h5 id="_4-dhcp-动态主机配置协议" tabindex="-1"><a class="header-anchor" href="#_4-dhcp-动态主机配置协议"><span>4. <strong>DHCP (动态主机配置协议)</strong></span></a></h5><ul><li>场景：电脑开机自动获取 IP 地址</li><li>原因：刚开机时还没有 IP，无法建立 TCP 连接；用 UDP 广播发送发现包更合适。</li></ul><h5 id="_5-流媒体传输" tabindex="-1"><a class="header-anchor" href="#_5-流媒体传输"><span>5. <strong>流媒体传输</strong></span></a></h5><ul><li>场景：视频直播（RTSP、QUIC 之前的 RTP/UDP 流）、IPTV</li><li>原因：对实时性要求高，允许一定丢包，UDP 更适合。</li></ul><h5 id="_6-物联网-iot-和轻量协议" tabindex="-1"><a class="header-anchor" href="#_6-物联网-iot-和轻量协议"><span>6. <strong>物联网（IoT）和轻量协议</strong></span></a></h5><ul><li>场景：传感器上报数据、MQTT-SN 等</li><li>原因：设备算力有限，UDP 更节省资源。</li></ul><h5 id="_7-新一代协议-基于-udp-封装可靠性" tabindex="-1"><a class="header-anchor" href="#_7-新一代协议-基于-udp-封装可靠性"><span>7. <strong>新一代协议（基于 UDP 封装可靠性）</strong></span></a></h5><ul><li><p><strong>QUIC（HTTP/3 使用）</strong></p><ul><li>Google 开发，跑在 UDP 上，但自己实现了可靠传输、加密、多路复用。</li><li>好处：比 TCP+TLS+HTTP/2 快，尤其适合移动网络。</li></ul></li><li><p>所以，HTTP/3 = QUIC = 基于 UDP，但表现出类似 TCP 的可靠性。</p></li></ul><hr><h4 id="tcp和udp对比" tabindex="-1"><a class="header-anchor" href="#tcp和udp对比"><span>TCP和UDP对比</span></a></h4><p><strong>TCP vs UDP 对比表 + 场景举例</strong></p><table><thead><tr><th>特性</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td><strong>类型</strong></td><td>面向连接</td><td>无连接</td></tr><tr><td><strong>可靠性</strong></td><td>可靠传输，保证数据完整、有序</td><td>不保证可靠性，可能丢包或乱序</td></tr><tr><td><strong>数据传输</strong></td><td>面向字节流</td><td>面向报文（Message）</td></tr><tr><td><strong>连接建立</strong></td><td>三次握手</td><td>无需握手，直接发包</td></tr><tr><td><strong>连接关闭</strong></td><td>四次挥手</td><td>不需要关闭</td></tr><tr><td><strong>流量控制</strong></td><td>有（避免拥塞）</td><td>无</td></tr><tr><td><strong>传输延迟</strong></td><td>较高（可靠性开销）</td><td>低（轻量、实时）</td></tr><tr><td><strong>头部开销</strong></td><td>20 字节</td><td>8 字节</td></tr><tr><td><strong>适合场景</strong></td><td>文件传输、网页访问、邮件、数据库、远程登录</td><td>实时语音/视频、在线游戏、DNS 查询、直播、IoT 上报</td></tr><tr><td><strong>典型应用协议</strong></td><td>HTTP/HTTPS、FTP/SFTP、SMTP/IMAP/POP3、MySQL/PostgreSQL、SSH</td><td>DNS、DHCP、RTP/RTCP（音视频）、QUIC（HTTP/3）、游戏自定义协议</td></tr><tr><td><strong>使用特点</strong></td><td>数据完整性优先，允许延迟</td><td>速度和实时性优先，可容忍丢包</td></tr></tbody></table><hr><h4 id="🔹-总结对比" tabindex="-1"><a class="header-anchor" href="#🔹-总结对比"><span>🔹 总结对比</span></a></h4><ul><li><strong>TCP</strong> → 数据必须完整，能等，适合文件、网页、数据库、邮件、API。</li><li><strong>UDP</strong> → 要快、实时，丢一点没关系，适合语音视频、游戏、DNS、直播。</li></ul>',50)]))}const i=a(l,[["render",d],["__file","TCP和UDP协议使用场景.html.vue"]]),h=JSON.parse('{"path":"/content/other/spread/TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"TCP和UDP协议使用场景","lang":"en-US","frontmatter":{"sidebar":false,"title":"TCP和UDP协议使用场景","head":[["meta",{"name":"title","content":"TCP和UDP协议使用场景"}],["meta",{"name":"description","content":"TCP和UDP协议使用场景"}],["meta",{"name":"keywords","content":"TCP,UDP"}],["meta",{"property":"og:title","content":"TCP和UDP协议使用场景"}],["meta",{"property":"og:description","content":"TCP和UDP协议使用场景"}]]},"headers":[{"level":3,"title":"TCP和UDP协议使用场景","slug":"tcp和udp协议使用场景","link":"#tcp和udp协议使用场景","children":[]}],"git":{},"filePathRelative":"content/other/spread/TCP和UDP协议使用场景.md"}');export{i as comp,h as data};
