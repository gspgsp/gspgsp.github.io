import{_ as s,c as a,d as e,o as t}from"./app-CHrRue27.js";const p={};function l(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<p>有时候需要将ascall转成对应的字母 String.fromCharCode(num1[, ...[, numN]]) 返回值：一个长度为 N 的字符串，由 N 个指定的 UTF-16 代码单元组成</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token literal-property property">ex</span><span class="token operator">:</span></span>
<span class="line">String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span> <span class="token comment">// &#39;a&#39;</span></span>
<span class="line">String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// &#39;abc&#39;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反过来就是：str.charCodeAt(index)，index默认为下标0</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token literal-property property">ex</span><span class="token operator">:</span></span>
<span class="line"><span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 97</span></span>
<span class="line"><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 98</span></span>
<span class="line"><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// NAN</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)]))}const o=s(p,[["render",l],["__file","js将ascall码转字母.html.vue"]]),r=JSON.parse('{"path":"/content/front/js/js%E5%B0%86ascall%E7%A0%81%E8%BD%AC%E5%AD%97%E6%AF%8D.html","title":"js将ascall码转字母","lang":"en-US","frontmatter":{"sidebar":false,"title":"js将ascall码转字母","description":"js将ascall码转字母"},"headers":[],"git":{},"filePathRelative":"content/front/js/js将ascall码转字母.md"}');export{o as comp,r as data};
