import{_ as s,c as a,d as e,o as l}from"./app-CHrRue27.js";const i={};function p(c,n){return l(),a("div",null,n[0]||(n[0]=[e(`<p>php8泛型的体现:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;?php</span>
<span class="line">  </span>
<span class="line">namespace App\\Model\\Dto\\Mapper;</span>
<span class="line">  </span>
<span class="line">use App\\Model\\Dto\\Interface\\ResponsibleInterface;</span>
<span class="line">  </span>
<span class="line">/**</span>
<span class="line"> * @template TResponsibleInterface of ResponsibleInterface</span>
<span class="line"> * @template TMapperDtoInterface of MapperDtoInterface</span>
<span class="line"> */</span>
<span class="line">interface MapperInterface</span>
<span class="line">{</span>
<span class="line">    /**</span>
<span class="line">     * @param TMapperDtoInterface $data</span>
<span class="line">     *</span>
<span class="line">     * @return TResponsibleInterface</span>
<span class="line">     */</span>
<span class="line">    public function toDto(MapperDtoInterface $data): ResponsibleInterface;</span>
<span class="line"></span>
<span class="line">    /**</span>
<span class="line">     * @param array&lt;TMapperDtoInterface&gt; $data</span>
<span class="line">     *</span>
<span class="line">     * @return array&lt;TResponsibleInterface&gt;</span>
<span class="line">     */</span>
<span class="line">    public function toListDto(array $data): array;</span>
<span class="line">}</span>
<span class="line">  </span>
<span class="line">  </span>
<span class="line">关于 \`@template\` 标签：</span>
<span class="line">  </span>
<span class="line">1. 这是 PHP 文档注解（Docblock）中的特性，不完全属于 PHP 8 的语法特性</span>
<span class="line">  </span>
<span class="line">2. 作用是为泛型提供类型注解和文档说明</span>
<span class="line">   - 帮助开发者理解接口或类的泛型约束</span>
<span class="line">   - 为 IDE 和静态分析工具提供类型提示</span>
<span class="line">   - 增强代码的类型安全性和可读性</span>
<span class="line">  </span>
<span class="line">3. 示例中的 \`@template\` 声明了两个泛型类型：</span>
<span class="line">   - \`TResponsibleInterface\`：受限于必须实现 \`ResponsibleInterface\`</span>
<span class="line">   - \`TMapperDtoInterface\`：受限于必须实现 \`MapperDtoInterface\`</span>
<span class="line">  </span>
<span class="line">4. 语法格式：\`@template 泛型名称 [of 约束类型]\`</span>
<span class="line">  </span>
<span class="line">这是一种文档和类型注解，提高代码的类型安全性和可读性。</span>
<span class="line">  </span>
<span class="line">  </span>
<span class="line">/**</span>
<span class="line"> * @implements MapperDtoInterface&lt;Country&gt;</span>
<span class="line"> */</span>
<span class="line">#[ORM\\Entity]</span>
<span class="line">#[ORM\\Table(name: &quot;country&quot;)]</span>
<span class="line">class Country implements MapperDtoInterface</span>
<span class="line">{</span>
<span class="line">  </span>
<span class="line">}</span>
<span class="line">  </span>
<span class="line">怎么理解 @implements MapperDtoInterface&lt;Country&gt;</span>
<span class="line">  </span>
<span class="line">  </span>
<span class="line">\`@implements MapperDtoInterface&lt;Country&gt;\` 是一种泛型注解，表示 \`Country\` 类实现了 \`MapperDtoInterface\` 接口，并且具体的泛型类型是 \`Country\` 本身。</span>
<span class="line">  </span>
<span class="line">这意味着：</span>
<span class="line">1. \`Country\` 类遵守 \`MapperDtoInterface\` 的契约</span>
<span class="line">2. 在接口的泛型定义中，\`Country\` 同时作为输入和输出类型</span>
<span class="line">3. 提供给 IDE 和静态分析工具的类型信息</span>
<span class="line">4. 增强代码的类型安全性和可读性</span>
<span class="line">  </span>
<span class="line">这是 PHP 中通过注解模拟泛型的一种方式。</span>
<span class="line">  </span>
<span class="line">解释:</span>
<span class="line">在这个场景中，&quot;同时作为输入和输出类型&quot;意味着：</span>
<span class="line">  </span>
<span class="line">1. 输入：\`Country\` 可以作为数据传输对象（DTO）的类型</span>
<span class="line">2. 输出：\`Country\` 也可以是最终返回的对象类型</span>
<span class="line"></span>
<span class="line">例如，在映射器中，你可以：</span>
<span class="line">- 将 \`Country\` 作为输入 DTO</span>
<span class="line">- 经过转换后，仍然返回 \`Country\` 对象</span>
<span class="line">  </span>
<span class="line">这种注解提供了类型一致性的保证和更清晰的接口定义。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2)]))}const r=s(i,[["render",p],["__file","php8泛型的体现.html.vue"]]),t=JSON.parse('{"path":"/content/php/base/php8%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%93%E7%8E%B0.html","title":"php8泛型的体现","lang":"en-US","frontmatter":{"sidebar":false,"title":"php8泛型的体现","head":[["meta",{"name":"title","content":"php8泛型的体现"}],["meta",{"name":"description","content":"php8泛型的体现"}],["meta",{"name":"keywords","content":"php8"}],["meta",{"property":"og:title","content":"php8泛型的体现"}],["meta",{"property":"og:description","content":"php8泛型的体现"}]]},"headers":[],"git":{},"filePathRelative":"content/php/base/php8泛型的体现.md"}');export{r as comp,t as data};
