import{_ as s,c as a,d as e,o as p}from"./app-CHrRue27.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<p>//再次分析php-fpm的池(pool)技术 对 PHP-FPM 池（Pool）的总结可以从以下几个方面进行：</p><h5 id="_1-php-fpm-池的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-php-fpm-池的基本概念"><span>1. <strong>PHP-FPM 池的基本概念</strong></span></a></h5><ul><li><strong>PHP-FPM</strong>（FastCGI Process Manager）是 PHP 的一个实现，它通过管理多个“池”来处理 PHP 请求。每个“池”负责处理一组特定的请求。</li><li>一个池代表一组 PHP 进程，这些进程处理来自 Web 服务器（如 Nginx 或 Apache）的请求。</li></ul><h5 id="_2-池的配置" tabindex="-1"><a class="header-anchor" href="#_2-池的配置"><span>2. <strong>池的配置</strong></span></a></h5><ul><li>每个池有独立的配置文件，通常位于 <code>/usr/local/etc/php-fpm.d/</code> 目录下。池的配置文件通常以 <code>.conf</code> 为后缀。</li><li>默认池配置文件是 <code>www.conf</code>，你可以为不同的应用或服务定义多个池，以便为不同的请求提供不同的 PHP 设置。</li></ul><h5 id="_3-配置文件中的主要参数" tabindex="-1"><a class="header-anchor" href="#_3-配置文件中的主要参数"><span>3. <strong>配置文件中的主要参数</strong></span></a></h5><ul><li><p><strong>[pool]</strong>：每个池的配置文件以 <code>[pool_name]</code> 开头，例如 <code>[www]</code> 表示默认池。你可以创建多个池，每个池可以有独立的配置。</p></li><li><p><strong>listen</strong>：指定 PHP-FPM 监听的地址，可以是 Unix 套接字（<code>.sock</code> 文件）或者 TCP 端口。</p><ul><li>例如：<code>listen = /var/run/php-fpm-www.sock</code> 或 <code>listen = 127.0.0.1:9000</code>。</li></ul></li><li><p><strong>user</strong> 和 <strong>group</strong>：设置 PHP-FPM 进程的运行用户和组，通常设置为 Web 服务器的用户（例如 <code>www-data</code>）。</p><ul><li>例如：<code>user = www-data</code> 和 <code>group = www-data</code>。</li></ul></li><li><p><strong>pm (Process Manager)</strong>：控制 PHP-FPM 进程池的管理模式。PHP-FPM 提供三种模式：<code>static</code>、<code>dynamic</code>、<code>ondemand</code>。</p><ul><li><code>static</code>：指定固定数量的 PHP-FPM 进程。</li><li><code>dynamic</code>：根据需求自动调整 PHP-FPM 进程的数量。</li><li><code>ondemand</code>：按需启动进程，减少资源消耗。</li></ul></li><li><p><strong>pm.max_children</strong>：设置池中最大 PHP 进程数。</p></li><li><p><strong>pm.start_servers</strong>、<strong>pm.min_spare_servers</strong>、<strong>pm.max_spare_servers</strong>：用于配置 <code>dynamic</code> 模式下的进程数量。</p></li><li><p><strong>listen.owner</strong> 和 <strong>listen.group</strong>：控制套接字文件的所有者和组。</p></li><li><p><strong>listen.mode</strong>：控制套接字文件的权限（例如 <code>0660</code>）。</p></li><li><p><strong>slowlog</strong>：指定慢日志文件的位置，用于记录处理时间超过一定时间的请求。</p></li><li><p><strong>request_slowlog_timeout</strong>：设置请求处理超过多少时间时，记录到慢日志。</p></li></ul><h5 id="_4-多个池的使用场景" tabindex="-1"><a class="header-anchor" href="#_4-多个池的使用场景"><span>4. <strong>多个池的使用场景</strong></span></a></h5><ul><li>当你需要针对不同的应用或服务使用不同的 PHP 配置时，可以创建多个池。例如，一个池用于处理一般的网页请求，另一个池用于处理大型的后台任务或高并发请求。</li><li>可以为不同的池配置不同的 <code>pm</code> 模式和进程数量，以适应不同的需求。</li></ul><h5 id="_5-使用-unix-套接字-vs-tcp-端口" tabindex="-1"><a class="header-anchor" href="#_5-使用-unix-套接字-vs-tcp-端口"><span>5. <strong>使用 Unix 套接字 vs TCP 端口</strong></span></a></h5><ul><li><strong>Unix 套接字</strong>：通常更高效，适用于同一台机器上的 Web 服务器与 PHP-FPM 进程之间的通信。</li><li><strong>TCP 端口</strong>：适用于跨主机通信或在多个主机间进行负载均衡。</li></ul><h5 id="_6-如何管理和监控池" tabindex="-1"><a class="header-anchor" href="#_6-如何管理和监控池"><span>6. <strong>如何管理和监控池</strong></span></a></h5><ul><li>你可以通过命令行管理 PHP-FPM，例如：<code>php-fpm -t</code> 用于测试配置文件是否有效，<code>php-fpm -s reload</code> 用于重载 PHP-FPM 配置。</li><li>还可以查看每个池的状态，例如：<code>pm.status_path</code> 可以用来配置一个状态页面，供管理员查看 PHP-FPM 的实时状态。</li></ul><h5 id="_7-池的启动与停止" tabindex="-1"><a class="header-anchor" href="#_7-池的启动与停止"><span>7. <strong>池的启动与停止</strong></span></a></h5><ul><li>每个池会由 PHP-FPM 启动时初始化，并根据配置中的设置管理 PHP 进程。如果池没有请求，它将根据 <code>pm</code> 模式的配置来决定进程是否保留在内存中。</li><li>你可以通过修改配置文件或重启 PHP-FPM 来启用、禁用或调整池的行为。</li></ul><h5 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结"><span>8. <strong>总结</strong></span></a></h5><ul><li><strong>池是 PHP-FPM 中的基本单位</strong>，它管理着 PHP 进程的生命周期和请求的分配。</li><li><strong>每个池可以有不同的配置</strong>，可以通过配置文件来调整每个池的行为，例如使用不同的进程管理模式、监听不同的端口或套接字。</li><li><strong>Unix 套接字和 TCP 端口</strong> 是 PHP-FPM 池的常见监听方式，选择哪种方式取决于具体的需求和环境。</li></ul><p>通过以上总结，PHP-FPM 池的配置可以让你灵活地控制和优化 PHP 的处理能力，适应不同的应用场景。</p><p>具体配置例子如下: 是的，如果你定义了多个 PHP-FPM 池，通常情况下，你会为每个池配置不同的监听地址或端口。这样做是因为 <strong>Unix 套接字</strong>（<code>unix socket</code>）是一个文件系统上的资源，而同一时刻一个套接字文件只能由一个进程监听，因此不同的 PHP-FPM 池不能共享同一个 Unix 套接字。</p><h5 id="使用不同的端口" tabindex="-1"><a class="header-anchor" href="#使用不同的端口"><span>使用不同的端口</span></a></h5><p>如果你希望每个池使用不同的监听地址（例如使用不同的端口），你可以为每个池配置不同的端口，例如：</p><ol><li><strong>第一个池使用端口 9000</strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">www</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1:9000</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">50</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>第二个池使用端口 9001</strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">app1</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1:9001</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">app1-user</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">app1-group</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">20</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>第三个池使用端口 9002</strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">app2</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">127.0.0.1:9002</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">app2-user</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">app2-group</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="使用-unix-套接字" tabindex="-1"><a class="header-anchor" href="#使用-unix-套接字"><span>使用 Unix 套接字</span></a></h5><p>如果你希望多个池共享 Unix 套接字，最简单的做法是将每个池配置为使用不同的 <strong>Unix 套接字文件</strong>。例如：</p><ol><li><strong>第一个池使用 <code>/var/run/php-fpm-www.sock</code></strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">www</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/run/php-fpm-www.sock</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">50</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>第二个池使用 <code>/var/run/php-fpm-app1.sock</code></strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">app1</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/run/php-fpm-app1.sock</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">app1-user</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">app1-group</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">20</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>第三个池使用 <code>/var/run/php-fpm-app2.sock</code></strong>：</li></ol><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">app2</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/run/php-fpm-app2.sock</span></span>
<span class="line"><span class="token key attr-name">user</span> <span class="token punctuation">=</span> <span class="token value attr-value">app2-user</span></span>
<span class="line"><span class="token key attr-name">group</span> <span class="token punctuation">=</span> <span class="token value attr-value">app2-group</span></span>
<span class="line"><span class="token key attr-name">pm</span> <span class="token punctuation">=</span> <span class="token value attr-value">dynamic</span></span>
<span class="line"><span class="token key attr-name">pm.max_children</span> <span class="token punctuation">=</span> <span class="token value attr-value">10</span></span>
<span class="line"><span class="token key attr-name">pm.start_servers</span> <span class="token punctuation">=</span> <span class="token value attr-value">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="配置的选择" tabindex="-1"><a class="header-anchor" href="#配置的选择"><span>配置的选择</span></a></h5><ul><li><strong>使用不同端口</strong>：适用于你有多个 PHP 应用并且需要通过不同端口与不同池通信的场景。例如，Web 服务器（如 Nginx 或 Apache）可以使用不同的端口来代理不同的 PHP 应用请求。</li><li><strong>使用 Unix 套接字</strong>：如果你希望更高效的通信（因为 Unix 套接字通常比 TCP 套接字更快），并且希望将多个池的 PHP-FPM 请求通过不同的套接字进行管理，这也是一个常见的选择。</li></ul><h5 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h5><ul><li>如果使用 Unix 套接字（<code>/var/run/php-fpm.sock</code>），每个池必须使用不同的套接字文件。</li><li>如果使用 TCP/IP 端口（<code>127.0.0.1:9000</code>），则可以为每个池分配不同的端口号，确保每个池有独立的端口。</li></ul><p>因此，当定义多个池时，<strong>Unix 套接字和端口号</strong>的选择会根据你的具体需求而定。如果你希望使用 Unix 套接字，可以确保每个池使用不同的套接字文件；如果你希望使用端口号，可以为每个池分配不同的端口。</p><p>Unix 套接字文件（<code>.sock</code> 文件）通常是由 PHP-FPM 在启动时 <strong>自动创建</strong> 的。你不需要手动创建这些文件。只要在 PHP-FPM 池配置文件中指定了 <code>listen</code> 参数，并且该值指向一个 Unix 套接字路径（例如 <code>/var/run/php-fpm.sock</code>），PHP-FPM 就会自动创建并使用这个套接字文件。</p><h5 id="相关的自动创建过程" tabindex="-1"><a class="header-anchor" href="#相关的自动创建过程"><span>相关的自动创建过程：</span></a></h5><ol><li><p><strong>PHP-FPM 启动时</strong>：当你启动 PHP-FPM 服务时，配置文件中指定的 Unix 套接字文件会自动生成。</p><ul><li>例如，在 PHP-FPM 池的配置文件中，<code>listen</code> 设置为 <code>listen = /var/run/php-fpm.sock</code>，那么在 PHP-FPM 启动时，PHP-FPM 会自动在 <code>/var/run/</code> 目录下创建一个名为 <code>php-fpm.sock</code> 的套接字文件。</li></ul></li><li><p><strong>目录存在与否</strong>：如果配置文件指定的目录（如 <code>/var/run/</code>）不存在，PHP-FPM 启动时会报告错误，提示无法创建套接字文件。因此，确保配置的目录是存在的且有合适的权限。</p></li><li><p><strong>套接字文件的权限</strong>：PHP-FPM 会根据配置的 <code>user</code> 和 <code>group</code> 设置来确定创建的套接字文件的权限和所有者。例如，<code>listen.owner</code> 和 <code>listen.group</code> 参数可以用来控制套接字文件的所有者。</p></li></ol><h5 id="举例" tabindex="-1"><a class="header-anchor" href="#举例"><span>举例：</span></a></h5><p>假设你在 PHP-FPM 配置中设置了如下内容：</p><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini" data-title="ini"><pre><code><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">www</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">listen</span> <span class="token punctuation">=</span> <span class="token value attr-value">/var/run/php-fpm-www.sock</span></span>
<span class="line"><span class="token key attr-name">listen.owner</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">listen.group</span> <span class="token punctuation">=</span> <span class="token value attr-value">www-data</span></span>
<span class="line"><span class="token key attr-name">listen.mode</span> <span class="token punctuation">=</span> <span class="token value attr-value">0660</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 PHP-FPM 启动时，会执行以下步骤：</p><ol><li>PHP-FPM 检查 <code>/var/run/</code> 目录是否存在。如果该目录不存在，PHP-FPM 将报告错误。</li><li>PHP-FPM 在 <code>/var/run/</code> 目录下自动创建 <code>php-fpm-www.sock</code> 文件。</li><li>PHP-FPM 根据配置设置套接字文件的所有者、组和权限（如 <code>www-data</code> 用户、组，以及权限为 <code>0660</code>）。</li></ol><h5 id="手动删除套接字文件" tabindex="-1"><a class="header-anchor" href="#手动删除套接字文件"><span>手动删除套接字文件：</span></a></h5><p>如果你手动删除了套接字文件，PHP-FPM 在下次启动时会自动重新创建它。所以，无需担心手动删除套接字文件，PHP-FPM 会负责重新创建它。</p><h5 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span>总结：</span></a></h5><ul><li><strong>自动创建</strong>：PHP-FPM 会在启动时自动创建指定路径的 Unix 套接字文件，无需手动干预。</li><li><strong>配置时</strong>：只需要在配置文件中正确指定 <code>listen</code> 参数为套接字路径，PHP-FPM 会自动处理文件的创建和管理。</li></ul><p>//如果配置了多个端口，那么对于Dockerfile下的EXPOSE就需要多个 <code>EXPOSE 9000</code> 会暴露容器内的 9000 端口到外部。如果你在 PHP-FPM 配置中定义了多个端口（如 9000、9001、9002），那么 <strong><code>EXPOSE 9000</code></strong> 只会暴露容器内的 9000 端口，这就可能会导致访问其他端口（如 9001 或 9002）时出现问题。</p><p>为了处理这种情况，你需要在 <code>Dockerfile</code> 中使用多个 <code>EXPOSE</code> 指令，分别暴露不同的端口，例如：</p><div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 9000</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 9001</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">EXPOSE</span> 9002</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，容器会同时暴露 9000、9001 和 9002 端口，允许外部访问对应的端口。</p><h5 id="另外的考虑" tabindex="-1"><a class="header-anchor" href="#另外的考虑"><span>另外的考虑：</span></a></h5><ul><li><strong>Nginx 或其他 Web 服务器</strong>：如果你使用的是 Nginx 或其他 Web 服务器作为反向代理，确保你的配置文件正确地代理了不同的端口。</li><li><strong>Docker Compose</strong>：如果你使用 Docker Compose 配置了多个服务，并希望每个服务绑定到不同的端口，可以在 <code>docker-compose.yml</code> 文件中配置端口映射，如：</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">services</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">php-fpm</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">build</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">context</span><span class="token punctuation">:</span> .</span>
<span class="line">    <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9000:9000&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9001:9001&quot;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token string">&quot;9002:9002&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样做可以确保不同的端口映射到宿主机上，允许你根据需求访问容器的不同端口。不过一般不会暴露php的端口到外部，上面的可以不用配置ports</p>`,60)]))}const c=s(t,[["render",l],["__file","再次分析php-fpm的池(pool)技术.html.vue"]]),r=JSON.parse('{"path":"/content/php/base/%E5%86%8D%E6%AC%A1%E5%88%86%E6%9E%90php-fpm%E7%9A%84%E6%B1%A0(pool)%E6%8A%80%E6%9C%AF.html","title":"再次分析php-fpm的池(pool)技术","lang":"en-US","frontmatter":{"sidebar":false,"title":"再次分析php-fpm的池(pool)技术","head":[["meta",{"name":"title","content":"再次分析php-fpm的池(pool)技术"}],["meta",{"name":"description","content":"再次分析php-fpm的池(pool)技术"}],["meta",{"name":"keywords","content":"php,pool"}],["meta",{"property":"og:title","content":"再次分析php-fpm的池(pool)技术"}],["meta",{"property":"og:description","content":"再次分析php-fpm的池(pool)技术"}]]},"headers":[],"git":{},"filePathRelative":"content/php/base/再次分析php-fpm的池(pool)技术.md"}');export{c as comp,r as data};
